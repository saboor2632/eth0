[
    {
        "title": "Flow Foundation 🛠 Build your First AI Agent - Agentic Ethereum 2025",
        "video_id": "SC-XjVu7iLs",
        "transcript": "to welcome you to this Workshop by the flow Foundation about building your first AI agent I have two amazing people here and I would hand it over right away to them uh in just one second going to have to do some uh stuff in the background but this is going to be a great Workshop um keep your cameras off as well as your microphones for now we'll probably going to have some time for a bit of a Q&A later just going to admit a few more people and then we can start in a few seconds okay stream is up we should be good to go Ali you can go ahead and share have a good one all right hello everyone I'm super excited to have you here we have something really exciting in store we're talking about one of the hottest topics in the web three Community right now which is AI agents and how to unlock them on Flo and how to get started really with your very first one today we have myself I Le devell for Flo foundation in North America as well as my colleague boha Tang who leads devell for the APAC region the agenda is we're gonna start off with describing what exactly are these AI agents why is Flo one of the best blockchains in fact the best best I would argue for building AI agents and then we're going to go into a deep dive specifically into um a demo which boha will lead in how you could unlock some really cool things to build complicated agents all right agents are about to change everything we've seen an explosion of interest in recent months with Eliza being created in AI 16z to billion dooll AI coins and even Google writing white papers but what exactly are they and why do they matter AI agents at their core are autonomous entities that can offer services they can give advice they could do tasks they're set to replace uh Mechanical Turk fivr upwork all of these different Services where you would have hyp specialized um human agents that you would send to you know write a paper help you with a Grant application um give you personalized medical advice in fact there is a bill that's that's being pushed right now to be able to give AIS the ability to prescribe drugs I don't know if it's going to be passed or not but they they're set to essentially disrupt massive Industries in verticals um they aren't just reactive but they're also proactive they can continuously learn and adapt being available and alert 247 they're one of the most exciting things for me right now and there are four core components that comprise an AI agent I'm going to simplify things a little bit for you you um and these four components you'll find in in platforms like um Eliza which is an open source platform for anyone to build their own custom um AI agent so what what exactly does Eliza offer it's a platform that allows you to create an AI agent that has a brain and when I say a brain I mean essentially you can connect an llm by connecting the Deep seek or open AI by um by chat GPT or or anthropic apis claw Etc um so that it's able to take tokens and things that you send it and react and it knows how to interpret the world right it's using those different AI models its personality could also be shaped similar to a baby where and boha is goingon to give a little bit of an example of this where you could specify this is who you are this is where you've come from son like this is you know in this situation if someone asks this this is how you should respond and by by teaching it how it should interact in different settings and different environments it can extrapolate and it could it could adapt to new situations easily um you could teach it what style to communicate in you can make it perhaps more elaborative or more artistic or cunning the second characteristic that these AI agents have is they have a mouth and ears that they can use to communicate to human beings um this takes place by connecting apis of common social applications like Twitter or Telegram WhatsApp Etc they have hands which means that they can do things outside of the proverbial chat bot they can check your Google calendar they could check price feeds they could schedule appointments they can they can look online they can do a ton of different things they could they could parse your Twitter profile to understand your communication style and mimic it they could look at um GitHub commits um and and do PR requests so many different areas and lastly they have a wallet meaning that they can send receive invest and even manage funds for you bring all these things together you can have hypers specialized entities and characters with unique personalities that are able to do a wide array of tasks um and essentially they're they have the potential to become a new Workforce of employees or or consumer agents so why exactly is Flo the best place to build agents blow has a extremely unique transaction model that allows for bundling a sequence of transactions into one if any of the bundle transactions fail the entire transaction reverts this allows for Atomic transactions it also uniquely separates the roles when when you're creating a transaction into three the proposer the payer and the um the authorizer so uh sorry the approver the proposer and the payer so what that does is at the transaction level if you want to do things like sponsored transactions to create gasless experiences you don't really need to have like a complicated pay Master contract or ERC 4337 or anything like that you're able to do it out of the box things like bundle transactions are super exciting because imagine if you have an AI agent in a video game you're trading with it or bartering World of Warcraft barter M menu pops up um if you want to trade like five pieces of armor for Three Gems you don't want to have a single transaction for each of those onchain assets that are being swapped you want to be able to do them all in one go right and there's a lot of other examples that you could do um there's also multisig transactions which allow these agents to have full spectrum autonomy um there are a lot of different cases where you want to have full security and control over what your agents s so EXA an example would be imagine you're in a telegram chat you and your friends um all co-invest with an AI agent in different mean coins right maybe you want the AI agent to propose different mean points and then if 70% of the people say hey yeah we want to approve this transaction it ends up going through so 70% of the people sign the transaction that it's proposing and and it ends up going through uh maybe you and your partner are are co-managing funds or maybe you have an AI agent that does really risky trades and before it trades more than 20% of your net worth you want it to check with you so you you sign that multi transaction that's going to go through it allows for a ton of customization another really cool thing is account linking also known as account management and this is something very unique to flow that that you're able to integrate with AI agents so account management essentially allows for shared ownership over accounts that allow for agents to be secure predictable and complex you could think of it like turning your accounts into Google Drive folders an application can create sub accounts where you can decide who has access to what resources at any one time this allows for these AI agents to easily manage complicated portfolios of accounts for thousands of users at the same time with investors to access their funds um whenever they want and this is a bit of a diagram I'm just being cognizant at the time um but you have one AI agent that's able to manage a lot of different accounts and the end users can also have access to those accounts one exciting aspect of this is also what happens to an AI agent when you decide to stop paying the credits right I mean deep seek has become Ultra affordable so maybe that's not as huge of a scare but it is still a potential reality the cool thing about this is you still have access on Flow like using this unique account management to the child account that the AI agent was managing for you even if the AI agent like completely disappears and you could transfer all of those assets into your um custodial account which is super super exciting lastly um there's something on Flow called capabilities which you could kind of think of as AWS um I am where you can um provide granular permissions to resources functions assets and you can specify like programmatically hey you know this asset could be like loaned for this amount of time or these users have access to this under these circumstances it allows you to really fine-tune like what and where your your AI agent could um access all right um without further Ado I'm going to turn it over to my colleague boho to go over a fun little demo that we have in store for you hello everyone uh let me share my screen uh here is my ghost my guide and yes code yeah so first uh we can see here the rippo we call uh allizon flow actually it's a Time Light version of Aliza framework you can go to uh we already have the link on our event haxon event page it's under the onflow organization and uh like I said we introduced a bunch of flow dedicate feature in this uh framework also we provide account Port that is the actual account management Ser uh contract for uh the agents and uh if you are like a beginner of the Aliza you can I recommend you can go to the official alliza framework with me to check their guide but uh this version for Alon flow it should be uh more lightweight version and you can directly using this framework uh for for every like uh plug-in it's compatible with a original Aliza framework so if you already build your agent based on Aliza you can still using your own framework but if you want to create very unique features on Flow blockchain using account management I recommend to using on flow to start your uh project and uh uh here is a guide I can quickly go through that and uh some basic requirements and you can clone your file and uh go to there and one thing you need to remember is there is a dependence on the Aliza framework so you should using a some module update to uh get everything done like uh you can see here you can using sorry you should update if you already install that you should update what H H Sub sub modu updat uh in it recursive what's the recursive recursive what to updates yeah I already updated uh using this command to uh colog all the Aliza dependency and after that you very simple U remember to to install everything and PMP instore but remember uh you need add uh no Frozen log file because the dependency update frequently so sometimes you want to add your own plugin but it's not uh include in the pack PMP log file but if you directly using that uh maybe it will tell tell you there is some files not include in log file so uh if you're using this no fro Frozen log file it will be always install successfully um but yeah when you when M some error you will see here then you just follow the guide and this command is basic for flow blockchain uh you need to install the flow uh dependency contract and before that you can see here here flow C is flow dedicated command line Tour uh it's also recommend to install first if you are using flow flow framework and just go through that uh installed flow contract dependency you will see uh you'll see the flow contract will uh directly uh download from uh Manet and catch in your local file uh in the local folder is uh import folder uh here is see here is the import folder that all uh flow related smart contract and uh I think this take some time to yeah it's all I already download it so it's all looks good and then just build the framework using very simply uh PMP build and you are I using uh in this framework I exclude several file uh like not for Rel uh I exclude that kind of this like nonf flow related file so it will save your time if you are only build on Flow but if you are building on other blockchain if you still want to using the other blockchains plugin for example ICP you just remove this line and it will compile build ICP file uh but if you are like flow uh dedicate agent just directly using PMP bu PMP PMP build they will directly build every uh file for you and uh then you almost finished the set up and just set up the configuration and you're using copy a new uh environment file and choose your model actually uh the model my recommendation is choose the best model to to to to start your AI agent because the model the intelligence of the model is a huge impact your like behaviors uh usually at beginning I using my local model like AMA to using a small model run my uh laptop but the model is not intelligent enough to get a right answer so if you you I recommend using open eye or or deep seek like this the most powerful model to to be the intelligence there will be uh more helpful for your AI agent and I choose a deeps uh but re deeps the API uh seems like a little bit slow uh but yeah I I can try later um for for the whole uh test and uh you can see the if you choose the model it will very simple uh like here is a file we design for as Nota it's a it's a Jon file create by Ali it's a Cy and it's a a description file about all the character information but remember you um when you start Aliza framework you need to like the the character file uh they they were check care scammer very strictly so it will be best just copy one file uh from uh dependency alliza character copy from here and modify everything by yourself because the fields is very strict and here is something and you can a lot of um examples messaging and his Persona you can um customize but most important part is here like this is your model I choose deep seek and here some um secret about uh your flow wallet you should set up your flow wallet remember this is just for the agent wet it's not it's testet you should set the private key for and the blow World address but remember that's only for the test uh the agent wallet it's not for user wallet I will tell you later it's about account management and here is the plug-in uh plug-in is uh you will load you just put the name of this plugin and this plugin is for specific a pluging uh WR here it's package common and package name the name is fix AI uh common I I paste the the plugin name here and all this one uh all this is uh most important part of your character add your plugin add your flow wallet and choose a model and that's all for the uh agent setup and then you have everyone then you can just run the code to start your AI agent uh I recommend if you are bu uh in development you can using PMP start B and will print more information uh for for for the uh agent and I have some come out here like this one just start debug uh using the character file Jon loading and done it's just started and you can see here as you can see the log uh I choose deeps model for the ccor model and I read just a bunch of actions here that's a flow specific action from from the flow specific pluging and this is the general uh behavior from Ala RoR and I I'll will tell uh detail about this action later but you can see here the last sentence is tell you you need you can if you want to interact with your agent you can using PMP start client to start a client to visit uh your agent so I using this window to do PMP start and then you can create a window uh you can create a here it is uh very simple uh client to run here is a chat box you can chat with your a agent and here I can ask the first very simple question and uh tell me my wallet info and that is uh my wallet info instead of the agent W INF for so uh you can see the here is the log I because I using debug you can see the props for the agent are very detail and some example post and here is all the uh pops and here you tell you okay your message is T me FL info and we will run get user account info action and then you will see here here is all your account information and this is the action I premade in the allizon flow in the plugin a common pluging and you see here is wording for this one this account uh uh you can see it's config the in the Jon uh the character file it's agents account and you can you just check uh flow again and going check this is our agent account agent address uh wait a moment the website a little bit hello oh sorry it's test that uh test that hello this is our agent address but you see the the response is your accounting for is flow wallet address is this another flow wallet that means your um the agent wallet controls your you see your user ID is this one and agent controls your user ID and assign another flow wallet to you and this wallet is a dedicated where only for your user ID it's a different wallet that is our onchan account management and everyone using um this framework and this protocol you can let every user chat with your agent with and assign a different uh wallet each each user each wallet and the all operation you chat with you L your agent to do is based on your wallet instead of agent wallet that what we call it our account management on Chen and here is some example and I will uh introduce more on the uh detail action maybe like this is the common plugin here and we we remember that we uh on our sorry uh didn't see that uh we we we uh at the beginning we start uh our agent to C5 uh flow dedicated five dedicate action that is this five action and this five action is pread and there is uh Ure user wallet uh user account exists that is create a user agents for this user ID and you'll see here I I'm using user ID as a identifier for every user and create based on this user ID create wallet based on this user ID and get you wallet wallet uh information and also here very simple uh way to get flow uh price uh on and using qu Oracle to get flow price and get token info you can get all flow fible token information and just send a uh send a you know a a a contract address and will return or the flow whenever evm or flow Cadence will tell you about uh the flow uh details like symbol decimal and and also price inflow and that basic information and this is transfer it's different with other broad this transfer is for your account instead of the world instead of the agent account you'll see here uh we are using user ID yeah remember message user ID as the uh wallet controller and all all uh transaction where transfer token it's a it's a trans transaction uh by account uh account P service you need to uh deliver your user ID as a key parameter and all the transfer is come from the users wallet instead of agent wallet and that is our native account management service and uh another feature we can um introduce is our uh Bondo transaction but actually currently we we we uh the transfer is very simple you can uh not only for flow but also you can uh for the um evm side for for the Cadence and evm side but for evm side uh we are using Cadence to WRA the evm transaction then you can do some bnch uh transaction call or bnch like like multicore in solidity but uh that will be more uh you can add more condition you can add more fls or while more uh logic in your script to to execute more um complex transaction like for example here is a uh uh information and just not only to to when you want to get uh this is a very simple getf flow token information um query but you can also do some transaction but just for example if you want to uh not only get the token information like DMO like uh contractor uh basic information but you want you want to combine all the price quering in one API call and we can use in Cadence file to we Sorry here it is this is a yasi 20 token information here is on uh price and I just skip a lot of um like specific uh smart contract address you just imagine this Cadence file is more like uh a bundle uh query information uh JavaScript and you can put all all the API call uh in this one file and just using let me just using here about get information get token information EVN and just using this exclude transaction this command using only exclude transaction for get information evm and all script you can write in this CDC file and you can include every uh information you want to querry or any like transaction you you want to execute in one file and it's we call it Bunch trans um Bunch transaction or Bunch script quaring you can not only the the the the token pair you can also get the token price get all the decimal information and organize it as a struct and then return to a file so we can if you are a evm developer you can also using cence and flow uh specific feature to help you um to enhance your development experiments and I think this two uh core feature is the very most exciting part on our uh AI agent development side and uh yeah so it's almost a little bit time uh almost everything I want to share and I do want to have uh share more information and things about that um just being cognizant of the time and we have two more minutes I I shared a link um inside uh the chat um just join the channel like world uh tour like flow World Tour um if you type that into telegram it should work that's where we're giving feedback people are ideating on different ideas if they have any questions about our bounties if they want to do pitch training and to be honest like really take advantage of this because um we have on our team people that have individually won like combined maybe 15 um hackathons with first place people who have started unicorn startup or been a part founding team members of unicorn startups or started their own startups um as well as coaches that have been trained by tedex um coaches and speaking spoken in front of thousands of people so it's a massive opportunity to build uh a hackathon winning pitch as well as really finding that product Market fit for your idea figuring out what pain are you actually soling who is the group of people you're solving that pain for what does the future look like what impact is going to be a result of what you're building and like those are the core things I really want you to think about while you're hacking on on our bounties or in general like what are you solving what are other people working on what's not ideal about the the alternative routes that people have and how are you making a massive impact and really try to like put numbers to that really try to like show why what you're building matters um um in addition to that oh I just saw a Discord here oh yes and then there's also the partner channels on the eth global Discord um join that we're also active there um thank you so much for everyone attending um I think that this was super beneficial and thank you so much boho again we're available if you have any more questions good luck hacking um yeah let's let's get the show on the road yeah uh B awesome presentation great Workshop uh much appreciate your time always great to have flow with us um and yeah like if you still have any questions that are uh that are open that have not been answered or that just came up during the workshop again feel free to post them in the flow Foundation partner CH on our Discord or uh head over to the uh flow Discord and check that out great people great stuff uh thank you all for your time uh Happy hacking we have uh more workshops coming up later today would be awesome to join him as well and see you all on Discord thank you pasc bye"
    },
    {
        "title": "Nillion 🛠 Speedrun Nillion&#39;s SecretVault - Agentic Ethereum 2024",
        "video_id": "XOhSgnTm_Zo",
        "transcript": "to the room I love how we have ai note takers for our AI atic ethereum event that's so funny right somay it'll only be AI note takers and no viewers exactly just AI notet takers talking to each other great we have about maybe 10 more people who are still trying to join this waiting room so I'm going to give it a moment oh all the AI are starting to chat with each [Music] other there we go awesome I think we have most people in the room now and I will continue to admit people throughout if they join in but welcome everybody we're really excited at a part of agentic ethereum to go into our next talk which is by Steph and she's the head of Deval at Nilan and we are going to learn all about speedrun million's secret vault so without further Ado feel free to share your screen and I will go off camera for you to present amazing thanks Valerie hi everyone welcome to this session I'm just going to hide the inals today I'm going to run a session called speedrun secret vault uh and just to introduce myself quickly I'm Steph orilia I'm the head of De developer relations at Nan and I'm excited for you all to kind of like understand secret fault and start building with it during e Global agentic and just because I know you're all curious um we are giving away $5,000 in prizes for this hackathon the first uh set of prizes is best use of million secret vault and there's a little star next to that prize because this Workshop is all about million secret vault and I'll get you up and running with million secret vault really fast so you can use it and integrate it into all of your projects for the hackathon the other prize is uh a prize for building an agent framework integration there's a $1,000 prize for the best framework integration and that's for anyone who happens to create a library or a developer tool that makes it easier for other developers or users to use Nan with um an agent of your choice so maybe that's Eliza maybe that's something on open AI um any type of AI agent framework integration could win that prize so this one is kind of a wild card and it's more open-ended um and then the other prize again there's four of them for the best use of secret vault which I'll show you next oh and you can scan this QR code here to learn more about the prize and understand what you have to do to qualify but now I want to talk about Millions secret vault so secret vault is a decentralized storage solution and it's for keeping sensitive data secret and it works by storing encrypted shares across a decentralized cluster of nil DB nodes the reason that secret vault is so cool is that your data stays secure so this is really great if you're building anything with your AI agents that's maybe using user data so if your agent is storing user data somewhere it should be stored in a place where user data is kept super secure um this could also be useful if your agents are in a swarm and they're talking to each other and they need to share data with one another but they don't want to leak that data out because that would uh create just like a leak where someone else could take in that data and understand what the Swarm is doing and then your product is not as useful potentially so with Nan secret vault you encrypt data and when you encrypt the data you split it into different shares and each of those shares is stored in a different million DB node so that any node doesn't see the encrypted data they just see a share that's meaningless so that's how we're using secret vault to secure data uh one of my favorite things about using secret vault is it's very easy in my opinion to integrate because the way you act access and interact with secret vault is through easy to use apis uh before web 3 I was in a web 2 development background and I was always using apis so when I came into web 3 and I had to get used to um more complex ways of reading and writing either through clients or through anything else I found myself missing apis a lot because it felt so easy to understand how to interact with something and secret vault is cool because you can use apis to create schemas and then read and write data to these schema collections um so that storing and retrieving data feels very familiar and easy and then the last reason I really like building with secret vault is because we provide a couple powerful libraries that you can use out of the box the first library is called nil ql that's nil query language and that's for the encryption and decryption of any of that private data that you want to store in secret vault the second library is called million SV wrappers that's neillian secret vault wrappers and that's basically a JavaScript npm package that does a lot of the API calling for you because you're writing to multiple nodes um if you were using the apis directly you would have to use n number of apis one per node but if you use the wrapper Library it simplifies that so you just tell the library oh I want this node that node and that node these three node URLs and then it handles all of the API calls for you so that's a little bit about secret vault and then the other thing to talk about is nql that was that encryption and decryption secret data library that I was telling you about before so this is an example of um a record that I might want to store inside of secret vault it looks like a Json uh data payload but there's a couple things to note there are these a lot markers within the data and anywhere that a lot is Will signal to nql the encryption library that that value needs to be encrypted so the first value that I want to encrypt is name that's allotted so my name will be encrypted in the resulting data I also want to encrypt the number of years that I've been in web 3 so I also have an A Lot property there showing this number should be encrypted before it's stored for rating of the product imagine that's something that's just in a survey that's not sensitive to my application so I don't need to aot that that can just be stored in plain text and when nil ql runs on this record when you uh encrypt it with the library this is what the resulting data could look like so I have three different sets of data and each of these sets has those encrypted properties you can see name and years in web 3 in all three of these is written with a share and the shares are different between nodes so the first node will receive this payload with different shares than the second node with different shares than the third node so if someone were to um crack the security of one node they would still have no idea what the name or the number of years in web 3 would be for this record because it's encrypted with a share and the share is completely meaningless but when you um use no ql to decrypt or to recombine this record it will give you this back so you'll be able to see the name the years in web 3 and the rating of the product in plain text um because it's recombining those shares and so these three records are separately uploaded to one node each of secret vault and that's how uh the data is stored so to put all of that together the full flow of using secret vault is um to create either an AI agent or an app so that's down here that AI agent or app takes in data so imagine um if you had an agent you're prompting the user to tell you their name and how long they've been in web 3 and also the rating of the product so they give you all that information and then the agent says okay I will encrypt those fields so the agent encrypts the private data fields with the no ql library that results in the three different encrypted records and then each of those records is uploaded to a separate nil DB node and then when you need to decrypt the data or read it the agent can call the nodes the nodes give the pieces of the data and then you can recombine the three pieces to decrypt the data again with no ql and that that all happens in a really easy flow through the wrappers okay so now let's actually speedrun this flow so by speedrun I mean we're going to go through the quick start really fast oh I can hear somebody does somebody have a question Okay cool so we're gonna go through the quick start really fast I'm you can code along with me if you want uh but if you miss anything you can send a message in partner nilon on Discord and I'll look at it afterwards um or just let me know if anything's unclear and I can stop and address the question but I'm just going to run through the quick start straight on my machine okay um there we go so I'm just going to go to docs. million.com QuickStart and you can see there's different things that you can start building so I'm going to click the secret vault quick start because I want to run through this one so in this quick start it'll take a little bit about about excuse me 15 minutes and we're going to build a privacy preserving data collection for a web 3 experience survey So within that survey we're going to have the name and years in web 3 properties which we will encrypt and then we'll leave these um experience ratings out uh we'll we'll just store them in plain text so that anyone can read them if they wanted to and this is going to be a node.js project that I create completely from scratch as it says in the quick start so let's start building the the project I'm just going to minimize this and I'll keep this on the left side of my screen and then I have a terminal over here that I'll leave on the right and I'll also pull up a code editor so the first thing that we need to do is create a directory for our project so I'm going to make a directory and I'll CD into that directory next we need to initialize the project so it's going to be initialized um as a module so npm in it es6 and that will just set the type as module inside of the package Json the next thing I have to do is install the SV wrappers package this is the package that manages um secret keys and all of the oops oh wrappers so this is the package that uh manages all of the keys and also creates JWT API tokens based on your your organization config for uh secret vault so I have all of that and I'm just going to open up cursor since this is a gentic uh I'm going to use a agent powered um code editor for my project and I'll just open the terminal at the bottom so that um I can do everything within uh cser okay so we've set up the project the next thing I need to do is create a file that will hold my organization config so now I have this org config file within the quick start I have a demo organization config that I'll copy into org config and now let's quickly talk about the org config so any um if if you are creating an entity to use secret fault you'll create an organization um I'm just using the demo organization from the quick start but you can actually register your own organization and I recommend that you do this for your projects uh here in the portal so you you would just use this registration portal you could get start a new organization you'd enter whatever you want the name to be and select nodes these are the three demo nodes that will be selected for you and these are actually the nodes that my organization is using as well so I'm skipping that step because I already have my organization credentials uh but along with the organiz ation credentials I have the node config the node config contains the URLs and the decentralized identifiers for each of the nodes and the nodes are what I will be uploading my data to each of these nodes will get a different piece of that data which is why it's important to have the node information inside of the node config um along with the organization so the organization secret key is actually what is generating API tokens for each of these nodes so that um inside of secret vault you know that the organization is the correct person or the correct entity that's writing to the secret vault um data store Okay so we've got our or credentials the next thing we need to do is actually create a collection schema so I'll create a file for that schema. Json this is empty for now but I'm going to copy the web3 experience schema into the schema Json and now we can take a look so all of the schemas for secret vault follow the draft 7 Json schema uh schema and within that you can add a title for your schema and then you start to define the shape of the data that you'll be uploading into secret vault if you've ever used something like mongod DP it's very similar to that where you set all of the properties that you expect um to be uploading so the first thing I'm expecting is an ID this will always be set for every record and then I will be uploading a person's name the number of years they've been in web 3 and then a collection of responses to questions so each question will have a question number so like question number one question number two and the answer to the question will be a rating between one and five so for my survey that I'm building I want people to be able to um rate their experience their user experience with different things so I'm asking them to rate their experience with solidity uh with the ux wallets things like that so that I can get a general understanding of how um the ux is improving in web 3 this year okay so previously we were talking about how um secret vault is really cool because you can have secret data inside of the Vault and the way that you mark data inside of the schema to be secret is with share so if something is a share it's not the actual name we're uploading the share of the name so that is that string if I go back to my presentation oops so if this is the original record uh the share is the piece of the encrypted data that's going into the node and so anything that's going to be encrypted we're marking um with the share and the type of a share is a string so you can see that both name and years in web 3 are shares while uh the array of responses the properties are just in plain text so they're in integers strings dates whatever is going into that response array doesn't need to be encrypted so there's no shares there okay so that's our schema and in order to start uploading data to the collection we actually have to first upload the schema to all three notes so in order to do that I'm going to create a mini script that will take this schema and actually upload it so I've created a file and within this file I'll just paste in the script and I'll explain what it's doing okay so this is the script for posting a schema to all of the different notes at the top you can see I'm importing the secret vault wrappers um that's just the collection that helps do all of the API calls I'm also importing org config the org config is what we previously created that has the keys um and the identities of all of the nodes so that we know where to upload the schema to so now that I have all of that I can run this to create a wrapper and initialize an organization the or has been initialized with those nodes and also the credentials and in order to actually create a schema I have to give the wrapper the schema file which is the schema. Json and the collection name which in this case is web3 experience survey this can be anything you want it's just so that if you're looking at all your schemas you can easily understand oh that's my experience survey so after that you can create the schema and it should upload to all three nodes but let's actually test this out so I'm just going to run node host schema which is this file awesome so this was successful and it created a new collection schema for all three nodes so this node this node and this node and you'll also see that the ID of this schema is the same for all three nodes and that's really important because you want to be able to write to the same schema and not have to worry about like oh did I use a different ID for one node from the other node it should all be very consistent so that the only difference between nodes is the encrypted Share value um and that's because those need to be different so that when you recombine them you get the True Value all right so now we have schemas across all of the different nodes the next thing we're going to do is create a script to actually interact with the secret vault data so that's writing data to our schema collection and then reading data from the schema collection so let's create one more script which is index JS and inside of this script I'll copy in some things so the first thing is importing dependencies we actually don't need The UU ID package so I'm going to leave that out oh the AI is trying to autocom complete for me I don't want this um okay so we're going to import the wrappers package the same one we did before and also the or config the next thing we need to do is um create a a const for the schema ID and we can read this straight from the console log of the other script this is going to be hardcoded to the schema we just uploaded to um secret vault after that we'll create a data payload and this will just be oops this this will just be uh some dat that we want to post to the schema so remember that each of the encrypted fields are marked with a lot ahead of time to show that these will be encrypted and then once they're uploaded to secret fault they'll have transformed into shares so instead of vitalic um let's say Satoshi Satoshi Nakamoto he's probably been in web 3 longer than anyone maybe 16 years and I'll just leave his responses to uh the survey Asis so now we have a data payload and we just have to add the main function let's run through this main F function quickly so inside of the main function the first thing we're doing is initializing a collection using the org config nodes and credentials and also the schema ID that we hardcoded above here so now we've initialized a collection um for this schema when we have the collection ready we can start writing data to the nodes so this collection function write to nodes is coming from that wrappers package and it's just going to write that data to all three nodes in the collection and then it will log out the new IDs I'm just going to comment this second part out for now because um after after we write the data we can read the data but I just want us to focus on writing the data to this collection first uh and then we'll read the data okay so we have the function and we can run node index.js this writes data to all three of those nodes so you can see on node one it's created this ID on node two it's created the same ID and on node three it's created the same ID so you can see that it's uploaded this ID to all three of those nodes so the data is successfully in all three nodes in the collection now let's try reading the data so I'll comment this out and we'll just read the data from The Collection I'm going to remove this SCE because we didn't actually upload any any data right now um so this is just saying okay take the collection read from all three nodes and the reason that this bracket is empty is because we're not actually passing in a filter if you wanted to you could filter um for different things in plain text like maybe you would want to filter for a specific rating to a response you could do that um by passing in a valid filter here but I'm just going to read the the records that are currently inside of the secret vault okay so we see one record this is that most recent record that's just Satoshi Nakamoto um let's add one more record and then we'll write and read so maybe this can be Jacob from eth Global famous I have a feeling he's been in web 3 for like I'm gonna say 10 years we'll have to ask him afterwards and we'll say that he gives both questions of five because he finds the ux awesome so going back down I'm going to comment all of this code back in so that it will read or excuse me it'll write Jacob's record to our data collect ction and then it'll read all of the decrypted collection data so we should see both satoshi's and Jacob's record uh inside of the logs so coming up here uh the first thing that happened is this wrote to the secret vault so it created one new record 39f blah blah blah and then when it needs to read it reads both records that are inside of the secret vault so the first record down here is Satoshi which was previously uploaded and then we can also see Jacob which was just uploaded so you can see that with secret vault we were able to encrypt and write data and then read all of the data back because we have that organization secret key that's needed to read and write from secret vault and also create new schemas so that's a little bit on secret vault I think we just speedran all of the quick start in I want to say less than 10 minutes so I think this should give you enough uh to use secret vault in pretty much any flow that you're doing for your AI agents uh if you wanted to do this from scratch yourself you would just go register a new organization so you would get um your own secret keys for your organization and then you could start creating collection schemas based on whatever data you want your agent to read and write um inside of secret vault so that could be user data Maybe it's um shared State between agents so that they know parts of what each other are doing um maybe it's memory so that if you're creating context for an agent they have tons of different uh things to draw from anything like that would be an awesome application for using million secret vault and oh one more thing to mention is that um if you come and visit Us in Discord we have office hours every single day twice a day so one of the office hours is at uh I believe it's 10: a.m. European Time and the other office hour is at 10: a PST so whatever your time zone is you should probably have at least one office hour every weekday that will work for you and we would love to hear what you're building and also help if you have any questions um we're really excited to see what you all build I think that's everything for me but if anyone has specific questions you can chime in to the chat and I'll take a look awesome I do see a colleague of yours possibly answering some questions in here oh cool but someone is asking about your office hours yes let me um grab the office hour schedule and I'll paste it into the chat awesome we have a couple minutes left for any questions uh feel free to drop them in the chat or unmute yourselves for the last couple minutes it's so funny to see all the note takers with the takeaways if I had had this in University would have been game over for everyone uh actually if I could if I could ask a question just about like um when is when is the most common use case for using nylon like I understand like for a survey but when would either a real company or somebody who is actually developing want to use want to use this tool yeah we're seeing all kinds of use cases um a lot of them are kind of like in healthc care uh a lot of them are doing things with AI agents games anywhere basically that you have data that you need to keep secret for some reason it is a good use case to consider Nan I have a question about data avability and because when you create organization config it looks like there's three hardcoded nodes so what in the case if like one note is offline there's any mechanism to retrieve the data yeah that's a great question um let me check with my team I think we have some contingencies for when if a node ever went offline uh but the data availability piece is huge so let me answer that question in Discord so that I get the right answer for you unless I see my teammate Nico in the chat maybe Nico knows the answer there hey um I believe on um on our current design that uh it depends so we have two different ways of securing your data and let's say that you're using what we're calling the cluster secret key and or the cluster key the cluster key is going to secret share your data and all the data is required in order to reconstruct on the client so if any of the nodes let's say that you chose and I know in our in our particular hackathon cluster I think we have three nodes but you you could have a million NB cluster that has you know 30 nodes and you chose 20 of them and one of them is missing you cannot reconstruct your shares this is just a kind of a a trait of the way that we're I think we're just doing exor sharing or or summation sharing so um but if if you use um a I think we're we're calling it The Secret Key the secret key uses a um homomorphic encryption friendly version of uh encryption with a with a key or with key material that you manage and effectively the U each one of the databases is going to have a clone so you could imagine for availability wise that you'll have greater um I mean it's a trade-off on the features but you'll have like greater High availability if you use the secret key strategy so so the answer is yes and no depending on which route that you go all right I think we had one more person raising their hand but I don't see it anymore uh feel free to come off mute and ask your question we might have time for one more hello are you able to hear me awesome thank you B uh okay step and Nico uh my question is well it's a little bit of a mix in regards of the secret key that some of the partner here already asked um in my project my teammates and I were thinking about perhaps using neon just for let's say keep secrets variables secret but you mentioned about that often times one of the use cases on million could be for keeping uh Secrets data related to Healthcare in this regard or project is related to Veterinary Healthcare so uh we might want to do that to a certain extent so there is a specific situation that you could talk about on how this could be implemented on on that regard um I I think I caught your question you said you're doing something with Veterinary healthare and you wanted to know if that would be a good use case yeah exactly because one of the things that we would like to add is for example let's say that I'm going just to give you the context often times uh veterinaries tries to make the challenge of ask the right questions to the owners in order to understand what are the current situation of the of the pet and often times owners do to let's say perhaps they don't want to take full responsibility of uh bad care or they are really afraid for their pets and ended up to discard important possible diagnosis uh within the observations that they could provide as an input um within this the veterinaries would need to a certain extent have a low control over that owner uh between other colleagues within the platform just to understand if that owner is uh Troublesome or not it's so some sort of like uh let's say validation on the professional side to just be aware from colleague to colleague about that a specific owner I don't know if you catch the idea there interesting um yeah I think I caught some of the idea one thing that it made me think of was um maybe I know if I've taken my pet to the vet it feels like I talk to two to three separate people like I talk to a different person when I check the pet in versus the vet and sometimes I forget what I've told each person so potentially a use case could be storing all of that information that the person has used inside of secret fault and then maybe you could combine all of those text records to give your AI agent context um each time someone prompts and maybe you could say to the agent in uh the training like go through everything this person said and capture the most important pieces that could impact the animals Health something like that would that make sense for you yeah it does um I guess I'm going to work over that idea that you provide me and perhaps I'm going to catch up in in Discord just to ask further more if any doubt yeah awesome and like I said we'll be on Discord uh all week but we also have two synchronous office hours each weekday so you can talk to us either place awesome thank you guys yeah thank you well thank you so much and again this was Steph the head of Devall with neillian uh you can reach out to them and their team on Discord and we look forward to seeing all the projects built with Nan thank you so much everybody have"
    },
    {
        "title": "Steph Orpilla I Speedrun Nillion&#39;s SecretVault I Agentic Ethereum 2025",
        "video_id": "fhG4uELOClo",
        "transcript": "[Music] hi everyone welcome to this session I'm just going to hide the controls today I'm going to run a session called speedrun secret vault uh and just to introduce myself quickly I'm Steph orilia I'm the head of De developer relations at Millian and I'm excited for you all to kind of like stand secret fault and start building with it during e Global agentic and just because I know you're all curious um we are giving away $5,000 in prizes for this hackathon the first uh set of prizes is for best use of million secret vault and there's a little star next to that prize because this Workshop is all about million secret vault and I'll get you up and running with million secret vault really fast so you can use it and integrate it into all of your projects for the acon the other prize is uh a prize for building an agent framework integration there's a $1,000 prize for the best framework integration and that's for anyone who happens to create a library or a developer tool that makes it easier for other developers or users to use Nan with um an agent of your choice so maybe that's Eliza maybe that's something on open AI um any type of AI agent framework integration could could win that prize so this one is kind of a wild card and it's more open-ended um and then the other prize again there's four of them for the best use of secret fault which I'll show you next oh and you can scan this QR code here to learn more about the prizes and understand what you have to do to qualify but now I want to talk about Millian secret vault so secret vault is a decentralized storage solution and it's for keeping sensitive data secret and it works by storing encrypted shares across a decentralized cluster of nil GB nodes the reason that secret vault is so cool is that your data stays secure so this is really great if you're building anything with your AI agents that's maybe using user data so if your agent is storing user data somewhere it should be stored in a place where user data is kept super secure um this could also be useful if your agents are in a swarm and they're talking to each other and they need to share data with one another but they don't want to leak that data out because that would uh create just like a leak where someone else could take in that data and understand what the Swarm is doing and then your product is not as useful potentially so with Nan secret vault you encrypt data and when you encrypt the data you split it into different shares and each of those shares is stored in a different million DB node so that any node doesn't see the encrypted data they just see a share that's meaningless so that's how we're using secret vault to secure data uh one of my favorite things about using secret vault is it's very easy in my opinion to integrate because the way you access and interact with secret vault is through easy to use apis uh before web 3 I was in a web 2 development background and I was always using apis so when I came into web 3 and I had to get used to um more complex ways of reading and writing either through clients or through anything else I found myself missing apis a lot because it felt so easy to understand how to interact with something and secret vault is cool because you can use apis to create schemas and then read and write data to these schema collections um so that storing and retrieving data feels very familiar and easy and then the last reason I really like building with secret vault is because we provide a couple powerful libraries that you can use out of the box the first library is called nil ql that's nil query language and that's for the encryption and decryption of any of that private data that you want to store in secret vault the second library is called million SV wrappers that's million secret vault wrappers and that's basically a JavaScript npm package that does a lot of the API calling for you because you're writing to multiple nodes um if you were using the apis directly you would have to use n number of apis one per node but if you use the wrapper Library it simplifies that so you just tell the library oh I want this node that node and that node these three node URLs and then it handles all of the API calls for you so that's a little bit about secret vault and then the other thing to talk about is nql that was that encryption and decryption secret data library that I was telling you about before so this is an example of um a record that I might want to store inside of secret vault it looks like a Json uh data payload but there's a couple things to note there are these a lot markers within the data and anywhere that a lot is Will signal to nql the encryption library that that value needs to be encrypted so the first value that I want to encrypt is name that's allotted so my name will be encrypted in the resting data I also want to encrypt the number of years that I've been in web 3 so I also have an A Lot property there showing this number should be encrypted before it's stored for rating of the product imagine that's something that's just in a survey that's not sensitive to my application so I don't need to aot that that can just be stored in plain text and when nql runs on this record when you uh encrypt it with the library this is what the resulting data could look like so I have three different sets of data and each of these sets has those encrypted properties so you can see name and years in web 3 in all three of these is written with a share and the shares are different between nodes so the first node will receive this payload with different shares than the second node with different shares than the third node so if someone were to um crack the security of one node they would still have no idea what the name or the number of years in web 3 would be for this record because it's encrypted with a share and the share is completely meaningless but when you um use no ql to decrypt or to recombine this record it will give you this back so you'll be able to see the name the years in web 3 and the rating of the product in plain text um because it's recombining those shares and so these three records are separately uploaded to one node each of secret vault and that's how uh the data is stored so to put all of that together the full flow of using secret vault is um to create either an AI agent or an app so that's down here that AI agent or app takes in data so imagine um if you had an agent you're prompting the user to tell you your their name and how long they've been in web 3 and also the rating of the product so they give you all that information and then the agent says okay I will encrypt those fields so the agent encrypts the private data fields with the no ql library that results in the three different encrypted records and then each of those records is uploaded to a separate nil DB node and then when you need to decrypt the data or read it the agent can call the nodes the nodes give the pieces of the data and then you can recombine the three pieces to decrypt the data again with no ql and that that all happens in a really easy flow through the wrappers okay so now let's actually speedrun this flow so by speedrun I mean we're going to go through the quick start really fast oh I can hear somebody does somebody have a question Okay cool so we're going to go through the Quick Start really fast I'm you can code along with me if you want uh but if you miss anything you can send a message in partner Nilan on Discord and I'll look at it afterwards um or just let me know if anything's unclear and I can stop and address the question but I'm just going to run through the quick start straight on my machine okay um there we go so I'm just going to go to docs. nan.com QuickStart and you can see there's different things that you can start building so I'm going to click the secret vault quick start because I want to run through this one so in this quick start it'll take a little bit about about excuse me 15 minutes and we're going to build a privacy preserving data collection for a web 3 experience survey So within that survey we're going to have the name and years in web 3 properties which we will encrypt and then we'll leave the um experience ratings out uh we'll we'll just store them in plain text so that anyone can read them if they wanted to and this is going to be a nodejs project that I create completely from scratch as it says in the quick start so let's start building the the project I'm just going to minimize this and I'll keep this on the left side of my screen and then I have a terminal over here that I'll leave on the right and I'll also pull up a code editor so the first thing that we need to do is create a directory for our project so I'm going to make a directory and I'll CD into that directory next we need to initialize the project so it's going to be initialized um as a module so I'll npm in it es6 and that will just set the type as module inside of the package Json the next thing I have to do is install the SV wrappers package this is the package that manages um secret keys and all of the oops oh wrappers so this is the package that uh manages all of the keys and also creates JWT API tokens based on your organization config for uh secret vault so I have all of that and I'm just going to open up cursor since this is a gentic uh I'm going to use a agent powered um code editor for my project and I'll just open the terminal at the bottom so that um I can do everything within uh firster okay so we've set up the project the next thing I need to do is create a file that will hold my organization config so now I have this org config file within the quick start I have a demo organization config that I'll copy into or config and now let's quickly talk about the or config so any um if if you are creating an entity to use secret fault you'll create an organization um I'm just using the demo organization from the quick start but you can actually register your own organization and I recommend that you do this for your projects uh here in the portal so you you would just use this registration portal you could get start a new organization you'd enter whatever you want the name to be and select nodes these are the three demo nodes that will be selected for you and these are actually the nodes that my organization is using as well so I'm skipping that step because I already have my organization credentials uh but along with the organization credentials I have the node config the node config contains the URLs and the decentralized identifiers for each of the nodes and the nodes are what I will be uploading my data to each of these nodes will get a different piece of that data which is why it's important to have the node information inside of the node config um along with the organization so the organization secret key is actually what is generating API tokens for each of these nodes so that um inside of secret vault you know that the organization is the correct person or the correct entity that's writing to the secret vault um data store Okay so we've got our or credentials the next thing we need to do is actually create a collection schema so I'll create a file for that schema. Json this is empty for now but I'm going to copy the web 3 experience schema into the schema Json and now we can take a look so all of the schemas for secret vault follow the draft 7 Json schema uh schema and within that you can add a title for your schema and then you start to define the shape of the data that you'll be uploading into secret vault if you've ever used something like mongod DB it's very similar to that where you set all of the properties that you expect um to be uploading so the first thing I'm expecting is an ID this will always be set for every record and then I will be uploading a person's name the number of years they've been in web 3 and then a collection of responses to questions so each question will have a question number so like question number one question number two and the answer to the question will be a rating between one and five so for my survey that I'm building I want people to be able to um rate their experience their user experience with different things so I'm asking them to rate their experience with solidity uh with the ux wallets things like that so that I can get a general understanding of how um the ux is improving in web 3 this year okay so previously we were talking about how um secret vault is really cool because you can have secret data inside of the Vault and the way that you mark data inside of the schema to be secret is with share so if something is a share it's not the actual name we're uploading the share of the name so that is that string if I go back to my presentation oops so if this is the original record uh the share is the piece of the encrypted data that's going into the node and so anything that's going to be encrypted we're marking um with the share and the type of a share is a string so you can see that both name and years in web 3 are shares while uh the array of responses the properties are just in plain text so they're in integers strings dates whatever is going into that response array doesn't need to be encrypted so there's no shares there okay so that's our schema and in order to start uploading data to the collection we actually have to first upload the schema to all three nodes so in order to do that I'm going to create a minic script that will take this schema and actually upload it so I've created a file and with within this file I'll just paste in the script and I'll explain what it's doing okay so this is the script for posting a schema to all of the different nodes at the top you can see I'm importing the secret vault wrappers um that's just the collection that helps do all of the API calls I'm also importing org config the org config is what we previously created that has the keys um and the identities of all of the nodes so that we know where to upload the schema to so now that I have all of that I can run this to create a wrapper and initialize an organization the org has been initialized with those nodes and also the credentials and in order to actually create a schema I have to give the wrapper the schema file which is the schema. Json and the collection name which in this case is web 3 experience survey this can be anything you want it's just so that if you're looking at all your schemas you can easily understand oh that's my experience survey so after that you can create the schema and it should upload to all three nodes but let's actually test this out so I'm just going to run node host schema which is this file awesome so this was successful and it created a new collection schema for all three nodes so this node this node and this node and you'll also see that the ID of the schema is the same for all three nodes and that's really important because you want to be able to write to the same schema and not have to worry about like oh did I use a different ID for one node from the other node it should all be very consistent so that the only difference between nodes is the encrypted Share value um and that's because those need to be different so that when you recombine them you get the True Value all right so now we have schemas across all of the different nodes the next thing we're going to do is create a script to actually interact with the secret vault data so that's writing data to our schema collection and then reading data from the schema collection so let's create one more script which is index.js and inside of this script I'll copy in some things so the first thing is importing dependencies we actually don't need The UU ID package so I'm going to leave that out oh the AI is trying to autocomplete for me I don't want this um okay so we're gonna import the wrappers package the same one we did before and also the or config the next thing we need to do is um create a a const for the schema ID and we can read this straight from the console log of the other script this is going to be hardcoded to the schema we just uploaded to um secret vault after that we'll create a data payload and this will just be oops this this will just be uh some data that we want to post to the schema so remember that each of the encrypted fields are marked with a lot ahead of time to show that these will be encrypted and then once they're uploaded to secret fault they'll have transformed into shares so instead of vitalic um let's say satosi Satoshi Nakamoto he's probably been in web 3 longer than anyone maybe 16 years and I'll just leave his responses to uh the survey Asis so now we have a data payload and we just have to add the main function let's run through this main F function quickly so inside of the main function the first thing we're doing is initializing a collection using the org config nodes and credentials and also the schema ID that we hardcoded above here so now we've initialized a collection um for this schema when we have the collection ready we can start writing data to the nodes so this collection function write to nodes is coming from that rappers package and it's just going to write that data to all three nodes in the collection and then it will log out the new IDs I'm just going to comment this second part out for now because um after after we write the data we can read the data but I just want us to focus on writing the data to this collection first uh and then we'll read the data okay so we have the function and we can run node index.js this writes data to all three of those nodes so you can see on node one it's created this ID on node two it's created the same ID and on node 3 it's created the same ID so you can see that it's uploaded this ID to all three of those nodes so the data is successfully in all three nodes in the collection now let's try reading the data so I'll comment this out and we'll just read the data from The Collection I'm going to remove this SCE because we didn't actually upload any any data right now um so this is just saying okay take the collection read from all three nodes and the reason that this bracket is empty is because we're not actually passing in a filter if you wanted to you could filter um for different things in plain text like maybe you would want to filter for a specific rating to a response you could do that um by passing in a valid filter here but I'm just going to read the the records that are currently inside of the secret vault okay so we see one record this is that most recent record that's just Satoshi Nakamoto um let's add one more record and then we'll write and read so maybe this can be Jacob from eth Global famous I have a feeling he's been in web 3 for like I'm going to say 10 years we'll have to ask him afterwards and we'll say that he gives both questions of five because he finds the ux awesome so going back down I'm going to comment all of this code back in so that it will read or excuse me it'll write Jacob's record to our data collection and then it'll read all of the decrypted collection data so we should see both satoshi's and Jacob's record uh inside of the logs so coming up here uh the first thing that happened is this wrote to the secret vault so it created one new record 39f blah blah blah and then when it needs to read it reads both records that are inside of the secret vault so the first record down here is Satoshi which was previously uploaded and then we can also see Jacob which was just uploaded so you can see that with secret vault we were able to encrypt and write data and then read all of the data back because we have that organization secret key that's needed to read and write from secret vault and also create new schemas so that's a little bit on secret vault I think we just speedran all of the quick start in I want to say less than 10 minutes so I think this should give you enough uh to use secret vault in pretty much any flow that you're doing for your AI agents uh if you wanted to do this from scratch yourself you would just go register a new organization so you would get um your own secret keys for your organization and then you could start creating collection schemas based on whatever data you want your agent to read and write um inside of secret vault so that could be user data Maybe it's um shared State between agents so that they know parts of what each other are doing um maybe it's memory so that if you're creating context for an agent they have tons of different uh things to draw from anything like that would be an awesome application for using million secret vault and oh one more thing to mention is that um if you come and visit us in Discord we have office hours every single day twice a day so one of the office hours is at uh I believe it's 10: am European Time and the other office hour is at 10:00 a.m. PST so whatever your time zone is you should probably have at least one office hour every weekday that will work for you and we would love to hear what you're building and also help if you have any questions um we're really excited to see what you all build [Music]"
    },
    {
        "title": "Coinbase 🛠 AgentKit: Giving Every AI Agent a Crypto Wallet - Agentic Ethereum 2025",
        "video_id": "Gb9dQwTZIIw",
        "transcript": "please just make sure you have your cameras and your mics off for the first part of the workshop as we get started here all right we have a full house today um welcome to a coinbase workshop where you guys are going to use agent kit to give every AI agent a crypto wallet and we are here today with Lincoln Merr thank you so much for joining us Lincoln and have a fantastic Workshop thank you thank you very much for having me uh hey everyone very happy to be here hope all of your hacking has been going well so far my name is Lincoln I am the product lead for coin based platforms agent kit I'll be going over briefly a little bit about what agent kit is uh I suspect a lot of you all are potentially already familiar with it so I'll kind of gloss over those points really what I want to talk about is some of the areas and directions on where we see agents going um some of the ideas sort of wishlist items that I'd love to see come out of this hackathon and also talk a little bit about our new upgrade so we had a .1 release come out on Saturday morning so our code changed a little bit and I just want to run through it show you all a little bit about how it works some of the new features we have and generally what you can do with it that you previously weren't able to do so all that being said I'll go ahead and share my screen we can start running through this quick little slide that I have here um yeah basically I'll be going over how you can go from nothing to a fully onchain based agent so as a as a refresher coinbase developer platform is our tools and and set of components to make it as easy as possible to start building onchain apps whether or not you have coding experience whether or not you're familiar or onchain native we want to make sure that you have everything that you need to build amazing experiences that can help bring people onchain we have lots of different components that help you do this uh not only programmatic wallets both for agents and for humans but also the ability to do an on-ramp using Apple pay and and guest checkout with no signup required we have a pay master so that you can sponsor transactions on your users behalf and we have onchain Kit which allows you to have react components that you do things like sign in to a website with a wallet and all sorts of other fun stuff here's a full picture of the stack all of these tools are built so that they can work on base but we also support various other networks and are also always looking to support new ones so onchain AI agents is something that has absolutely blown up in the past couple of months uh we first got into the game back in October and it has been incredible to see the growth and excitement around them since then I thought it would do pretty well to be honest like Ai and crypto are two of the craziest buzzword when you put them together it just things go wild but I never thought it would be as crazy as it is and it's so amazing to see that now we have uh initiatives and programs that are incentivizing Builders to come and work in this space it's something that's absolutely needed to help progress the field we really believe that it's that every AI agent deserves a wallet and ultimately will have a wallet the reason being is that if you give them a bank account there's all sorts of weird stuff around like how exactly would this work um are you able to give them a bank account when they aren't even really a human so we think that internet native money is much better for uh this type of use case we also think that the ability to have onchain interactions and do things like send money to anyone anywhere in the world for completely free and while also earning yield through Defi and all these other fun activities that you can do they get a very compelling use case the crypto agent landscape is already massive and there's so many different things that are going on with it so to help you understand exactly where agent kit fits in I think it's most helpful to think of it as in between this sort of like framework infrastructure layer so the idea is we can give every AI agent a crypto wallet but we're not explicitly a crypto framework ourself more so we're able to plug into any existing framework so that could be Eliza that could be game by virtuals that could be Lang chain it doesn't matter it's always a seamless plug andplay experience and that's exactly what we're going for so agent kit is this uh tool to give these agents crypto wallets as I just said it's model tics you can use whatever model you want deep seek open AI Claud Venice hyperbolic Gaia all of them are completely possible to use and it takes the existing tools within the coinbase developer platform and wraps them up in a nice little way that an AG can use so we think this is really important for a few reasons the primary use case that I've been seeing so far is that it unlocks a completely new interaction group and what I mean by this is that right now it's it's quite difficult to use something like a D5 front end for example you have to first understand what an app like a or Unis swap does you have to navigate to their app sorry I'm coming over a little bit of a sickness you have to figure out exactly how to use it how to sign in with your wallet go through all of these complex steps and only then are you able to approve a transaction and actually do something with agents the the Paradigm is completely reversed where instead I can just talk to an agent in natural language and say something like I want to swap or I want to earn yield and the agent handles all of the complexities around finding the right protocol and doing the interaction for you I think this is truly how we get to a billion users is by prioritizing a the most user of shacked experience possible for protocols it also offers them an entirely new user group to go after and I think it'll be the way that all sorts of directions in terms of user experience start to Trend lots of praise for agit over the last couple weeks and months um and as I said this is kind of where Agent Kid fits within this this this directional landscape type thing so there are two main use cases that we also see agents starting to Trend towards the first is this idea of a human assistant where you basically talk to it it does some action for you and you have this human the loop at all times this has been the most common use case thus far but I also think there's a ton of potential in the fully autonomous agent space where agents are able to interact without uh true human intervention the example I love to use here is that 10 or so years down the line we might have self-driving cars that fully own themselves and you think how could they possibly do that well imagine they have a decentralized Ai and some decentralized agent infrastructure and a crypto wallet they can run a taxi service using that crypto wallet to help pay for operational costs and this will allow them to be fully autonomous and just live and exist within the world there'll be a revenue generating entity that can also pay for its own maintenance at that point what else do you really need there's a few really cool examples that I want to use to sort of inspire you about what's possible the first is the ability to do all sorts of interesting things around agentic Commerce so this is one of the first things I'd love to see out of this hackathon is more focus on uh AI agents who can do things with money and and commerce and those types of rails so bite is a really good example of an AI agent that's able to deliver food for you so you can go on their website you can just type or voice and say hey I'd like to order a Big Mac to my door and it will go ahead and order that completely for you no checkout flow required one thing that I'll see and I'll get specific here to help you out is using visanet um particularly how you do this is there's Cipher uh debit cards the one that I'm most familiar with is the offering from moonwell and this allows you to top up a debit card with stable coins and then use that to pay for things so combining that with the zinc API basically allows you to order things on Amazon with your agent and your agent will have stable coins and it'll have a crypto wallet where it could earn yield or send money to anyone peer-to-peer completely free but as soon as it wants to make a transaction you pay that 2% fee and maybe a little bit more for the API but as a result you're able to tell your agent to do something like order me toilet paper or something along those lines which I think is really interesting another one that I thought was a really fascinating use case is from hyperbolic and this is around agents that have decentralized compute what I really want to get to here is the idea that you should feel free to experiment and build with agent kit and do really interesting things it doesn't have to be useful yet it just has to be really cool and put push the boundaries of what's possible the whole reason this agent space got started was because of Truth terminal which was that AI agent that just posted on Twitter and it really was wasn't even an agent and it also didn't really have crypto abilities all of the tools to build agent kit and all these AI agents have been around for over a year and the fact of the matter is all it took was one cool project to actually incentivize people to start looking at this space lastly we have ai robot dogs with wallets so unless you have an ual robot dog line around I think this one's a little bit less feasible for you but I still want to show you that you can really push the boundary and make some absolutely fantastic Innovative things uh yeah I mean what would you do with the robot dog with the wallet like give it usdc and it dances or something like that the the fact of the matter is it doesn't truly matter um much more importantly we're just going to see really cool stuff uh you know as polished as you can make it over the over the period of around 10 days or whatever it is um but yeah so to launch your own AI agent uh I'll talk a little bit about the new code um but I also want to give a little sneak peek about what's coming to agent kit next we're always going to be supporting more actions we highly highly encourage you as part of this hackathon to make PRS for any specific new actions that you create or if you add in any new agent Frameworks or even wallet providers we want all of those things we also want to make it possible to have fully decentralized agents um support all the different infrastructure that you could need need to build out an agent that could eventually run a car we also want to highlight uh AI assisted Builder tools and developer tools like replit um and various different lolms we have we have prompts that are sometimes available to make it as easy as possible for literally anyone to start building agents and here are some of our previous ideas for for Builders um a lot of these are things that I've sort of already touched on in various different ways uh these ideas are a little bit more specific um but just go to show that there's lots of different opportunities within the agent space so looking ahead a little bit excuse me I think there's a few different ways in which agents start to evolve the first is that they'll continue to be uh growing in popularity on chain I think they'll eventually be the primary actors on chain and will far far succeed in getting a billion agents on chain before a billion US as you saw at that robot dog example I think AI will start to get physical as well with things like Tesla's Optimus and all sorts of other robotics starting to come to life I also think we'll see the trend of Agents starting to progressively decentralized one of the biggest critiques right now is that all of them are just like in an AWS server using open Ai and that either one of those Services could shut them down at any given point I think we'll see a very similar Trend to what we saw with l2s where at first they were just very very centralized and they progressively decentralized as they need to to become more useful lastly I think we'll see more multi-agent swarms the reason for this is that an agent can't do literally every task you want it to so there's lots of opportunity for an orchestration agent that calls another execution agent um to accomplish all sorts of different tasks so yeah that's a little bit about the coinbase developer platform if you haven't joined our Discord I would highly recommend you do so we've been diligently following the eth global uh CD Channel but we do have more Engineers within our own Discord channel so if there's an urgent question or you're tired of waiting for me to get you a response go into this uh CDP Discord Channel and check out the agent kit there we'll have all of our Engineers ready to help you all sorts of good stuff and resources and and a community there we also have our documentation but I would actually recommend if you're using the new update to primarily look at our GitHub which I will share in just a moment before I do that are there any questions I can cover very quickly about questions or uh anything that I can do and yeah to to your point in the comment uh yeah next time I will definitely get an AI agent to help me out this presentation but yeah before we move into the specifics any questions generally about agent kits goals where we're going um more broader term stuff and I'll leave a little bit of time at the end for more technical questions or generally things around uh around the the code or implementation itself uh yeah I have a question uh my name is Alex uh so the question is about uh custom action for llm yeah I review the code on the high level yeah and the action which is in agent kit this is not an AC action to llm As I understood but it's like a just a function yeah um and as I understood the idea is just to uh delegate this to length chain yeah so we program all this stuff only in L length chain yeah I I see that's a good question so and it very seamlessly Segways into our next discussion which is how exactly the agent Kate repo works so for a very brief answer I'll say that the the architecture is broken up into two Parts there is the agent kit which is the set of tools that you can give to every AI agent and then there's the framework specific implementations so this is sort of more getting to the point of how how do I get this to interact with linkchain why is this interacting with linkchain specifically so I'll I'll sort of run through a little bit more about how this works now so and like I said I'll be focusing on typescript because this is where our major update recently was so like within typescript we have agent kit which is where all of these tools provide and reside and the ability to add in new tools and all this functionality here and then we also have the laying chain extension so this is kind of the primary AI agent framework that we've been leaning on um we have a guide here on how to get started using agent kit laying chain and basically laying chain extracts the process of finding an llm and setting up all of these tools that an agent can use they actions um such that you're able to give the crypto functionality to an AI agent and let them do whatever they want within the agent kit part itself though if you dig in a little bit deeper we also have an examples page where we have three versions of chat Bots all built with linkchain this CDP one comes by default with all sorts of different CDP tools we can take a look at this now um and I'll generally run you through exactly how it works this is just a lot of like validating the environment stuff where it really gets interesting inside here where we're actually creating this agent and initializing agent kit so the first thing we do is we initialize an llm inside of our documentation we do have more information on like the various different ways that you can Implement one so if you're using Claude or Gaia or any one of these other models you can also use that very easily next here we configure the CDP wall provider so to create agent kit you need two things one you need a wallet provider which could be CDP by default but you can also use privy lit protocol which I know is another sponsor um turn key all sorts of different options or you can just plug in a private key and use V which is like the local library the second thing you need is a uh is an action a set of action providers basically what the action providers allow you to do is decide exactly what actions you want your agent to take so for example here we have the we action provider for wrapping we um pith for getting price feeds the wallet action provider which is the default giving you the ability to send uh check your balance sign messages all sorts of fun stuff like that and then we also have something like the CDP API action provider which is how we plan to give AI agents all the different tools within CDP some of these tools require API keys and if they do you can easily plug them in here if they don't then you don't need to so it's pretty pretty straightforward and then we have specific calls to take basically take the version of agent kit that you have and put into a new format and then the rest of this is just pretty templatized uh llm code for Lang chain so I'll also run very briefly over what it looks like to add a new action and like I said there is some pretty fantastic documentation within the repo itself here this covers all sorts of things like creating agent kit with specified wallet and action providers using AG uh framework extensions you can even create new action providers and like I said we'd highly encourage you to do a uh an open source contribution on this um we also have Wall providers once again if there's a wall that you'd like to use we would absolutely love to see a contribution as well and this guy goes into all the details here if you're wanting to add an action or see what actions are available you come to this action providers folder and here's how they're all categorized so you can dig in and look at specific actions for example here in the erc20 going to index allows you to not see it where you really want to go is erc20 provider here and this will give you all the different things that you can get as a result of adding in this Ashen package last thing I'll call out and then I'll want to leave some time for questions um and get you guys back to back to hacking is that we are also have this wall provider step and this is where you can specifically see the various different wall providers uh right now we pretty much support two CDP wall provider and the vhm wall provider the difference is that they're both for the evm chain uh however CDP is specific to the coinbase wallet API whereas V is a local wallet where you basically instantiate it with just like a private key and it works no API Keys required one recommendation I would have is we just finished up a weekend tathan as well actually so we have a lot of open PRS that we haven't had a chance to dig into just yet um so we have things like Alchemy prices in here compound um privy server wallet providers Cloud mCP support all sorts of pretty cool stuff here um moonwell capabilities AIS SDK all these things that we're working on integrating but you can click on any of these and if you want to front run us on this you can basically come in here look at these files that are changed and just pull what you need and now you can integrate with the versell ADI SDK crew AI moonwell compound all these different uh functionalities very very very easily so with that I will turn it over to you all for any sort of technical questions that you might have um I see there's some in the comments so I'm going to start with addressing those first but feel free to come off mute or ask a comment do whatever you need to um let's see here using Agate with python yeah so you are absolutely more than welcome to use Agate with python our documentation is going to help you the most there at docs. cp. coinbase.com um the reason I'm not talking about that specifically is because it's the previous version but it will still work great at the end of this week we do plan to upgrade it to our new version and that does have breaking changes generally the process of moving your agent over will be fairly seamless so I wouldn't worry about it's getting started uh but I would call out that it is a version behind right now is the agent chain agnostic so when you set up the agent you create it in such a way that it is uh a assigned to a certain chain however one of the things that I love to see done is you add in the ability to add in other um other chains and it's very straightforward to do basically the way you do it is you take that V wallet provider the vi one and you can Define whatever chain you want so any evm chain will work as long as you have like an RPC that you can go to so you could create an action to add another wallet to this address that basically has another uh another chain ID on it or something like that so then you can create this multi chain wallet you can add in bridging do all sorts of really cool stuff that would be an awesome project um agents browser use capabilities so we do have support for Claude mCP um this is probably the closest thing you'll get to browser use this is open as a PR right now so if you pull that code you can start to interact with it a little bit more two ways to create an agent create react agent and create agent executor the difference between these two yeah good question so this is laying chain specific my understanding is that create react agent is the one you're primarily going to want to use um this is the one that allows you to interact in a terminal or another nice interface create agent executor I'm less uh familiar with but the linkchain documentation should have more information for you uh for none of that aware of any agent examples swarms or pipelines workflows of Agents yeah great question um the primary agent flow that I'm familiar with that is not even technically CDP is uh is is the hive it's a pretty good Salon project that shows a really nice architecture um all of the stuff that they built over there is like fairly seamlessly portable into agent kit in some like form or fashion so i' would highly recommend looking at that generally I think the way that it would work is you have specific agents and you have to create some sort of communication layer between two agents such that they can talk to one another the way we've seen that most done is with specific API calls to various different agents sort of setting up a server where they can accept calls from external sources can you use it with Eliza yes you can so we do have an Eliza plugin it's installed by default we have some Community guides on our documentation around that we have a very good demo from the external contributor who built that out uh who has like a 4 Hour video showing you how just to get started um so it's it's not that complex it doesn't require four hours I promise but there is a lot of thorough documentation on how you can go about doing that um um I saw something about llm providers you can use whatever llm you want um so that makes it pretty straightforward all this is in our documentation any possible llm that you could want is available um all these automated note takers are like throwing my screen everywhere plugin tool call into the subgraph we don't have that as a feature uh would be awesome to get that as an open source contribution to the repo we would love to see that can you create action that use other predefined actions yeah totally anything that you can write as a python or typescript function you can create as a tool or you can combine tools together to make some pretty interesting things um yeah a b rock that's possible uh Li protocol each wall represents the user is attached to yeah you can use lit protocol it's fairly straightforward um this is something that you could pretty easily integrate we don't have it explicitly integrated I know the LI protocol team is working on this um so if you tell them in their eth Global chat like we want uh CDP Agent Kid integration maybe it'll incentivize them to work a little bit faster um H yeah sorry these not takers are annoying if you're working with Eliza how can that be packed into the CDP agent kit I'll show you that super super briefly in like the minute or two we have remaining um I'll share my screen again yeah so within Eliza If you go down to uh packages you're going to see package or Plugin agent kit so this is the plugin that allows you to interact with your agent um one call out here is that it is for our previous version so not for 0.1.0 so if you're using this you should use like the the npm version of like o do o.6 or something like that we're very quickly working on a change as soon as it's available we will uh we will upgrade it and update you it's a very straightforward change so hopefully that'll be helpful to you and that'll likely be done here within the next couple of days and how exactly do you use it well you will create an example. EnV file and in that there's a place where you can put your coinbase API keys and if you input them there uh then you should be able to start interacting with your agent if that isn't helpful enough um there is a guide within that read me uh wherever it is wherever this package is there is the got on how to get started here which hopefully is helpful there's also the video that I mentioned in our docs [Music] um did you use nft agents using nfts um you could use a you could create agents deploy nfts we have that as a feature they still need a wallet because uh generally like you need something for them to send obviously or send it from um okay let's see another question I know we're tied on time so eth Global team if we need to hop off let me know if not I'll just keep answering answering questions is creating a tool with python documented it is um yeah that that's totally possible we have all that information inside of our docs uh uh within the examples is only the management of agent kit would you recommend to integrate it with the onchain kit or not necessarily good question um you can integrate with onch kit I think it's awesome to bring in two components um the agent kit is more like backin facing whereas the onchain kit is more user facing so I think they're pretty seamless you could put them together where you have the agent kit that users can interact with and they use onchain kit to do stuff like fund their Wallet create a smart wallet sign in all of that stuff is there a client WhatsApp uh there is not there's a telegram one we have an example of that in our documentation if you can't find it ping me um but I would love to see a whatsap integration as well CDP agent wallet connected to a CDP IPI API key yes by default it is um so if you want to use the default wallet you enter your keys if you want to use that V one that we talked about then you don't have to um you can just enter a private key and that will work the python version does not allow you to change the wall providers that's what we're work on getting out this week it's currently behind the uh the the typescript version by a single version it's a big version so we're trying to get that out by the end of the week if you start building on the python version right now it should be fairly easy to Port over to the new version so I wouldn't let that stop you okay cool I think that's all the questions if I missed any I'm sorry I blame otter AI um but I will be in the documentation or in the Discord so if you have any questions please don't hesitate to find me there and I will continue to answer questions get you int introduced to all the engineers that you need to we take things from there thanks amazing Lincoln mrr with coinbase thank you so much what a great presentation on figuring out how to use the coinbase agent kit to give your guys' AI agents wallets um so if you guys need any more questions please find him in the Discord um and we'll have this video up for you guys on the eth global YouTube for the remainder of the hackathon thank you Lincoln so much for sharing and and eth Global I think we are good to"
    },
    {
        "title": "Emile Baizel I Building GenAI applications with Amazon Bedrock I Agentic Ethereum 2025",
        "video_id": "F97iHvL3bfw",
        "transcript": "my name is Emil basil I'm a blockchain Solutions architect at AWS I've been here for over five years at this point uh prior to here I was uh doing solidity development over at consensus and then have been um mostly working as a blockchain architect uh since joining AWS and thank you eth Global for this opportunity to uh participate in this in this hackathon um at AWS we've been doing a lot of work over the last couple of years um in uh in in generative Ai and um more recently in uh agentic workflows and so everything that that that we're going to be talking about here and everything that this hackathon is about um is really close to what we are doing at AWS and we're always excited to see what what developers build with the tools and the products and services which we which we develop So today we're going to be talking about Amazon bedrock and Bedrock agents uh but to start off I want to give a highle overview of how we view generative Ai and how we're incorporating it across our stack so here we have a sort of three- layer stack of uh different different levels of uh integration with generative AI so at the top you have user phasing applications uh you have Amazon Q developer for example this is a coding assistant it plugs into VSS code other idees um which you may be using uh in the middle we have Amazon Bedrock which is what we're going to be talking about today and then at the bottom is for machine learning engineer so if you're writing if you're building a model from from the ground up you would use Amazon Sage maker uh a lot a broad choice of um different Hardware uh which you want to run that on but that's for a different day today we're going to be talking about that that middle piece with Amazon bedrock so Amazon Bedrock is a fully managed service that offers a choice of foundation models from leading AI companies such as AI 21 Amazon anthropic meta and many other ones uh with a broad set of capabilities to build many different types of generative AI applications and a big focus on really simplifying development uh while maintaining privacy and security so Amazon Bedrock is fully managed it's serverless so you don't have to worry about any of the infrastructure you access it via apis you access it via sdks um so uh very easy to get started and and build with there and with Amazon Bedrock you can easily experiment with a variety of these models and you can customize them privately with your data or using external data uh either via fine-tuning or uh retrieval augmented generation or rag uh and you can create managed agents for creating um executing complex business tasks such as booking travel or processing insurance claims or other things like that and all of that can be done without writing any code um I assume this being a hackathon people will want to get get into the code but just to give you an idea of um of the building blocks which you are providing uh you could go into the AWS console click a few things enter a few things and have an agent that is running that can uh crawl a website and answer questions about it and things like that cool get this uh get my PowerPoint set up there we go okay next slide so we speak to a lot of customers at AWS and what we hear a lot is that what the most important feature to them of bedrock is how easy it is to experiment with different Foundation models and having a range of models to experiment with uh customers are moving fast in this space and generative AI itself is evolving very very quickly and there's new options and Innovations happening almost daily and just last week we saw uh uh the market turned on its head with uh deep seek R1 and um and we moved very quickly and now deep seek is available within bedrock I'll get to that um towards the end uh so the space is moving very quickly everyone knows this and uh Bedrock is really a great way to easily test out different models and uh and experiment without having to um do a lot of heavy lifting to to change that again everything's via apis and so you uh so if you're changing a model for example you're basically just changing the label of the model which you want to um invoke cool I do want to touch on two uh two families of models the first is anthropic claw models uh these have been out for over a year now I think they're almost a year I should say um and these are familiar to many people uh Cloud 3.5 Sonet uh really raises the bar in like industry intelligence and in benchmarks for graduate level reasoning and you got claw 3 Opus which is the most ENT model and uh three Sonet and three Haiku with three Haiku being the fastest and most cost effective and that's really good for sort of high volume use cases so it's really dependent on the type of application which you are looking to build again testing with any of these is U is is very straightforward to switch between them and uh prior to reinvent uh which for those of you who don't know it's our uh annual conference that takes takes place right after Thanksgiving uh we had the Amazon Titan model uh family of large language models and at reinvent we announced the Amazon Nova Foundation models and these are new generative generation these uh state-of-the-art Foundation models uh that deliver Frontier intelligence and industry-leading price performance and so Nova includes uh a couple types of models so there are understanding models which are these ones on the left and these accept text and image and video as input and they generate text as output and on the right side you have creative content generation models so these accept text and image input and they generate image or video output and Nova models are available only on Amazon bedrock and the five that are available today are Nova micro which is a text only model that delivers the lowest latency responses at very low cost uh you have Nova light that's a lower cost multimodal model that is also very fast and is great for lightweight tasks and then you have Nova Pro that's a highly capable multimodal model uh with a good combination of accuracy speed and cost and on the right side you've got our creative content um FMS Foundation models so canvas is an image generator using natural language prompts and then Nova real is a video generator uh which takes prompts and creates realistic videos from that and in the middle is Premiere which is not launched yet but it's uh it will be our most capable multimodal uh model um Foundation model and that's for complex reasoning and also to be used as a best teacher for distilling custom models so if you're trying to U distill down to a smaller model you can use this one as the starting point from that and Premiere is coming soon and as I mentioned earlier uh deep seek this slide was added uh uh on Friday or over the weekend because that that announcement just just came out but as you can see on the right there that's the AWS console and now deep seek is one of the generation models uh one of the foundation models which you can use within Bedrock cool so we just touched on inference and selecting different llms for your inference now I want to switch gears and talk about agents so Amazon Bedrock agents are foundational building blocks for customers and developers to create their own agentic applications so as we just saw you can choose from a variety of foundation models to drive the intelligence of the agent and you can configure the agent with many different features such as memory retention knowledge bases for uh retrieval augmented generation uh guard rails for um protecting the user and um and other features as well and developers provide these agents with additional tools and functionality so that the agents can actually go and uh achieve their tasks and um if you've ever worked with AWS Lambda functions that's essentially what a tool is here is you equip the agent with this capability and you tell it when to invoke this uh this tool for example if you want to create a calculator you just tell the agent use this this this thing here and it's a Lambda function that basically just does simple math or something like that and an important thing to understand here too is um with agents for Bedrock you get visibility into the Chain of Thought of the agent so when you're debugging and you're trying to figure out why why your agent isn't doing what you think it should be doing you can see step by step with all the traces of everything that that it's thinking through and why it reached a certain decision which which helps immensely when you're when you're building and and and debugging and uh recently we announced uh Bedrock agents support hierarchical multi-agent collaboration so you have what's known as a supervisor agent and this agent can have its own intelligence and its own uh tools but it can also be aware of other agents that can uh invoke that that can be invoked for specific tasks and you can now have orchestration from this sort of supervisor higher level agent um and these agents can all be used across different uh orchestration as well so you can have one uh sort of sub agent that's being used by many different uh supervisor agents and agents uh plan and execute these tasks using uh data which you've provided either from your own from your own private data set or from public data it can really be driven uh from many different ways and as I mentioned earlier you can you can start creating agents just from the AWS console so if you are interested in um just seeing what that looks like and setting up a Lambda function um you click you click through there and then you get a Lambda function that's a basically Hollow World dummy function and then you can easily extend it to uh to um do the actual work which you need it uh to do cool so the way agents work is they essentially break down and orchestrate the task so when when a user gives it a question or a task the agent thinks through everything which it needs to do and then it figures out and creates a plan for how it's going to accomplish that task and to help it accomplish this task you can allow it to securely access and retrieve data from from your companies or projects uh data sources or anywhere else and this would be part of um retrieval augmented generation to to to help your agent um sort of become more specific to your application um and it can take actions on your behalf so it can invoke API calls on on your behalf and that's where we get into the uh action groups and the the the tooling which you equip your your agent with and then we've got the Chain of Thought trace and ability um and the ability to modify the agent prompts as it's going through that Trace um so we have a default orchestration um uh template for for agents but with with a lot of these Services we have a sort of uh best best default but a lot of a lot of uh a lot of what I'm covering here you you can customize it to to Really um tailor it for the application which you're building so if you're interested in trying out bedrock and multi-agent collaboration um here's the first of a few QR codes which I'm going to uh share this is for the multi-agent U which we which we just released recently um and some examples which you can see are uh planning a trip where you have different agents that specialize in different aspects of planning a trip uh building a marketing uh strategy and other things like that and these are all available on on GitHub cool and the last thing I want to show is uh as of this weekend we got our PR merged into uh Eliza OS and so now your Eliza OS agent can use Amazon Bedrock for its intelligence and I wrote this PR so if you try it and it doesn't work you know exactly who to shake your fist at um but please let me know and I would be happy to um help you debug any issues or answer any questions which you have around this all right so mov moving on from Agents and I want to talk about retrieval augmented generation so as as many of you probably know what an llm when it's created is uh Frozen in time at that time where it was created so it doesn't know anything that that happened afterwards right and so that's where retrieval augmented generation really helps because you can supply data to the agent or to the uh during inference um for the agent uh to to to provide context around uh something that the agent may not may not know about either because it happened after or um it's private data so it was never available for it to be uh indexed and that's where uh Bedrock knowledge bases come in so rag really uh allows the agent to get data from your company data sources and then it enriches the prompt with that data to deliver more relevant and accurate responses and knowledge bases is a fully managed rag capability that allows you to customize your foundation model responses with that contextual and relevant data and uh where knowledge bases really help developers is it it automates the entire end to-end rag workflow so this includes uh data ingestion data retrieval and augmenting the prompt and so this eliminates the need for writing custom code to integrate these data sources to manage the queries and again it's uh something you can set up just from the console where you click a few buttons set set your data source and um and you have it go so for example you can you can have an S3 bucket with you know hundreds or thousands of PDF files and maybe you want to make these available for your agent so that it can have more knowledge about whatever is in those in those PDF files um you set those in S3 you go through the console you select that as your data source and then you set a few other options and then that be now becomes uh available to your agent so your agent can now query that that data and I'll get into how that works in a second cool so when you're starting with knowledge bases you start by selecting what um what what Vector store you want to use so our default is Amazon open search serverless uh but knowledge bases natively support uh postgress with PG Vector via Amazon Aurora also supports pine cone and a couple of other ones or if you have an existing database you can link it to one of those so you have a lot of options when it comes to um what what Vector database you want to use uh we already talked about S3 as a data source you can also use a a WebCrawler so if you want to crawl websites and set that on a iteration of uh you know crawling it every five minutes or something else like that it'll pull that out and it'll pull all that data in index it and all of that is managed for you uh you can also connect it with uh Native connectors which uh knowledge bases has and that's typically more for Enterprise data but I just want to mention it here uh things like Salesforce or if you're using Confluence or um SharePoint for example you can connect those automatically and have those be available from uh from your knowledge base so once you've defined what your vector store is once you've defined what your data source is then you need to define the chunking strategy and this is where the data the the data itself so if we go back to that PDF example um that PDF then gets chunked into many different chunks and added to the vector database and there's a bit of trial and error with figuring out the right chunking strategy and chunking is basically how big each how big how many um uh pieces you want to separate the the the document into how much overlap you want to have within the chunks because remember what we're trying to do here really is uh make it so that when a user queries or asks something related to this the knowledge base will be able to retrieve from the vector database something that is relevant and so we have some smart defaults but you can play around with it and see if if if you're getting the results you want and um and you can get even more advanced where not just um setting the chunking size but you can actually go in and override the chunking itself and an example here is if you want to add metadata to each chunk right so that so that that could help with with um more semantic search right so instead of just indexing um the content of the PDF you can actually Supply additional metadata about that about that PDF and so that'll make it much more likely that it gets that it gets pulled in all that to say it's very easy to get this set up but if you want to get in the weeds you can also get in the weeds with a lot of this stuff cool um couple more things we continue to add new features uh to knowledge bases um yeah was there a question no all right there there is a question um from Mii um he asked can I return the logits uh probability for a prompt um I'm going to ask to save questions till the end because I just want to have the presentation be unbroken but I would love to answer that question at the end and I forgot to mention this at the top thank you Vara for um speaking up there uh following this call we're going to have uh some office hours so that'll be a great time to ask uh questions like that or any other questions you have so we continue to add new features to knowledge bases uh recently we introduced Amazon Bedrock data Automation and that really helps you extract transform and generate structured data from multimodal content and so all of that gets automated for you and made available into your knowledge base and we also introduced graph rag which as the name suggests is it makes your data available in a graph database and so what that helps you do is start linking relationships uh for your entities across data sources so instead of just having one one view of of your data here and one view there you can start linking them together uh within a graph database uh the last thing I want to touch on uh not related to generative AI but because it's a ethereum hackathon it's a blockchain hackathon I want to share our public um blockchain data this this is uh free data it's available on um AWS uh public data sets and it's a continuously updated set of data across three different blockchain or seven blockchain networks and uh and and the way to think about this is the data gets um gets gets parsed from the blockchain it gets put into an S3 bucket and then you can access that data from your application and the QR code here is a project that myself and Simon from my team worked on last summer where uh it's essentially a text tosql querying of this data and and so the way that that works is you get your prompt from the user your llm we we um instructed the llm and made it uh aware of the of the of the schema that that is uh that that all the data um abides by and so then the when the user prompt comes in the large language model can say Okay so the user wants to know how many ethereum transactions there were yesterday and it knows which uh which which columns in the database map to that that type of question and it constructs a SQL query and then it goes and queries that so if you're building something where um uh where you want your agent to be aware of historic data um this could be a great way uh for for you to bring that that information in there cool and the last thing I'm going to leave you with is three uh three three QR codes here and these are uh for helping you get started so on the left is our documentation for Amazon Bedrock it's pretty broad I mean as we saw here we've got llm inference we've got knowledge bases we've got agents and so uh but that's a great place to start uh if you like uh YouTube videos we have a lot of YouTube videos there uh that's the one in the middle it's a stepbystep tutorial and if you're looking for open- Source samples of uh examples of what what uh projects have been built with uh Bedrock that's the that's the QR code on the right um it's a pretty broad set of applications um and and demos which have been built there and with that I want to say thank you uh for for for listening and and watching and uh yeah let's turn it over to some questions if we have some"
    },
    {
        "title": "Will Binns I An Overview of Building with AI on Base I Agentic Ethereum 2025",
        "video_id": "6DCKEtTuP10",
        "transcript": "uh as I said I'm will I'm one of the core team members on Bas um if you haven't heard of bass just quick tldr Bas is an L2 on top of ethereum we roll up our transactions onto ethereum we do that so that taking advantage of ethereum security all the scaling work that's been done in addition to that we can do things really inexpensively and fast and so just for example like if you want to send eth on ethereum uh you know it's it's like been times where it's like okay I'm not going to use this to buy a cup of coffee um on base it's like fractions of a cent that transaction fee using uh things like pay masters which I'll I'll chat a little bit about it's even possible to like sponsor transactions for apps that you're building especially a gentic apps where people using that don't even have to pay any transaction fees so um but yeah that's essentially in a nutshell we're in L2 on top of ethereum making ethereum even faster and inexpensive to use to make it as easy as possible to put the world on chain and so um this is b.org highly recommend just bookmarking this page this is going to be a great go-to it's going to lead to like all these other things that um I'm going to be clicking through um good place just here to spend about uh two three minutes just scrolling around just for a quick TLD drr on what we're doing the next thing I wanted to show uh is it's very very very important that if you haven't already done so and you're participating in this agentic ethereum hackathon that you've joined the eth global Discord we have a base channel here we're answering questions you can see I'm in here earlier today also or we're uh dropping all kinds of e on folk so if you need that come in there hit me up say hey W bins like uh however I can help we're here to help you um also great e Global folks are here a lot of the great other uh networks we're all building uh something really awesome together here like on Bas we're not like looking at one chain being better than the other in the future people aren't even going to realize what network they're on they're just going to realize that they're part of something that is open to everyone so get in here please if you haven't already done so specifically for Bas we also have our own Discord uh it's Bass .org Discord um there's probably I think about 425,000 people have joined this Discord at any given point in time there's usually around 25,000 people online this is one of the best places that you can save to come connect with other people that are doing things on base and as a builder this is one of the most important places that you can be to connect with people that are going to potentially use the app that you've built also to look at hey what are people doing and engaging with these other apps that people are building we have all kinds of great opportunities in here to connect with users and also great opportunities to connect with us on the base team for example you need Technical Support I'm in here other people from the devil team are in here if you need uh ecosystem support you've built something like how do you connect this with trying to get Amplified like from the Bas uh X account so I'm got like a million followers like how can we help support you all potentially with grants other things like that this is the place to be so definitely b.org Discord U the next place I wanted to highlight if you're somebody that has never used forecaster before I highly highly recommend that you create an account you can go to warp cast.com here I'm looking at the base channel foraster is kind kind of like a mashup between X and Reddit you have like the uh short feed where you can send short messages like on X and then you also have channels like you see the equivalent being maybe like subreddits on Reddit and so the reason why it's important that you're on here if you're building on chain is because almost all the users on this platform are purely doing things on chain so if you're wanting to connect with an audience that's going to have like a really high conversion rate we're doing something with your app this is the best place to be talking to people building relationships building Community around what you're doing if you go to x you post something out there you go to another platform Facebook or something like that there's always going to be a proportion of people that haven't done anything on chain yet and just by comparison I was just reading an article maybe over the holidays right around the beginning of the year 90% of the world hasn't even held it any crypto yet even though a lot of us here have been in this space for a super long time that's how much work we still have to do that's how much of the world still hasn't connected to what we're doing so foraster is a really great way to get that really early group of users that's going to create that Network effect of other people around them their peers friends family Etc that are going to come on chain oh yeah my friend told me about this I'm going to check out this app so this is a really great distill of folks that can connect with your app give you feedback that are then going to spread out to other people that are going to maybe be coming on chain for the first time using what you've built uh next super important page that I wanted to highlight here it's docs.bmc.com in our developer Journey um this is going to be a great place to use as a compass for just general information that you might need from a techacal perspective um if you are completely new to building on chain that's okay all of us in some type of aspect are new we're a beginner at something and so it's all relative but if you're completely new you've never built anything on chain before it's going to be challenging and this is gentic ethereum hackathon but that's okay like part of a hackathon is is getting in there and feeling like hey I I have no idea what the hell I'm doing that's life we all have that like I don't know what the hell I'm doing moment and all kinds of things and so that said come over here to dostat base. org check out underlearn learn to build on chain this is completely free and so it's going to be really hard in the context of this agentic ethereum haathon but bookmark this come back to this and just start you know like doing some of that like slow ramp up work after the fact you can still I'm going to show you some things here that are going to allow you to get started building some things like you there's plenty of things you can like copy pasta to do things that previously like six to 12 months ago would not have been possible because there's no code there's no reference to be able to ship something out that still has a chance of being competitive in different ways or in the future being modified that's something that's going to start getting traction making some Revenue paying you things that people are actually going to start to use so bookmark this page or if you have friends that are like oh I wish that I could have done that hackathon send them to this page and say well there's going to be others because like as Calvin was saying before we started recording like hey nice to see you again we do these hackathons Bas works with e Global we sponsor these prizes and so um it's just a really good opportunity to to also connect like your peers if they want to be part of the future ones um next if you want to if you're like already like hey yeah I just actually forked Unis swap um like I'm super pro this said my first rodeo uh but you haven't built anything on Bas before um docs. b.org dos that I'm looking at right now is going to be your quick tldr on just different things going to be helpful to you specifically like our tools um bass has really really really great uh tooling around it there's just like all kinds of different thirdparty um platforms tools libraries that support base so this is a great place to probably spend about maybe five to 10 minutes today if you haven't already been here you're already starting to um come together with your idea to uh start to connect the dots like hey I don't want to build my own index or like that might take me about a week uh there's a ton of like indexers that already support base so this is going to like um help you really fill out that stack without um having to do a lot of that like from scratch work so uh and then the last thing if you're like kind of uh in between um you know super uh shadowy supercoder and super new uh to this space our Tut tutorials is kind of like a middle area uh that I would also recommend spending some time in uh this is just going to be like a way if you want to spend like maybe if you have an idea right now but you're just like you don't really have the mental M model for like how these pieces um might fit together this tutorials page is just gonna like you could spend maybe an afternoon today it's you're gonna level up a lot um if you're kind of new to building on chain but you've done a lot of stuff in web to you're going to level up a lot just doing like maybe a few of these different ones about like deploying a smart contract or or like starting to see like how some of these different uh third party tools especially work with an onchain app um I'd highly recommend uh getting in here and so that's doc. b.org now so we've been talking about some different things here uh just in general about base but this is an agentic ethereum hackathon so let's talk about some AI um first off I wanted to take you all over to um the coinbase developer platform and over there you all have a really unfair Advantage uh participating in this agent hackathon because coinbase has a really good toolkit for building with AI on ethereum on base and it's called Agent kit and so uh right here this is docs. cp. coinbase.com Agent kit I would highly recommend bookmarking this page because like I said it's an unfair Advantage everybody has access to this so it's like I'm I'm being somewhat sarcastic because if we've been doing this like trying to figure out how to do this maybe six months ago this stuff just wouldn't exist and it'd be a huge pain in the ass figuring out like I have an idea but I have no idea how I'm going to connect this stack together checkout agent kit and so alongside this just even this past weekend um coinbase had an onchain AI weekend in San Francisco doing a hackathon and so the second unfair Advantage you have here is on this page is a hackathon guide so it says building with agent kit this weekend yes building this week in the agentic ethereum hackathon so 100% please come to this page because it's going to save you like days of work figuring out things so that you can just get to the execution phase of your idea and so um this is like I I get kind of geeky about this page because it just like I love doing these hackathons and and one of the hardest parts like I know like you know being a builder wanted to be part of this is like getting out of that idea phase and there's never any time like at the end like oh I got to do this there's not any time this is going to give you all that extra time um and so it makes me excited because I feel like um as I was saying at the beginning this is like one of the best times to build where I feel like in AIC ethereum hackathon at the end of this we're gonna be like holy look what these people built because um you for youall that have been in hackathons before there's usually like a large uh spectrum of like quality projects I think we're to a point like in onchain app development where it's like some people are going to be like I don't know I see some of the apps coming out of these like how am I going to compete and I think that's great because we really need these super awesome reference apps and that like levels everyone else up it's kind of like that Rising tide lifts all boats effect so uh again here's agent kit check out this hackathon guide and then I I just love this um page because it it just breaks this all out um so if you spent like the rest of today just going through here checking out the API docs for python typescript it's really going to give you everything um you need and then there's also like I showed you the um base Discord coinbase developer platform also has a Discord and they have a channel dedicated to agent kits so if you're like building with this you you have the unfair advantage of having this like as your toolkit to supp the execution of your idea and then you're also going to have a channel dedicated to using this toolkit so um and then I just also would encourage you like as part of this um hackathon like right now you know a lot of y'all are like in hacker mode uh it's also a great opportunity to be thinking about how am I going to take this idea and then go to H go into like founder mode like where like maybe I'm going to win maybe I'm going to get really close uh to getting my idea out but I don't win a prize like in the Bas trck but like I'm going to build a legit project I want to go full-time on my job right now the president's launching tokens his wife's launching tokens like what's happened in the last two months in the United States like it's just to me I I'm almost like this is crazy um since I've been in the space since 2013 I've never seen such a fast change in the space uh where so many people are coming in so it's like also a great opportunity to think about like okay right now I'm in hacker mode but like how do I want to be taking advantage of this and like I want to become a sovereign individual I want to work for myself I want to be able to work from wherever I want I don't want somebody telling me hey you live here this is what your salary is going to be I'm gonna build my own thing it might not be easy but I'm gonna be in complete control over my own life and launch my own project and so like if you can do that I don't think it matters if you win a prize in this hack is F you won the prize like you won the prize of life so I'd be thinking about that um alongside this really quickly like uh we don't have a lot of time we're only doing a half hour uh Workshop here but I wanted to click through uh a couple more things and then save some time uh for questions the next thing I wanted to show you is a good supplement to agent kit is onchain kit and this is onchain kit doxyz essentially like this is going to give you a template for launching like a full stack app that you can then bolt agent kit onto so if you want like a a cool you know web page that people are going to be going and interacting with like onchain kit is going to give you that where literally just you know in minutes all of a sudden you're going to have a fully deployed um app like reference app you can use this template here um that like I just again going back back six to 12 months like this stuff just didn't exist so you see people with like oh I got the GitHub repo together here's what I want to do or here's my figma here's here's like a screencast like how this might work like this is gonna give people um that huge level up to where like you can have something live people can use you use this hackathon to get that idea out there and um you know here middle of February you have an app that like is live on mainnet that's potentially making you money so um here's that onchain app template uh that I clicked on when I went to template uh in the top like you can just clone this and then it's going to give you like an app uh that's you know you can connect your wallet it's going to handle transactions it's going to have a swap component that automatically like people can trade tokens on your app so it's just like again you'd be spending days figuring this out if it didn't already exist um last thing uh really quickly if you go to my X it's x.com wbin I put a link to this um there's like almost 50 different um AI like agentic apps on bass already like give this a scroll through because this is going to give you a really good frame of reference on what like other people are doing and it's going to give you like that intel if you kind of have an idea right now like check out some of these other categories and see like oh okay like this one app that's simp similar to my idea like here oh I see what wow that looks like that's working really good so it's going to like save you um like people that launch first they have like you know the so-called first mover Advantage but there's also an advantage to moving after the first mover because you can see oh they went that way that worked good I think I can do this better and it might work really well so take that approach um and then just in general uh this last thing here is the uh b.org ecosystem page page so if you check out like that list of like almost 50 different agentic apps you can also go in through our b.org ecosystem page and see how you can combine something agentic with like maybe one of these app ideas where um all of a sudden like there's hundreds of apps here so even if you don't have an idea right now you know you want to be part of this hackathon like go check out um the agentic apps on base and then come here to like b.org ecosystem spend an hour just clicking around and you I guarantee you're going to start to get like that's kind of a cool idea and and stick with that like idea that's interesting to you like I wish I could use something like that like that'd be cool if I could add AI to something like a or there's all kinds of different possibilities there so uh anyways yeah that's uh that's it in that show I feel like we could have done like a like a two or threeh hour um workshop on this and I I really would uh um like that so uh anyways but this isn't the end let's keep the conversation going come over to the the bass Channel and the eth global Discord let's keep talking about it like if you have some ideas you want to talk about anything that I covered just in this really high level Workshop um I'm there for you the rest of the base team's there for you and um yeah thanks for thanks for joining today live and then people that are watching the recording thanks for for giving this a look and uh we'll see you"
    },
    {
        "title": "Harish Kotra I Build &amp; Deploy AI Agents using Gaia &amp; Collab Land I Agentic Ethereum 2025",
        "video_id": "J6ftu52nwSs",
        "transcript": "[Music] GM GM everybody I'm Harish I'm a developer advocated guia and today I'm going to show you how all of you together with me can launch AI agents in about let's say 20 minutes and we'll take questions at the end and at any point if you have questions like Au mention drop them in the chat we will have some time to take those during the session as well uh but I'm I'm going to walk you through what Gaia is very quickly we'll also see uh demo as well and then also let's go through the collab land AI agent stter which lets you launch AI agents on telegram Twitter it's a very uh lightweight framework that all of you can use and is also mandatory to use for the Gaia and collab land Bounty for the agentic ethereum hackathon with that let's get started what is Gaia Gaia is a decentralized Computing infrastructure platform that is open source that lets anybody like you and me build scale deploy and also monetize AI agents right with when you launch an AI agent with Gaia called node in the Gaia terminology what you get is a chat interface and along with that you also get an open a compatible API that you can pretty much replace uh in your existing applications or build applications using that API itself right for some of the examples that you can try are on our uh website itself you can go to um let's go to a agent domains and then you can browse a agents these are some examples that you can uh try out and see how it works let's say we go to the chemistry one chemistry is uh an agent that is trained specifically on chemistry data set and uh yeah what you see here is the model that this agent runs and also the system prompt and I'll show you how to customize all of this but this is the interface that you get when you also launch a node after the learning through this Workshop I'm not going to do a presentation PBT let's do everything handson yeah with the time we have and like I said this is the UI that you get you can click Start and start interacting with your own node and also you get a API endpoint which is open a compatible which means you can essentially replace your node URL and start calling your node URL right after deploying right typically depending on the model size it might take about 10 minutes for any of you to launch an agent so let's get into it so the first step is let's install the Gaia CLI for to for us to be able to do that let's go to docs. gy. if you're doing this along with me it'll be amazing you'll also uh learn while we do this if not you can always access the recording later right so if you go to dogs. g. you can go to setting up your own node this is where there are some prerequisites minimum 16 GB Ram if you want to run a 8 billion parameter model uh ideally and if you want to run a smaller or if you have a machine that is 88 GB Ram or if you want to run an a agent on a Raspberry Pi I would recommend you pick a smaller model like .5 billion parameters or 1 billion parameters uh if you run something like an 8 billion parameter model on a lower um capacity machine it will not run it'll it'll slow down the entire machine so keep that in mind there are only three steps that you will need to launch your own node which is an AI agent uh on Gaia the first step is installing the CLI right let's quickly install the CLI this is my terminal I'm going to install the CLI this is the first step from setting up your own node section on the Gia dos and once the CLI is installed you have to run this Quick Command The Source command for the gyet CLI to be able to uh access the CLI command in this terminal that you that I have open what gyet has under the H is if you go to our uh GitHub page I'm going to drop the link to our GitHub uh where you can see the architecture details I'm not going to go detail into the architecture but with every node what you essentially get is tool usage function calling uh an API server an llm an embedding model uh Vector database by default you have quadrant Vector database in the node and also a prompt manager which is customizing the system prompt and the rack prompt for you to be able to fine-tune your AA agents to suit the personality you are training it on right so once you install what you also should should notice is there is a node ID which is a wallet address right so every node comes with a metamask wallet address and the private key and the details of this wallet address is in the node id. Json file I'm going to show that very quickly after running this quick command so that you know how to access the wallet details in case you are building an AI agent to perform autonomous transactions on chain right so once we run the source command don't forget to run this command it is very crucial for the ganet CLA to be available which means if I want to run gyet init or gyet start you have to run the source command so the next step is gyet init which is initializing the default node by default when you install the node uh at any point if you if you feel this is Rush drop the drop your questions in the chat I'm happy to slow down and expand but we have a lot to cover I'll try to be as high level as possible but happy to answer any questions you have at any point right when you install the CLI right uh gyet in it is the second command by default you get a Lama 3.23 billion parameter model along with a knowledge base about Paris right you can access multiple knowledge bases that we have on our hugging face account right you can go to hugging face. SL I'm going to drop the link to this as well in the chat for all of you to access uh you can go here to access the default data set but if you go to our page on hugging phase you can also see all the models that we support you can see uh DC car1 is also there uh that you can run locally on your machine this one perfectly runs on a uh Raspberry Pi or even a Macbook uh Pro and these are some of the data sets that we have built there are Developer dogs there are uh static text based knowledge bases there are code based knowledge bases that you can also see that we have trained models on uh including the chemistry one that I was talking to you earlier right so this is where you can find all the models and the data sets if you want to play around with uh customizing right so the second command like was uh getting to is gyet in it right by default you get this but what if you don't want the 3.2 billion parameter model or the knowledge base you can customize the Second Step itself now how do you do that you have to go to our guyet get up page where there is a section called repositories also feel free to drop any PRS for any of our repos you should see a node config repo what we've done is created a repo where we have listed a lot of a models and LM essentially which you can uh just copy and initialize by default these have the configs ready to go for the sake of this demo what I'm going to do is I'm going to pick the quen 2.5 coder 3 billion parameter model right go into the folder you will see the same commands the first is the CLI second is the init Command right so instead of doing gyet init I'm going to do pass the config file itself so that by default it now downloads the quen 2.5 model like you can see when you do in it it downloads the model itself depending on the internet speed this should take uh the time it needs to download the model then it'll also download the nomic embed embeddings model right what are embeddings if you don't know what embeddings are essentially in simple uh terminology L uh llms uh utilize embeddings as a way to extract information we a story right embeddings are just words or phrases converted to numbers for example happy or Joy are similar words so they have similar numbers together right uh I've I've uh taken the Liberty to make it too simple but they are a little more complicated than that but we will leave that uh definition for later but embeddings are then stored in a vector database imagine a Shelf with different boxes like I said happy and Joy are similar words so they sit in a uh sit in the same box right that's how uh Vector databases make it easy to extract words quickly right and llms are just beautiful storytellers if you if you don't realize already but yes while this is happening I can take any questions if you have if not we can still do it at the end but that's how you initialize right the last step that we have is gyet start right you can post the questions in the chat or we can do it later no problem how are you feeling so far all good you can you can react uh so that I know how you feeling if this is too rush apologies we have a lot to cover uh but I'll I promise I'll take questions all or I'm always answering questions on the uh Discord Channel as well it's me my user ID is HK space Gia so you can reach out to me on the Discord channel for Gaia colland Bounty as well in case you have questions or if you run into issues okay Alex uh right the question is at a higher level what is gyet replacing like I'm not as familiar with gyet I think it's a great question Gaia is uh your way to run AI agents locally today what happens is you don't know what how your data is being used uh with all the centralized uh uh llm providers like chat GPT but what Gaia brings to the table is everything runs on your machine you can bring your own specialized knowledge base and create a agents that are specifically fine-tuned to your data set and also behave in a certain way that you want the agent to behave and you have full control over it right if you if you want to fine tune your model you have full control of fine tuning it everything sits in the like I said in your machine itself wherever you're running it in your local machine or in a server if you're running it in a server but yeah you have full control over everything that you run through the node I think that's the biggest differentiator of gu uh AMA yes what AMA uh the main difference between ganet and ama if I were to put it is a ga is decentralized which means you've seen domains right if I go back to uh the node example that I was showing if you are running a node you can attach your node to a specific domain and this is where decentralized inference com comes into picture like I said every node has a wallet address as well and decentralized inference is if you are only running a node right you can attach it to a specific domain and then you can also earn rewards for contributing to the network and if for somebody like me if I'm an agent developer app developer or an agent developer for me to be able to consume your node or your uh domain for the inference I'll be able to pay you right that's you that's how you also make money and also contribute back to the inference itself so that's those are some differentiators AMA lets you run local models but GA is a step uh beyond that where you get control over everything that you need to run an AA agent with customizable knowledge base and also generate embeddings through uh your agent itself yeah that's how I would put it yes I will get to I will get to how you can use gyet with other platforms uh no actually ganet doesn't replace Eliza or uh coin cdp's agent kit in fact you can use Gaia as the llm inference provider for both Eliza or even F data or cdps agent kit and use it as the one that translates natural language into actions which is where tool calling will come into picture but let me quickly do gyet start right the last command that you will need to be able to run your own node right so once you do gyet start what will happen is you will get you you we've all seen the node address in the step one what you will get is the node address attached to a domain that you can quickly use in your browser or the open a compatible API uh and start building applications and one quick thing that I want to mention is if you see that your node stops after this step that means either your machine is not capable of running that model or there is a problem in your config.js I'll show you where the config.js is but if it stops here that's one thing that we've noticed in common uh some of the errors that most of our developers face but if you see all of this then your node is perfectly working like you can see this is the domain that we have you can now simply open this in the browser and start interacting with it that's how simple it is what we have here is like I said a default model then there is the API itself you can simply run this Cur command and it'll respond and this entirely is responding from my own machine there is no internet access to this right this is from my machine and now you can also do chat with this node and talk to the node directly from the browser you should be able to see the node address here and the model right when you say start you can also customize the system prompt here this is the default system prompt like you can see it is going to it it is an intelligent programmer powered by quen coder model and it'll help answer questions related to coding you can customize this based on the knowledge base let's say you are providing a knowledge base in Rusk or solidity uh you can customize this thing you expert in Rust please respond to users queries in uh the best possible planner and yeah you can play around with the system prompt and the rack prompt to get better responses you can also tell how the llm should respond uh either in bullet points or essentially how the format you want right but if you want structured outputs you should need a larger model because in the smaller models structured outputs and Tool calling is uh not possible right you will need a bigger model like a 32 billion parameter model to get tool calling out of the box right uh that's that's how you uh spin up a node and use it right this is the API tutorial like I said we called the API here that's how you spin up on Guan node uh all from our local machine so now if I go back to my command line I'm going to quickly show you where this sits you can simply go to ganet as the folder let me clear this for you to be able to see this better if you go to ganet folder here is where all the files are all right let me expand this these are all the files config.js is where everything sits right the llm URL the knowledge based URL I'll show you that but you should also remember that node ID JM is where your unique node ID is sitting and the device ID and node ID are both used to connect to the Gaia protocol now how do you do that simply go to our docs and you should be able to see a joining the guia protocol this is where you can come go through the tutorial and contribute back to the decentralized inference that was talking about earlier right this you should keep this important if you are installing the node or reinstalling it if you don't want the address to change right can guyan noes call external apis like web search that should be possible but you will need tool calling enabled like I said you will need a larger model for Tool calling but if you want to use tool calling specifically let's say with the agent gate uh I would recommend you use one of our public noes what we have also done is in the public notes section on the left we have uh we are running some nodes that you can use for Tool calling like we have a voice to text model whisper V2 large running on this domain this is also opena compatible you can use this and uh for specifically for Tool calling if you are using uh let's say agent kit right I would recommend you use lat tool. us. guy. Network as the uh base URL right I'm going to drop this in the chat for you all of you to be able to remember this but this one by default comes with uh tool quality right you should be able to use this and call any external API right be it uh let's say you you've created a subgraph and you want to fetch some specific statistics from a from your own smart contract you should be able to do that by using this one by default if you're running a model it will not work right uh especially the one that I showed you it will not work right so this is the llm like you can see everything is here there is no internet call by default right so if you delete this your node will stop working that's how simple it is and let's also quickly see how uh you can use collab a and start that lets you connect first of all your node that we just launched uh and run llm inference uh and I'm not going to deploy a telegram bot in this example because we don't have that much time today but I'm going to show you how set how to set up the environment variables and all of that in the a Ag and start right so remember using Gaia and also the a init is mandatory for our bounty right we've also posted some examples of what you should build but remember these are not set in place if you want to build something else uh please do so right these are only some examples that I wanted to share through the Bounty but please go through all the bounties and also the additional prices that we have right the AA agent startet from collab land link is available in the Bounty page I'm going to drop the link to this uh GitHub repo in the chat as well for all of you to use it right a agent start kit is based on Aliza originally and this lets you uh launch a agents in Twitter Discord um Telegram and also use lit protocol for lit actions where you can abstract away your um wallet keys private keys and all of that right so please go through the repo this is very extensive uh in terms of what all features there are you will know notice that once I start installing the CLI right so let me uh clone the a stter kit I'm going to do get clone and run this this should be very quick very simple very straightforward let me go into it the first step that you need to do is obviously install the dependencies and while the dependencies are being installed uh you should be able to scroll down and see the project structure unlike Eliza there is a back end and a front end here so there is a client and a server architecture and these are all the environment variables that you have to set up when you are using the uh collab land a and start kit I would recommend you get the collab land API key and guy models are also available through these environment variables I'm going to show you how to set them up in the environment variables file you can also bring your Eliza character if you have something already set up using Eliza and yes like you can see there is uh Twitter integration available there is Discord integration there is Joker is integration there is GitHub integration all out the box all you have to do is set the these parameters and it will start working in fact there is orbit studio also uh available in the integration but yes that's uh the agent kit so build is done now let's see the next step is to I think run this yes pnpm run Dev when you do pnpm run Dev on the a agent start kit it will start asking for all the environment variables right so you can set them right from here like you can see there is the public URL Sean uh Sean is asking does ask support voice for agents uh I haven't specifically tried ask for voice I don't think it supports but please correct me if I'm wrong uh if you're trying it out but yeah I haven't tried for voice yet like you can see it'll start asking for all the environment variables right it will not work because I'm not setting anything I'm just showing you how to run this right so here is where you can set the guyet uh en environment variables but for the sake of this demo what I'm going to do is I'm going to go back to the a agent State and open this in my code editor and show you the environment variables path right so the EM example here is where you can add the guar details right this is how you do it now how do you know which model you are using very simple once you get the domain URL right uh if you go to the domain URL that you got from the Gaia CLI once you install here is the model name this is where you bring it from just copy this and paste it in the model URL sorry Gyan netore model and then this is your server URL followed by V1 and then the embedding model is also mentioned here by default it is a nomic embed embedding model and if you want to generate embeddings and use gyet embeddings you can always set this to true I would said it to true but yes this is where you add all the environment variables depending on where you are launching the agent if you're launching the agent only on let's say telegram I would only add the telegram bot token and then test it out right but you can always add the other parameters here by default this is the character Json file you can always update this to a specific character let's say you're training the agent on uh vitalex personality and his uh content that he puts out on the internet you can customize this to behave like V alic right uh that's the character file but yes that's and of course server is the back end for the a Agent stter Kid this is much more simpler and less um less uh in terms of the number of packages uh as compared to Eliza is what I would say for this one but yes this is an overview of how you can run uh a and start kit plus gyo so once you run gye just add them into the EnV file here and then pnpm run Dev and you should be good to go right I would highly recommend you try both these out and if you run into any issues I am available on Discord and with the rest of the time available I'm happy to take any questions if you've already tried both of these platforms please let me know and uh if you have any issues I can I can help you answer but my recommendation as an AI agent Builder if you are building an a for the first time is to pick a model that fits your use case right Lama 3.2 can fit into specific use cases similarly if you are uh if you are building an agent that writes code right I would highly recommend you use either mral codr or quen 2.5 right and if you want if you want better accurate responses you will need larger models but if you want your model to do very specific tasks uh then I would recommend using smaller language models slms like the one I showed you where it is just a three billion parameter model you can also use smaller ones if you're running it on a smaller machine so you have to consider all of this before you run the a agent itself right but do give uh it a shot and let me know if you run into any troubles but if you have any questions let's take them now I hope the workshop was resourceful you can drop an emoji as a response or in the chat also let me know uh if the workshop was helpful enough to get you all started while while we are getting some questions or if you have any questions uh there there are a couple of resources I want to share in addition to our GitHub repo uh what is your actual target audience with your tool the actual target audience is for everybody to be able to build specialized agents we don't want another uh chat gbt alternative or or something like chat gbt where it is a jack of all trades I think the future is highly specialized customized agents and agent to agent interactions right even for the Bounty when we say mother of all agents it means imagine like a super super human of Agents right that can do multiple things by interacting with other agents not by doing everything by itself can we use a agent kit for just next days back yes you can use it like you want to what is the collab land key used for uh collab land is the one uh that created the aent stade we are partnering with them to run this uh they they are the ones who created all the Integrations with the Discord they are the ones who are actively building the a tate and supporting more developers to build uh AI agents in a quick manner right if let's say if you want to use a public node with the a a agent start you should be able to do that right one of the resources that I wanted to quickly share is obvious honor docs. g. you can go to the guides and tutorial section we have some examples including the CDP and how you can use uh Gia node on an on Eliza and also on CDP and uh deep seek is also coming up very soon here I'm just waiting for the pr to be accepted uh but yes docs. g. is where you can find this you have a list of agent types and then what type of models work well for those uh I think a great example for that would be uh to seeing the existing agents that we have and Which models they're running on if it is a generic agent that that you want to respond in text I would recommend using Lama 3.0 3 bil parameter or 8 billion parameter for coding like I said quen is a great example uh and uh if you want reasoning I think no question you can use deeps but run it locally not using deeps API uh because we don't know where that data is going so run your uh a deeps model locally you can run that using the distal Lama 8 billion parameter version and uh yeah you can find more of these demos and also some more examples right on on my Twitter I keep dropping some of these uh on my Twitter you can you can go there and uh check some of those out you can go to this is my Twitter handle you should be able to find a lot of these demos once you go to my uh uh right this is the one this is an npm package let's say you want to programmatically launch a agents using JavaScript you can do that using uh the npm package called Gia deploy right that that way you can spin up multiple nodes automatically that's that's one way to do it if you have any like PRS you could also contribute there I think it would be helpful to have a session where people pitch their project and then yes so there are two sessions coming up this week uh where there is Project pck feedback sessions I believe that's what they are called please join them I will be there I will give you feedback and also one-on-one um insights on on how you can tweak the idea that you're building I think that's a great way to get feedback thanks Alex for bringing that up uh but yeah this this is where you can find many more examples that are still not on our dogs so do do go check it out uh what else did I want to share yeah this is the one that shows how you can run deep seek R1 locally but yeah I can I can go on I can I can share many more resources but if you want more resources I would recommend you ask me on our Discord Channel including including any questions that you have if you running into any issues but what I would say uh to end this off um is building a agents is simple right I think what is important is for you to Define your use case better and use the right LM and fine tune it to an extent where you're satisfied with how it responds right the key is always in chunking the data uh segmenting it in the right format uh and then giving that to the llm as the knowledge base you can go to our knowledge Bas section to see how you can convert a text file PDF file a CSV file into embeddings but remember if you don't chunk your data and segment your data your llm will go all out and respond very randomly which uh which you wouldn't want right you would want it to respond properly right for Tool calling like I said use the link that I shared specifically for Tool calling but yes that's all I have for this demo [Music]"
    },
    {
        "title": "Austin Griffith I Building Onchain in the Age of Agency With BuidlGuidl I Agentic Ethereum 2025",
        "video_id": "7ewp29pM4jw",
        "transcript": "so I am Austin Griffith I uh work for ethereum at the build Guild the build Guild is a dow that's focusing on developer education and tooling and building cool stuff on Shain uh our main curriculum after today after you learn how to get started uh definitely head over to speed oops what am I doing definitely head over to speedrun ethereum speedrun ethereum is a great curriculum that will help you get started building on chain and build a bunch of things that will expose you to a bunch of Concepts that will get you ready to ship but today we're going to look at scaffold eth and we're going to look at it through the lens of this growing AI Trend that is really changing a lot in the developer space at least so scaffold eth is a tool that helps you build apps but it has this debugging feature built in that will help you to test your assumptions and try things and sort of not know everything going into it but have the ability to try things and learn how to test your assumptions so let's just jump uh right into that I've done this already I've run this npx create eth latest over here and and then we brought up our local blockchain with an e or yarn chain and then we brought up our local run end with yarn start all of these instructions are right there at scaffold e. if you get into the docs and follow along or get into the repo and follow the the repo it's all uh right down here I kind of did this MPX create eth then I did a yarn chain then I did a yarn deploy and a yarn start and all of these things will get you ready to go let's just do that yarn deploy right there that's going to deploy our example contract and then we can go dink around with it and that's kind of the the heart or the starting piece of scaffold eth is you have your contract here and let me zoom in just a little bit and then you have this interface where you can try things right over here okay let's let's get into it and try a few things so in particular there's this debug contract so this is kind of the starter kit for making an actual app and this is really cool because you can Tinker around and kind of just be learning and feeling things out and then once you get it figured out you're like you're very close to just like shipping an app to production if you want you can kind of push this to to uh versel and push your contract to a live chain and voila you've got a live app so let's look at the heart of it the heart of it is being able to talk to your smart contract and try some things Tinker around right this is also a familiar Loop you might find in remix so scaffold eth and remix are very similar in that they can help you Tinker with uh solidity and get a footing but also like deploy contracts while while you're at it and in this case also deploy a front end uh so the the thing that I really want to get and we had a session I think Thursday or Friday and the thing that I really push there is tinkering and I want to show this one more time real quick so if you don't know solidity yet very well if you're a coder you'll pick up the syntax pretty easily and you can go to solidity by example and just go through these Concepts pick a concept and go learn it and what you can do with tinkering is just kind of grab let's say we're going to learn mappings and we're going to figure out what this mapping is and look what this G and this set is right we can just copy these right into our contract okay and just hit paste and hit save and hit deploy and then go Tinker with him right so what we what we added there was some new mapping that should show up yeah right here here's my map right and it takes in an address so I can pass in an address and read the value and maybe we want to do something like set the my map for some address right here let's let's just set it in the Constructor it'd be my map uh not message. sender let's say owner just to show that this works and set that to 42 and deploy it right so you have the ability to really Tinker with stuff this is all on Local Host this is just you messing around trying things out but now what happens if I like grab oh whoops it's going to be the owner's address hopefully this is 42 whoops I went to the block Explorer really nice block Explorer built in to scaffold e did you see that but there we go we're able to you know set the mapping for this guy the the the key piece that I'm trying to show you here is that you can learn solidity very quickly by going to solidity by example or grabbing the docs bringing something uh some New Concept in that you find into your contract and then kind of just tinkering around with it whether you're using remix or scaffold e you make a change to your contract and then you see it in the front end and you can dink around with it and make sure it does what it needs to do uh for instance in the session that we had uh last week we did this thing where we had an owner of the thing and then we just made sure that only the owner could call a certain function and we did that by calling the function here and then creating an incognito window which actually creates a different burner wallet this is kind of this account here we're using burner wallets which are really nice for local Dev and every time you create a new incognito window you're actually getting a completely new wallet which is really nice because then you can have all these characters that you can kind of attack your contract with okay but we did that already let's say that you got the syntax down um you may not even need to have the syntax down which I think is the cool thing that we want to like lead into here when we're talking about this age of agency you need to kind of be able to think algorithmically a little bit about what you're trying to build but you can prompt cursor and it will do a pretty good job of writing your smart contracts for you you which is kind of scary and kind of cool all at the same time but this creates a new Agency for humans also you at at home can now think more at a little bit higher level instead of thinking of exactly what this solidity needs to look like I need to start thinking of what I want my protocol to do right and so if if we kind of like follow that let's pull that thread a little bit and go through it as we uh dink around here with scaffold e but I'm going to be thinking less and less about the syntax of solidity and more and more about what I want this thing to do and prompting uh chat or prompting uh cursor who will probably prompt Claude uh to to help me with that code and I still need to know you know the ins and outs there's some small details about solidity that you have to be careful with uh for instance sending sending ether if you were to just prompt cursor to send some ether they're probably going to not use quite the right function they'll probably use transfer and that's good that's okay but what happens is this transfer function happens to be limited to 2,300 gas and so if you happen to be transferring to a Smart contract that has a fallback function that's going to burn some extra gas to do some extra things this transfer might fail so the sort of way to make sure you like don't have that problem is you use call and you send your value using call and and so sometimes GPT or Claude does this wrong and this is an example of maybe four or five little things that you need to watch out for but this is one of them and you just need to be like yo not not like that like this and maybe we'll do a little bit of that here too uh but let's uh dig in and look at how we might go about building a protocol uh thinking thinking through what we want to do so let's get rid of this map we don't need this mapping anymore and really I could clean out a bunch of stuff in here there's a lot of examples here just like fallback functions and uh you know owned withdraw functions and it's a greeter that you set the greeting and you see if you send in some money it's payable and you send in some money it flips a bit just kind of like a lot of really good examples uh but let's just kind of think through uh what we want to show what we want to do here so let's say it's the age of agency and I have an old laptop laying around with a GPU on it I want to use that laptop as an agent maybe even like an oracle to a system and so what I want to do is think about what part of this system I want to build will live on chain and what does its onchain uh presence look like you really need to think about what has to happen on chain and what happens off chain and that's when you really start figuring out your protocol and what it looks like and then you start kind of building it out so what I'm thinking is I want to make like a GPT like app I want to make a an AI powered app that's on chain right so I want to deploy a contract maybe to like Bas or optimism and I want people to be able to buy in on some question and once that question reaches some critical mass there's a bunch of oracles that can come in and like answer that question right so it's probably going to be a like a struct of a string and maybe some uh votes on it and then maybe there's going to be some struct that is like the answer and this starts to get like it starts to bubble out of control a little bit when I start thinking of it in my head so I almost need to draw it out and sometimes I might just draw out some boxes right like get a mirror board going but what is the simplest possible way I can think of doing this is what if we have like a bonding curve for the question and people can buy into that curve curve and things go up and down so so really what I want to do is we're going to prompt cursor and see how cursor does here and it's kind of weird to be prompting on a live thing but this is this is the method of building a a lot of stuff right now and if you're not using this at some point you're probably uh you're probably like leaving some stuff on the table there's a lot here to learn and this is really powerful and it will 3 to 10x your your output if if you're uh you know an average developer let's let's try it so what what what I think I want to do is I want to track questions as like strings okay so um we want users to be able to buy in on a string so maybe we have a struct with a string and a price and as they buy it goes up and as they sell it goes down and there is always liquidity something like that a bonding curve right it's a bonding curve but uh one at a time no calculus please right I probably did not spell calculous right but let's that's it right this is how we get started we're going to throw something in here and be like what what are we going to do look at that oh there's a struct right okay so we've got a struct with a string let's dive in and see what this thing uh builds for us and we'll play with it right we'll deploy the contract locally and we'll see just how this thing works but what I'd like to have eventually is for someone to be able to come in here and be and say some question like what is the price of oil at this certain time and have maybe like a time stamp and people can in some period oracles can be answering that and somehow it rewards the right oracles like I haven't really thought this out too far I'm still tinkering around and trying to find exactly what I'm trying to build and this is perfect for that so let let's see oh did it die I think it it cancelled I don't know if I've had that let's try it again there we go there we go I'm just going to accept this and we'll go see uh how it looks so yeah it looks like it's going to keep track of this there's some content there's some current price I don't think we want to have an owner uh let's pull that out no please okay buol exists I don't even know what that is for but we'll figure it out as we figure it out so there's some initial price we see how it increments and decrements we probably could just have that as the same but whatever let's just leave it uh how it is oh no no I kind of have to have internet I don't know uh this is uh yeah this is you're you're on your own when your AI dies on you let's see okay so we're gonna have some withdraw balance let's just see uh what happens when we try to deploy this we're g to get some errors we're going to need to clean them up but we're kind of like dinking around here and let's see uh let's see previous owner here oh this is unused local variable that's fine oh okay what we have here here is when we're doing our deployment there's some extra stuff happening here that we don't want to happen anymore and also it looks like we're passing something into the Constructor let's check and see if the Constructor takes in a value yeah it still does okay so we still have this owner this should maybe deploy let's go see okay so our contract is out there uh on Local Host and we can dink around with it right we have our initial price notice eth to we you should have learned the concept of eth verse way uh we we have our price increments we have an owner which isn't really important uh but let's see what can we do there should be there's a buy okay so there's a buy string okay there we go so you pass in whatever string you want to buy okay so we need to come up with a string so uh what is the price of oil and eventually I think what we want to do is have like a time stamp where this is in the future right so we're building some other platform that is somehow building a market around what people think the price of oil is going to be and then we want a whole bunch of oracles to say what they think the price of oil is at some certain time and so we're we're like the market may may say like what will be the price of oil tomorrow or something like that right so what is the price of oil and this probably needs like I said like some kind of Tim stamp in the future like what is the price of oil and we'll say like tomorrow at noon or something like that right and we would we would basically get that from uh this so it's not there we need to find a right so we need to buy okay so we're going to buy what is the price of oil and I believe that will go here and then there's probably some initial price that we're going to pay okay and oh we're GNA need some money from the faucet we got to load our burner wallet up okay I don't know if this is going to work we'll see we're exploring we're trying things we're seeing what's new what is the price of okay we we were able to buy one of what is the price of oil uh is that working let's see how do we even go about oh the price should go up now right uh so now if we ask for what is oh there it is okay so now we can get the string token we can say what is the price of oil check out the new price now if I try to buy another what is the price of oil this should fail yes oh you are you already own this string okay we definitely don't want that okay so we're going to look into the buy string now so it checks to see if that struct exists and then it looks at the price okay we don't want an owner right and we don't want to check to see yeah okay so we're we're gonna have to prompt the GPT it's basically created a single owner for the string and we don't want that we kind of want to say um a single owner to be able to buy in and own a piece of the string something like that let's see what it let's see if it figures that out yeah so no more owner in there and then a new mapping that tells what kinds of things you uh as an owner own just like a ton of code getting written here going quickly uh obviously you don't just like apply this code and ship it straight to production oh this is crazy uh let's see there we go but this should okay so now we check to see okay how many shares you're buying okay cool uh nope all right all right I also want it to only buy one share at a time to make it simple you make it simple only buy one share at a time okay this is close so it'll buy a single share every time it'll always only buy one uh your shares will go up probably uh there's a nice refund this is really nice so if we buy extra it looks like we'll get a refund which is really good because if lots of people are buying against the um if a lot of people are buying against the curve at any moment the price will shift up and a lot of people will get failed transactions and this thing has kind of uh figured that out so our front end will probably send some extra money along with this to make sure there we go to make sure they don't get those failed transactions okay let's see let's see if we can deploy this thing see how it's looking now now of course there's there's so much more to do here once you get your smart contract working and let's just make sure we can like buy and sell shares there's so much more to do but we only have like I think 10 more minutes so uh I want to move on and show frontend stuff once you get your contract where you like it let's uh let's see I haven't really been watching questions sorry y'all oh I see a lot of note takers popping off okay uh let's see can we buy and sell shares that's what we should be looking at so uh we have some question you know what uh oh let's see let's see who who who are the members of the Doge right that's a Hot Topic right now and and maybe it wouldn't be that big of a question but let's buy into it let's say we want to know the answer of it and we'll buy the first share of it probably the way you would work this is you would have someone land on your website and get to type in whatever question they want and they would like deploy and buy the first share all in one go uh but let's make sure we can buy that and then if we come up here we should see the price goes up and if we try to buy another one it should fail oh no it let us buy another one at the same price right uh oh so we gotta go back over here and tell this dude it's not quite working let's see the price should go up and you should pay a higher amount for each share you buy and as used so the price should go down right now I can buy two in a row for the initial price and is wrong something like that right and you're you're prompting you're hopefully we're we're gonna call it good at this moment uh whether AI figures it out or not you will need to spend a lot more time here making sure this is good before you push this out to a live chain there we go now we see the price incrementing that's that's nice okay save that go ahead and deploy that and if we get any error messages I'll probably just copy paste them right over to AI to fix and here we go so let's try uh let's see uh what is oil price oops okay and that's going to be our string and we're we want to know what that is so we're going to buy into that at the initial value of this price okay and that's in way of course uh you could count the zeros and figure this out but it's probably something like that and if I do that again oh no it's still still totally letting me buy that uh it doesn't seem like the price is going up yeah okay so it doesn't seem like ourter is working the AI it seems like the current price let's see what we charge here ah look it it's doing a transfer too exactly what I was talking about this is a no no see that you have to get in there and fix that but we're not going to do that today we only have 30 minutes building a protocol in 30 minutes doesn't make any sense but let's pretend like this is all working and what you want now is for people to go to a website type in their question and buy and sell okay so it's not working that's a bad that's a bad cursor bad claw that's a bad claw let's let's go to the front end though let's start working on our app okay and that will be over in the nextjs section and your app will be this page right here right and so uh let's go to home this page right here right so what we want you know you you got to build out a little AI but or you have to build out a little UI but the AI can help a lot so uh let's let's clean out the UI let's have a text box where they can ask a question let's have a buy and sell button that lets them buy and sell that question uh against our contract okay and let's do a couple other things I'm going to send uh the docs I'm go say hey here is how you read from a contract so I'm going to go to scaffold eth docs here's how you read from a contract right something like this here is how you read from the contract okay boom here is how you write to the contract okay and I'm G to bring that stuff in a lot of times you could put this like in your cursor rule there's probably some AI folks out there that are like Austin you're doing it wrong bro that so last week uh but here we go I'm kind of pasting in some stuff okay and and I don't want it to just have my page I wanted to also have my contract in the context okay I like my instructions here are terrible it's going to do something really weird uh you have to be way more explicit and think through the other things I definitely haven't done that here uh you can do that at home but let's send it oh I didn't mean to hit command enter there it's going to be a costlier call but let's see what it does let's see if it makes us some buttons and some text entry look at that it's reading from the contract it's handling buys it's handling cells I don't necessarily have to know a ton of react here to get this to work I don't necessarily have to know a ton of solidity to get this to work but like yeah it's it's gonna make a mess if I don't like if I get too far into this like prompt blindly loop it's not going to end well for me at the current stage of I uh but that is changing quickly okay let's see what do we got what do we got let's apply this and let's uh see what we have here over on the front end okay I mean that that was kind of what I had in my head to be honest like what is the price of oil and it almost needs to take that question and like look it up and then see if it's a struct that we can buy or not and if we like it we could hit buy wow it actually actually bought the thing from the thing and can I sell it and actually sold it back how does our money work here let's let's pay attention so we have 2,668 we're going to buy one buy two buy three this should go down right okay our money goes down and then let's sell those shares our money goes up okay so it's it's sort of working but not great uh let's let's have let's do one thing where as they type it reads from the contract to see if there is an existing okay here we go as we type it reads from the contract to see if there is an existing struct for that question and tells us the price something like that right we're getting really close to having these buttons wired up so we know exactly the price and someone can type something in and get the price let's see what it does oh you know what it probably needed wait wait let's give it more context it probably needs our contract in there I feel like it's going to do something blindly let's make sure we have our contract in there okay so now what's going to happen is as we type in here hopefully it will go and read from the contract yep yep yep so there's an is scaffold and it's getting the the string token for the given question okay let's see let's see how this works okay reload so what is the price of oil there's nothing here there yet let's buy now it shouldn't be a new question right now if I like just like reload this whole thing and paste this in it's still still showing up as a new question okay so some things are broken uh spend more than a than 30 minutes creating your protocol your AI protocol okay so then the last thing I would need to do is ship this thing to production and the way I would do that if you follow uh the docs uh in scaffold eth you're going to yarn generate and you'll create a deployer account you're going to uh yarn deploy and that will deploy your contract to whatever Network you want say we're going to base and then you need to yarn that's that's putting the contract out there you need to yarn versel and push your app live to versel and then any one can get on and use it and that's basically the loop of scaffold eth and how you can use cursor and AI in this case I would want to write one more script I would want to create a new script that allows an oracle to check in with the smart contract and figure out what the open questions are on the smart contract so basically have an oracle that's reading the Chain Looking to see at some value for some question and then once it reaches some value they get in and answer answer the question or something like that so I would have my front end my back end and also my Oracle code and I would launch all of those together as a this AI platform protocol a lot of work needs to go into how this is actually going to happen I've kind of filled in a lot of the details and glazed over them but that's up to you the Builder the hardest part is not the solidity it's not the tooling it's none of that the hardest part is coming up with a great idea that people will actually use and implementing it and that's up to you at this hackathon go get them go do it Go ship something amazing thank you e Global for putting on this awesome awesome hackathon over and over again we'll be back keep shipping keep going thank you so much uh eth Global I think that's the end of my time though hearts hearts hearts"
    },
    {
        "title": "Han Wen I Build, Deploy and Distribute Autonomous Agent With Autonome I Agentic Ethereum 2025",
        "video_id": "h3CbKI-ZWYc",
        "transcript": "we are here to talk to you guys about autonome and also the different tracks that we have offered in this Heaton itself so uh autonom is basically a way for you to quickly deploy your air agents uh on uh our platform so we'll host the agent for you and all the inference all the things will be also done on our site uh the things that you have to do as a developer is either you can submit one of the custom Frameworks that you have designed by yourself or created yourself and and then you will be able to launch it on our platform or you would want to just use one of the more prominent ones for example Eliza framework agent kit and so on and you can just one click deploy your agent using the platform itself so uh within this acon itself we have three different tracks I believe that U some of them are on this site itself so that's one which is for the best defi agent and one for the best social agent and the last one is for is more more like open category for people to think of what other the things they want to do with the a agent so just to quickly go through um the tracks itself the first track itself is uh is to to hope that we get we will get some submissions that's related to dii so if as you know some agent kit itself is is a is an AI agent framework that already interacts with the base network uh and if you can use that as a basis for creating your own framework or you would just use it to fine-tune your agent to interact with uh let's say Base main net um to find out like let's say the best use Source um the best s rates and with the last liage with the least liage it will be something that we want to look at so this is a for this track and the requirement for submission itself is for you guys to launch an agent using our platform so we the the platform will host the autonom platform will host your agent and will require you to interact with this agent through an API uh service that we have um with your and you you'll have to build a user interface for the users to to tap in tap in and use your service for example so it can the user interface can be anything it can be a telegram board it can be a Discord board or it could just be a a simple web app as well so yeah that's for the first track and this for second track the best social agent we are looking for people who uh more in tune with like the current Trend so for example now we have uh all started with truth terminal as we know and then we have BT and so on um that does Financial social um sharing and so on so if you can if you can create and find tune your agent let's say with Eliza framework to to be very creative in the way that you tweet and uh engage the social networks for example on Twitter or on Discord or all the supported Network say El that Eliza actually supports uh that's something that we want to to reward as well so um that's for best social agent it's quite self-explanatory so I will not elaborate further uh as as similar to uh it as well it needs a platform for you for for the users to actually interact with it so the user interface could be uh you can tweet and it will reply you in the Tweet itself or it could be on the telegram site and well if anyone asked a question to the bot and B reply so this this is one way to do it or another way is to do it like uh some of these other agents have this uh web app itself that has a chat terminal where you can actually talk to the agent directly from it with some kind of like uh special permissions for example it requires nft to talk to the agent or it requires certain amount of tokens in order to qualify for for the speaking to the agent so yeah that's that's something that we look at as well and the last part is uh is a open category for people to just um talk to to create create their own agent that to do different tasks that are not related social or on Def and it can be something like for example this some people who build an agent to um interact with uh food orders that's and and there's people who do Health tracking U with the the social the AI agent itself as um being like the the the one who keeps them keeps them in the responsible for for their own health so this something that we want to look at as well and if you guys are more um in in line of like just creating agents that are not actually in the trend right now you can actually go for this category and uh we would like to see what you guys can create so uh that's for the tracks explan explanations uh and I'll just quickly go into the platform itself so the platform itself we we have this uh interface once you locked in uh so you need the Google lock in once you locked in you'll just see this dashboard here at def. autonome fund and the Frameworks that we have uh that's already installed is uh Eliz Eliza framework agent kit and hyperbolic and you can just click deploy and you can deploy whichever ones uh if whichever framework that you you personally uh like the most but you can also upload your own framework as well so for example you want upload your do Mage framework you can do it here uh what you have to do is that you just put in uh the name description the docker image so you have to upload to Docker Hub and then and then just put in the docker Hub ID and uh the and then for the chat endpoint can be anything the port can be anything as well and then um the chat request schema is basically just to Define what's the the request and the response how how it's going to be like so you can interact with it from the API perspective so right this this for uploading your own framework later I'll show you a video on how to do so um and without further Ado I think we just probably just quickly click on deploying Eliza agent so uh once you in here you will see um the this you have to choose the deployment type so this verifiable and non-verifiable um this actually it's just a add-on that we have in this platform so we allow people to uh leverage t as a service so that they can be they have a verifiable agent is running so you know that you're actually talking to agent is not not some human behind it so that's one uh uh and and this if you just choose verifiable you just T technology and then from here on you just click on name you can just clean anything let's say for example and uh once you're done with that then just go for the config um and and tune and and twe the initial persona persona of the agent itself so for example here we have a few that has already been um uploaded from by by ourside so you can choose like Andro T dragonfly tadino VC and so on let's say uh I choose Darren La as one of the Frameworks and it will just basically input the name and also the BIOS the style of the way way that it actually tweets and chat with VI and all so on and so forth so these are all the things that is self-explanatory you have to just key in yourself um and it's very similar to the requirements in environment file for the Eliza framework so if you deploy before an agent with Eliza framework you will see the same uh variables that you need to actually key in here as as the parameters so once you're done with this you you will be able to just uh click on submit and uh you'll be able to deploy the so for here let me see okay so once you're done with uh once you click submit you need to ke the Twitter username the password and the email and uh for the AI uh for for the open AI of fees and for inference payments those will be done by us so we have you have you will be leveraging on our keys and state so this is only required when you actually choose to interact with it through Twitter so if you just disable Twitter and a client then you just don't you you don't need to actually do anything so you don't need ke your Twitter password and username uh do note that the twiter login for Eliza is always an issue especially because uh we do host the agent on your behalf so the the IP is different so what you have to do is to do like a VPN login to us East and you'll be able to uh once you locked in you you you verify that you actually are exist in that region then the the Twitter lockin site will not block you so that's one thing to keep to take a note of but once you uh done with all the different um parameters you can just deploy the agent uh we do have this uh promo code system for this hackaton um so for for this Heaton itself um if you if you require a promo code you have to go to U Discord and there will be a Google form for you to register once you register in a Google form within a single working day we will give you the promo code and you can start um deploying the agent I will not be deploying an agent right now because U uh it will take some time once you click on deploy usually the the whole thing will take roughly five or 10 minutes to finish deployment and then you can start chatting with the agent so let's take a look at one of the deployed agents for example NATO here so this is the the page that you have once you have deployed the agent so this the manage agent page as we call it so uh and and once you're here you will be able to check out like project name Twitter Handler app URL this is actually the uh the API that you'll be talking to uh so for example if you want to interact with the agent without using like the the in inbu app chat you will be using this this URL and here you can actually check out the username and password as well uh for actually uh doing the basic off so uh once you're done with that uh you okay this agent itself might have some problems let me just choose another one okay this is fine right so for example bji um this agent's live um I can chat chat of it using the API or I can chat of it here uh in this inbu uh chat app as well so quick talk to me and um what you can do here as a user using this just just by using the uhu the app interface you can just feed it data as well so for example let's say what you want to tell it um okay and uh is data feed successful then you can just ask it the question uh which organizer is best so I think it'll just reply you this the the correct answer yeah this this is um one of the uh way you can actually F tune your agent but of course if you want to find unit with some other ways you can actually do it as well so for example let's go back to bingi I can I can go here and I can select like different Twitter accounts that we have pre-selected for you to follow say da so you'll follow this few uh accounts and what we will do on the back end is that we scrap the the tweets from all these accounts and just use it as a way as as a data source for it to uh to F tune the agent uh same for telegram as well you can choose some of the pre predefined telegram channels we do not have a way for you to uh CH to choose a custom one custom Twitter account or telegram to to to to um for you to like f tune it because uh currently we don't support it yet but if you do have some kind of uh Twitter accounts or telam channels that you want us to add into this predefined predefined channels as a data source you can actually come here um yeah you can just talk to us and then we'll be able to or sorry for then you can uh you can actually uh uh we will actually add it for you yeah so U yeah that's for fine-tuning the the agent editing the character is basically the same uh file that the same environment file that you have when you have done when you're doing your deployment you can can actually tune it and it will immediately be updated on our side as well so your agent will be up will be updated within let's say two or three minutes once you have done editing this data right so uh this is basically it from my site uh for the demo um if you guys U want to actually take a look at how to upload the new framework I think my colleague has done up a pretty good let me just down out a pretty good tutorial here just expand it out so yeah this is what uh my colleague has shown uh this is him actually uploading the hyperbolic framework you inut the name the description the docker image U Docker hop ID and the tag itself which is copying and then the agent logo you can upload it anywhere that is retrievable and for let's say the chat endpoint you can just key anything you want as well so for example here he's just key as chat so this is standpoint that you you'll be interacting with um which is the API URL and then for U the chat schema here it's just a very simple um you just choose the the proper to be a message of type string and then the reply will be a response of type string as well so that's what it's choosing here and other things are optional so for example the GitHub URL and also uh excuse me is he uploading the entire uh framework like the hyperbolic so it's like a few agents at a time I mean one agent at a time or several uh he uploading the framework itself so there's no agents involved yet so um basically he's defining what is what what people require to to put in when they actually deploying the agent using his framework so you can it's you can think of it like a App Store uh we have this app store concept you can upload your app if you want to but you can also use any app that has been uploaded by other people and they and they have published it oh so like like if I upload this uh framework then I go I go back to the dashboard just like I did before and then I can just pick my own framework that I've uploaded earlier to upload a new agent right yes that's correct okay uh but how how do I upload like several agents at a time like how do I if I if I'm trying to do multi-agent system how do I hand that like inste instead of just doing like agent one by one like is there a way to do like batch or how is that configured uh I think that will be a bit problematic yeah you have to do it one by one yeah oh I see so you have to you have to basically deploy multiple agents so you can you can ask me for multiple promo codes if you want to and then you just use the API to talk to each other that's the the best way to do it at the moment uh we don't really allow people to create different personas behind a single um single like let's say the a port itself not it's not like there's a back room where different agents can chat with each other at the moment yeah we don't support that with our platform at the moment oh okay okay so like basically to qualify for the uh for the price like we just need one agent we don't need like like multi-agent system right yes that's correct ah okay okay thank you for clarifying right okay so um I believe there a API doc that have also submitted on the Discord channel so if you you have some issues with how to talk to like doing interaction with the agent through the API service for your for your app for so you can do the app interface uh you can also ask on Discord or check out the documentation uh Michael and I will be there to basically resolve issues offline uh I don't think this is the best environment for us to to do it because it would just uh be problem so I just think I think uh that will conclude this current session"
    },
    {
        "title": "AWS 🛠️ Building GenAI applications with Amazon Bedrock - Agentic Ethereum 2025",
        "video_id": "HRKh6Lr6aBs",
        "transcript": "make sure we get everybody in at this time we are asking for you guys to keep your cameras and mics off uh so we could just have it for the speaker today just going to go in here and do these things all right give everyone 20 more seconds here okay good morning everybody uh welcome to another great Workshop uh building gen AI applications with Amazon bedrock and we are here today with Emil Basel so we're so excited to have you Emil and go ahead and take it away awesome thank you Aubrey thank you everyone for joining um my name is Emil basil I'm a blockchain Solutions architect at AWS I've been here for over 5 years at this point uh prior to here I was uh doing solidity development over at consensus and then have been um mostly working as a blockchain architect uh since joining AWS and thank you eth Global for this opportunity to uh participate in this in this hackathon um at AWS we've been doing a lot of work over the last couple of years um in uh in in generative Ai and um more recently in uh agentic workflows and so everything that that that we're going to be talking about here and everything that this hackathon is about um is really close to what we are doing at AWS and we're always excited to see what what developers build with the tools and the products and services which we which we develop So today we're going to be talking about Amazon bedrock and Bedrock agents uh but to start off I want to give a high level overview of how we view generative Ai and how we're incorporating it across our stack so here we have a sort of three layer stack of uh different different levels of uh integration with generative AI so at the top you have user phasing applications uh you have Amazon Q developer for example this is a coding assistant it plugs into vs code other idees um which you may be using uh in the middle we have Amazon Bedrock which is what we're going to be talking about today and then at the bottom is for machine learning engineer so if you're writing if you're building a model from from the ground up you would use Amazon sag maker a lot a broad choice of um different Hardware which you want to run that on but that's for a different day today we're going to be talking about that that middle piece with Amazon Bedrock so Amazon Bedrock is a fully managed service that offers a choice of foundation models from leading AI companies such as AI 21 Amazon anthr Ric meta and many other ones uh with a broad set of capabilities to build many different types of generative AI applications and a big focus on really simplifying development uh while maintaining privacy and security so Amazon Bedrock is fully managed it's serverless so you don't have to worry about any of the infrastructure you access it via apis you access it via sdks um so uh very easy to get started and and build with there and with Amazon Bedrock you can easily experiment with a variety of these models and you can customize them privately with your data or using external data uh either via fine-tuning or uh retrieval augmented generation or rag uh and you can create managed agents for creating um executing complex business tasks such as booking travel or processing insurance claims or other things like that and all of that can be done without writing any code um I assume this being a hackathon people will want to get get into the code but just to give you an idea of um of the building blocks which you are providing uh you could go into the AWS console click a few things enter a few things and have an agent that is running that can uh crawl a website and answer questions about it and things like that cool get this uh get my PowerPoint set up there we go okay next slide so we speak to a lot of customers at AWS and what we hear a lot is that what the most important feature to them of Bedrock is how easy it is to experiment with different Foundation models and having a range of models to experiment with uh customers are moving fast in this space and generative AI itself is evolving very very quickly and there's new options and Innovations happening almost daily and just last week we saw uh the market turned on its head with uh deep seek R1 and um and we moved very quickly and now deep seek is available within Bedrock I'll get to that um towards the end uh so the space is moving very quickly everyone knows this and uh Bedrock is really a great way to easily test out different models and uh and experiment without having to um do a lot of lifting to to change that again everything's via apis and so you uh so if you're changing a model for example you're basically just changing the label of the model which you want to um invoke cool I do want to touch on two uh two families of models the first is anthropic claw models uh these have been out for over a year now I think they're almost a year I should say um and these are familiar to many people uh CLA 3.5 Sonet uh really raises the bar in like industry intelligence and in benchmarks for graduate level reasoning and uh you got claw 3 Opus which is the most intelligent model and uh three Sonet and three Haiku with three Haiku being the fastest and most cost effective and that's really good for sort of high volume use cases so it's really dependent on the type of application which you are looking to build again testing with any of these is uh is is very straightforward to switch between them and uh prior to reinvent uh which for those of you who don't know it's our uh annual conference that takes place right after Thanksgiving uh we had the Amazon Titan model uh family of large language models and at reinvent we announced the Amazon Nova Foundation models and these are new generative generation these are uh state-of-the-art Foundation models uh that deliver Frontier intelligence and industry-leading price performance and so Nova includes uh a couple types of models so there are understanding models which are these ones on the left and these accept text and image and video as input and they generate text as output and on the right side you have creative content generation models so these accept text and image input and they generate image or video output and Nova models are available only on Amazon bedrock and the five that are available today are Nova micro which is a text only model that delivers the lowest latency responses at very low cost uh you have Nova light that's a lower cost multimodal model that is also very fast and is great for lightweight tasks and then you have Nova Pro that's a highly capable multimodal model uh with a good combination of accuracy speed and cost and on the right side you've got our creative content um FMS Foundation models so canvas is an image generator using natural language prompts and then Nova real is a video generator uh which takes uh prompts and creates realistic videos from that and in the middle is Premiere which is not launched yet but it's uh it will be our most capable multimodal uh model um Foundation model and that's for complex reasoning and also to be used as a best teacher for distilling custom models so if you're trying to uh distill down to a smaller model you can use this one as the starting point from that and Premiere is coming soon and as I mentioned earlier uh deep seek this slide was added uh uh on Friday or over the weekend because that that announcement just just came out but as you can see on the right there that's the AWS console and now deep seek is one of the generation models uh one of the foundation models which you can use within Bedrock cool so we just touched on inference and selecting different llms for your inference now I want to switch gears and talk about agents so Amazon Bedrock agents are foundational building blocks for customers and developers to create their own agentic applications so as we just saw you can choose from a variety of foundation models to drive the intelligence of the agent and you can configure the agent with many different features such as memory retention knowledge bases for uh retrieval augmented generation uh guard rails for um protecting the user and um and other features as well and developers provide these agents with additional tools and functionality so that the agents can actually go and uh achieve their tasks and um if you've ever worked with AWS Lambda functions that's essentially what a tool is here is you equip the agent with this capability and you tell it when to invoke this uh this tool for example if you want to create a calculator you just tell the agent use this this this thing here and it's a Lambda function that basically just does simple math or something like that and an important thing to understand here too is um with agents for Bedrock you get visibility into the Chain of Thought of the agent so when you're debugging and you're trying to figure out why why your agent isn't doing what you think it should be doing you can see step byep with all the traces of everything that it's thinking through and why it reached a certain decision which which helps immensely when you're when you're building and and and debugging and uh recently we announced uh Bedrock agents support hierarchical multi-agent collaboration so you have what's known as a supervisor agent and this agent can have its own intelligence and its own uh tools but it can also be aware of other agents that can uh invoke that that can be invoked for specific tasks and you can now have orchestration from this sort of supervisor higher level agent um and these agents can all be used across different uh orchestration as well so you can have one uh sort of sub agent that's being used by many different uh supervisor agents and agents uh plan and execute these tasks using uh data which you've provided either from your own from your own private data set or from public data it can really be driven uh from many different ways and as I mentioned earlier you can you can start creating agents just from the AWS console so if you are interested in um just seeing what that looks like and setting up a Lambda function um you click you click through there and then you get a Lambda function that's a basically Hollow World dummy function and then you can easily extend it to u to um do the actual work which you need it uh to do cool so the way agents work is they essentially break down and orchestrate the task so when when a user gives it a question or a task the agent thinks through everything which needs to do and then it figures out and creates a plan for how it's going to accomplish that task and to help it accomplish this task you can allow it to securely access and retrieve data from from your companies or projects uh data sources or anywhere else and this would be part of um retrieval augmented generation to to to help your agent um sort of become more specific to your application um and it can take actions on your behalf so it can invoke API calls on on your behalf and that's where we get into the uh action groups and the the the tooling which you equip your your agent with and then we've got the Chain of Thought trace and ability um and the ability to modify the agent prompts as it's going through that Trace um so we have a default orchestration um uh template for for agents but with with a lot of these Services we have a sort of uh best best default but a lot of a lot of uh a lot of what I'm covering here you can customize it to to Really tailor it for the application which you're building so if you're interested in trying out bedrock and multi-agent collaboration um here's the first of a few QR codes which I'm going to uh share this is for the multi-agent um which we which we just released recently um and some examples which you can see are uh planning a trip where you have different agents that specialize in different aspects of planning a trip uh building a marketing strategy and other things like that and these are all available on on GitHub cool and the last thing I want to show is uh as of this weekend we got our PR merged into uh Eliza OS and so now your Eliza OS agent can use Amazon Bedrock for its intelligence and I wrote this PR so if you try it and it doesn't work you know exactly who to shake your fist at um but please let me know and I would be happy to um help you debug any issues or answer any questions which you have around this all right so moving on from Agents and I want to talk about retrieval augmented generation so as as many of you probably know what an llm when it's created is uh Frozen in time at that time where it was created so it doesn't know anything that that happened afterwards right and so that's where retrieval augmented generation really helps because you can supply data to the agent or to the uh during inference um for the agent uh to to to provide context around uh something that the agent may not may not know about either because it happened after or um it's private data so it was never available for it to be uh indexed and that's where uh Bedrock knowledge bases come in so rag really uh allows the agent to get data from your company data sources and then it enriches the prompt with that data to deliver more relevant and accurate responses and knowledge bases is a fully managed rag capability that allows you to customize your foundation model responses with that contextual and relevant data and uh where knowledge bases really help developers is it it automates the entire endtoend rag workflow so this includes data ingestion data retrieval and augmenting the prompt and so this eliminates the need for writing custom code to integrate these data sources to manage the queries and again it's uh something you can set up just from the console where you click a few buttons set set your data source and um and you have it go so for for example you can you can have an S3 bucket with you know hundreds or thousands of PDF files and maybe you want to make these available for your agent so that it can have more knowledge about whatever is in those in those PDF files um you set those in S3 you you go through the console you select that as your data source and then you set a few other options and then that be now becomes uh available to your agent so your agent can now query that that data and I'll get into how that works in a second cool so when you're starting with knowledge bases you start by selecting what um what what Vector store you want to use so our default is Amazon open search serverless uh but knowledge bases natively support uh postgress with PG Vector via Amazon Aurora also supports pine cone and a couple of other ones or if you have an existing database you can link it to one of those so you have a lot of options when it comes to um what what Vector database you want to use uh we already talked about S3 as a data source you can also use a a WebCrawler so if you want to crawl websites and set that on a iteration of uh you know crawling it every five minutes or something else like that it'll pull that out and it'll pull all that data in index it and all of that is managed for you uh you can also connect it with uh Native connectors which uh knowledge bases has and that's typically more for Enterprise data but I just want to mention it here uh things like Salesforce or if you're using Confluence or um SharePoint for example you can connect those automatically and have those be available from uh from your knowledge base so once you've defined what your vector store is once you've defined what your data source is then you need to define the chunking strategy and this is where the data the the data itself so if we go back to that PDF example um that PDF then gets chunked into many different chunks and added to the vector database and there's a bit of trial and error with figuring out the right chunking strategy and chunking is basically how big each how big how many um uh pieces you want to separate the the the document into how much overlap you want to have Within the chunks CU remember what we're trying to do here really is uh make it so that when a user queries or asks something related to this the knowledge base will be able to retrieve from the vector database something that is relevant and so we have some smart defaults but you can play around with it and see if if if you're getting the results you want and um and you can get even more advanced where not just um setting the chunk chunking size but you can actually go in and override the chunking itself and an example here is if you want to add metadata to each chunk right so that so that that could help with with um more semantic search right so instead of just indexing um the content of the PDF you can actually Supply additional metadata about that about that PDF and so that'll make it much more likely that it gets that it gets pulled in all that to say it's very easy to get this set up but if you want to get in the weeds you can also get in the weeds with a lot of this stuff cool um couple more things we continue to add new features uh to knowledge bases um yeah was there a question no all right there there is a question um from Mii um he asked can I return the logits uh probability for a prompt um I'm going to ask to save questions till the end because I just want to have the presentation be unbroken but would love to answer that question at the end and I forgot to mention this at the top thank you vaa for um speaking up there uh following this call we're going to have uh some office hours so that'll be a great time to ask uh questions like that or any other questions you have so we continue to add new features to knowledge bases uh recently we introduced Amazon Bedrock data Automation and that really helps you extract transform and generate structured data from multimodal content and so all of that gets automated for you and made available into your knowledge base and we also introduced graph rag which as the name suggests is it makes your data available in a graph database and so what that helps you do is start linking relationships uh for your entities across data sources so instead of just having one one view of of your data here and one view there you can start linking them together uh within a graph database uh the last thing I want to touch on uh not related to generative AI but because it's a ethereum hackathon it's a blockchain hackathon I want to share our public um blockchain data this is uh free data it's available on um AWS uh public data sets and it's a continuously updated set of data across three different blockchain or seven blockchain networks and uh and and the way to think about this is the data gets um gets gets parsed from the blockchain it gets put into an S3 bucket and then you can access that data from your application and the QR code here is a project that myself and Simon from my team worked on last summer where uh it's essentially a text tosql querying of this data and and so the way that that works is you get your prompt from the US user your llm we we U instructed the llm and made it uh aware of the of the of the schema that that is uh that that all the data um abides by and so then the when the user prompt comes in the large language model can say Okay so the user wants to know how many ethereum transactions there were yesterday and it knows which uh which which columns in the database map to that that type of question and it constructs a SQL query and then it goes and queries that so if you're building something where um uh where you want your agent to be aware of historic data um this could be a great way uh for for you to bring that that information in there cool and the last thing I'm going to leave you with is three uh three three QR codes here and these are uh for helping you get started so on the left is our documentation for Amazon Bedrock it's pretty broad I mean as we saw here we've got llm inference we've got knowledge bases we've got agents and so uh but that's a great place to start uh if you like uh YouTube videos we have a lot of YouTube videos there uh that's the one in the middle it's a stepbystep tutorial and if you're looking for open- Source samples of uh examples of what what uh projects have been built with uh Bedrock that's the that's the QR code on the right um it's a pretty broad set of applications um and and demos which have been built there and with that want to say thank you uh for for for listening and and watching and uh yeah let's turn it over to some questions if we have some K it's Alex uh I have a question so uh uh I was looking on Bedrock yesterday and as I understood deep seek R1 is not available as a uh server in in the serverless mode yeah so we need just deploy it on Sage maker which is expensive I saw that that it is available via Marketplace uh which would require you then to run it via Sage maker as a um just like I showed you in that in that screenshot where where you can select it so AWS Marketplace is where our customers can can offer their their products and services um which then can run on you know Sage maker or ec2 or something else that has nothing to do with bedrock Bedrock is completely separate from that so Bedrock is a service which we run um and manage ourselves and so deep seek is available within that as well yeah you in console is it available where AWS is De is DEC so can I quy uh programmatically uh so Bedrock is available via the SDK and I uh actually you just reminded me of something that okay I take it back this link on the left that is the best place to start I thought this would it it's different documents um it's a different page than than I recalled this is our developer Center I I should just update the title so I remember what it is it's our developer Center uh for bedrock and that is the best place to start because it's got tutorials it talks about the SDK and other things like that so to answer your question yes you can use Bedrock via the AWS SDK and when you're doing that you can you you specify the uh the label for the large language model which you want to use but there I can specify only model which aable as a serverless yeah in the serverless mode yes there is no other mode for Bedrock uh so DS is not available as a serverless so it is not available we SDK correct uh it if if we go back and look at that slide I'll be honest I have not actually played with bedrock uh deep seek but if we look at this slide here when you select deep seek here this is in Bedrock so all of this is serverless so this would should be available via the SDK meaning uh you can already use the SDK to run any of these other models and so to to use deep seek or any other model you basically just swap out the label um which you're using for the model now I haven't tried this out but in other models which I've tested with that's that's how it works but what is purpose than having this extra filter serverless so if so I tried to push serverless yesterday yeah and I didn't find deeps there in North Virginia region oh I see what you're talking about up there okay okay um yes then then I take it back then that is uh just available in the marketplace mhm but is there any plan to include it as a server L I don't know got it thank you great presentation oh I'd like add on to that um so deep seek is available on uh Bedrock but not on all regions for instance it's available in uh Us West 2 um but it's not available in Us East one okay um yes say you know that serverless Vara is that something you can find like is that is that also through the marketplace though or is that I'm looking at uh Bedrock I think um Alex was saying that he could find deep seek um in Bedrock um and you wouldn't be able to see it uh if you're in Us East one but in other regions such as us West 2 you'll be able to see it like this uh that like how you're showing it in the picture right now yeah so I think what Alex is saying is like if you can see my mouse up here there 's no serverless option for it so you have to run it through Marketplace which means you have to run it on uh Sage so you have to run you have to run compute yeah okay yeah yeah thank you maybe just because of region okay so I will I will check yeah my guess is um the region allows you to see what's on this screen here like if you're in a region where it's available you will see what's on this screen yeah yeah so it'll still be Marketplace yeah great um any other questions we got an open floor here I think Louise Angel has a question okay I can read it hello oh hello L I have mic okay awesome uh well hello Emil nice presentation by the way than look I'm a big AWS fan to be honest so when I noticed that there was a a bck as an opportunity of integration within the projects I was really interested into combining it with a coinbase agent kit so my question with this is would you believe that I would have any caveats in terms of integration with them because I've noticed that vrock has these capabilities when it comes to the llm processing and also the knowledge base which is quite good uh due to the thein uh purposes so I was really well trying to mixing out the opportunity of use that as the knowledge based processor over a coin based agent kit but I'm not too sure about how that could be well implemented yeah um I'm not super familiar with agent kit I did read the docs to try to get an understanding of it and uh the way I understood it was it's a uh very detailed instruction that is sort of optimized for one of the claw models I think I forget which one it was um so what you could do as a very simple test is take take what they have there and just provide that or just use um anthropic on on on bedrock and see if you get that to work I guess is your question more like would it work to use agent kit with with bedrock yes exactly um yeah I mean it I would imagine that that that they're open to sort of any any provider and so assuming that then you know they they they kind of give you the prompt which you need um again just from browsing the docs I haven't played around with actually trying to build agent kit but it seems like you just take that prompt feed it to your llm and then um and then that that has all the um capabilities what I'm not sure on is how you um what they do for like the actual uh functions and how that would tie into like um I guess I guess you're not you're you're not necessarily talking about using Bedrock agents so then the functions wouldn't necessarily come into play there because you're only asking about the inference so yeah from an inference standpoint it seems like it should work I I'm not aware of anyone who has tried it but I think that would be a really um cool project if you can kind of build something with that okay awesome thank you Amil yeah one thing um this is a uh uh repo that that I'm working on right now that uh hopefully will be published uh in a couple of weeks but it it basically equips an agent with a wallet and the wallet itself is fully managed by AWS Key Management service KMS and uh and and the great thing about that is uh you never have to manage private Keys you actually can't get the private key out of KMS but any evm uh compatible blockchain you can easily spin up a KMS um key for that agent and then you can sort of instruct your agent to say you know to get your wallet like get my wallet address and then you just have a Lambda function that gets the KMS key um does the formatting to sort of figure out what the ethereum wallet address is from that public key but then you use that key to to to sign transactions and so if you're thinking about like an automated agent that can go and you know invest in dii protocols automatically or autonomously without you having to prompt it every single time um that would be a super easy way to um to do it basically create a kmsk key as a wallet send it some funds and then just have it go and um invest or do whatever it's going to do awesome got it thank you cool thank you and then um Mii had a question earlier um would you like to get on um the microphone yeah can you hear me now yes uh yeah I had a quick question about whether you can return log logits for from the uh from a prompt I think that's like part of the open AI API so not sure if you guys have included that it might depend on the model or something but my other question is um would you recommend fine-tuning I think that's part of Bedrock but it feels like it would be a slower more expensive approach to take for agents um would you just recommend rag instead um so for the first question I'll be honest I'm not familiar with logits so uh can you just tell me a bit more about what that is oh um like if you have a prompt it'll give you the um it'll return like the probability of answering different pieces of text so it'll return like the top 10 responses and give you uh the probability of each yes yes so uh there's a couple of apis when you're invoking Bedrock models uh there's retrieve and there's retrieve and generate um and the difference there is the second one will formulate the response for you so it's sort of figures out what the best uh result is from that but the first one uh just sends you the results and then you formulate what the best response would be I don't know if that's exactly what you're looking for there sounds like yeah cool and then what was your second question again oh would you recommend fine tuning for agents or is that just too expensive and slow compared to rag um definitely do not recommend starting with with with fine-tuning um I think a lot of what what you would probably want to do can be fit into the context window and so rag I forget how many hundreds or thousands of books like the equivalent is that you can like feed it in a prompt um so I would always recommend starting starting with um Rag and then if yeah if it ends up not not not meeting your needs or something else then then you can go the fine tuning route um but but that is a much heavier process to do that and you don't necessarily gain much benefit in a lot of cases like like I shouldn't say gain benefit but you get the equivalent benefit by fine-tuning as if you were just using knowledge bases itself so happy to like if you start playing around with that and um you're um exploring it I'm happy to chat more about that too but I would definitely recommend starting with um KBS and not fine yeah I've heard similar advice so that's sounds uh bang on um is there a type of rag you would recommend would be best with code bases like uh you know you mentioned the I was the Chun rag what chunk graph rag you mean graph rag yeah sorry is that ideal for code bases because it would have you could have linkages between files or is there something else you'd recommend um that's a good question I actually don't know um are you in the Discord yeah I can ask there yeah if you ask there um that'll just be a reminder that we can go and ask it's a great question I don't know which um what would be a a great um answer to that but and then there's one more question um from pilby cool do you want to get on the mic or if you have yeah I could I could read it out sure oh I'm here sorry sorry so I will I wanted to ask um um if you have a for example organization website and all the content and documentation over there might be a mess kind of mess you know when time goes by and uh people add stuff it might be a mess sometimes not all always uh I'm not referring to any organization here but uh I I'm quite experienced um is it possible that AI agent would find the information for me and clean up the website and all the documentation and kind of get rid of Chunk and invalid info if it's kind of um adjusted to work like that I mean that it would be very interesting to to have a when you have a wider perspective on this subject you would have your private pool of information without any structure or organization any structure and you just put an AI to collect the information you need from your private pool and on the other hand it could uh even make searches in the web like it does right now did you get my point here I I think so I just want to confirm my understanding so you're asking can the agent make sense of a website that has some broken links and the text is kind of all over the place and you're not asking can you use the agent to sort of clean up the website and build it is that yes and U make a searches for me so that I don't have to go through the organizational structure over there and try to find some yeah that's EX exactly um where knowledge bases with web crawlers would be very um helpful there because essentially what you do let me just change the slid so we're actually on something that's like a bit more relevant um what you would do is um set up a data source for your knowledge base and your data source would be a WebCrawler and this is something you can do in the AWS console and so you create a knowledge base you select your uh Vector store and then you say I want to crawl I want my data source to be a web crawler and you point it to your to your website and you say sync and then it goes and um goes and starts uh scanning that that that that website and that data gets pulled automatically and ingested into a vector database and then on the other side uh when when a user uh makes their prompt we convert that prompt into embeddings and then we used embeddings to compare to the embeddings which were created when we ingested it from the website and matched uh uh uh in in the vector database and all of that stuff is handled for you in terms of the ingestion and all that stuff so um yeah after this call if you want to try it out it's uh it is really just something you can do from the from the console itself thank you and think about the IDE of private pool of information and data MH without any structure you have all the information that is related to you and your life and uh you are the owner of the data and then you have this kind of AI crawler or whatever and it's kind of uh making searches and uh taking care of this data when you need something you ask from AI to collect the needed information so that I don't have to be a organizer of my data and my information but AI works for me you know what could be an interesting simple way of doing that is I mean if you're data is very unstructured like say you have doc like for example like if you're making something about like like you want make a very personal agent and you're like I just want to put all my information make it available privately right like my tax documents my birth certificate like all this stuff or CSV files of I don't know whatever you track in CSV fil um you could put all of that stuff in an S3 bucket and that S3 bucket can be scoped down to only you or even less than that you can make it only available to the knowledge base and then as things get added to the S3 bucket the knowledge base ingestion gets automatically triggered and it pulls that that that new content in it chunks it it uh adds it to the vector database and then from that point forward um that's available to the agent or the llm inference um when you when you associate that llm inference with a knowledge base it can now start accessing that data um and so you would assuming it's it's it's private data we would need to think about how we restrict it to um to only that user and this is something which I didn't talk about here but with um with uh Bedrock you can you can uh specify like a session attribute right and that session attribute you can think of it as hey I'm I authenticated and I proved who I was and now for the duration of my Bedrock interactions you can think of like a a collection of key value pairs that get associated with every single request and then you can start using those key value pairs to um you know look at things like permissions say hey Amil logged in but you know he shouldn't be able to access anyone else's S3 bucket except except his oh great I'm such a lazy person I wouldn't like um you spend my time with documents and uh structure in web so that's why I'm asking there this kind of simple and uh kind of nice solution for a lazy person like me thank I think great idea yeah awesome thank you thank you for the question um I think Louise I think you had your hand up first yeah my question is really similar uh from what she already asked but in a different context in my case within my project I want to have the opportunity to uh let's say get a feedback from the input of the user in order to extend my knowledge base so I would like to understand that if I would like to for the agents whenever I I create the prompt and and so on uh how do I could be able to obtain the data from either text or possible images and trying to make the interpretations of that because the main purpose of my application just to give you context is for uh Veterinary Healthcare and it's often uh it's really often that whenever you have a a Veterinary talking to a pet owner the pet owner not necessarily going to give you the all hints about what could be the possible diagnose that pet has because uh people tends to have mixed emotions and so and and so on so one of the things that those people try to do always is to stick around to uh and my case I I see this as my possible knowledge base a couple of prompts or questions regarding uh how the pet was before you actually notice this situation uh did the pet was really sick or not things like that you know so yeah I was wondering uh how could I possibly receive more input data and try to well process that in the knowledge base in order to extend it uh do you have any recommendations in regard to data source or do you believe I would need index when you say to get more more more input data you mean like when a user is using it like to prompt them for more information and then to add that to the C oh like I see so like building a profile of the user's pet and then you can use that later on as exactly yeah the people that would use that later on would be the user Veterinary in this case as the as far as I see it yeah um it depends what you're looking to do with that data because one thing to keep in mind is uh with all of this is relational databases are still really really useful right and so as you're describing that that that use case I could imagine that that information about the pet being uh stored in a structured database right um because when you're looking up that that that user's information you always want that dog you don't want like a similarity match where it's like a 99% chance could be that person's dog or it might be someone else's totally because that's not going to help anyone um so if you're looking to capture more information I would i' I'd have to learn more about your actual application but from what you describe you could look at just putting that in a you know RDS mySQL database postgress something like that Dynamo DB something very simple and then when when the user is interacting um you can bring that that information in and what I was mentioning earlier about the session attributes you can even imagine that being um added as part of the the added to the Bedrock session is like all this information about the pet and then in your um in your uh uh inference you pull that that information out and now when you're querying your knowledge base you can say okay give me common ailments for Chihuahuas because you now know that the context is around a Chihuahua so I don't know hopefully that that helps um it's yeah would you I I could uh ask you more questions in the Discord just to give Alex the opportunity to ask if I can yeah of course yeah thank you Miss yeah uh yeah thank you uh em I wonder is it uh such possibility to partitioning uh knowledge base I mean Vector space so from the documentation there is an option to provide and do filtering by some meta information Meta Meta data attribute uh but it's only for RDS as as I know uh server l Vector databas is available only for open search mhm is there option so my use case is that I create a knowledge base yeah and I am I should share it between users but only after some I don't know payments or so so for example I will go and see okay for this user we have uh such number of vectors yeah it's like white labeling partitioning Vector knowled so you would want the user to access some of the knowledge base but once they've paid maybe they access all of it or is it an All or Nothing uh no no no no so there will be many owners each owner has its own knowledge base subn knowledge base yeah and they can share sell this knowledge base between others so uh when user someone uh buy uh the knowledge base it will be available for his search so he can buy one or two knowledge bases but all of them should be stored in one I don't know Vector database yeah so open search I guess my question is why would they need to be in the same knowledge base because I think it will be uh so for example if we will have uh 10,000 users yeah it's not good idea to create 10,000 instances of databases yeah I see yeah I I don't know the answer to your question um I don't know about partitioning and especially especially where it's um different based on different entities that are are adding the data to it if you don't mind um just writing up the question and posting in Discord um we can we can look it up and get back to you and yeah and just as much as you can share about what it is that you're trying to do um I think will help um so you already described your use case um so that's that's that's very helpful are you in Discord uh yeah in the partner AWS uh Channel okay right thanks again thank you much session yep awesome any other questions I do have to pop in here um if you guys have any other further questions we will have to direct them to the Discord um unfortunately we have a workshop coming up right after this otherwise we could stay in here all day um such incredible info from Emil basil with AWS teaching you guys how to build gen AI applications with Amazon Bedrock um Emil if you want to confirm you will be in the Discord if people have direct questions for you yes myself and a lot of other folks from AWS so okay incredible we will see you guys over there in the Discord and this video will also be available for you guys throughout the duration of the hackathon on our YouTube that playlist is just right on the homepage of the eth global YouTube so thank you again Emil for your time yes and eth Global we are good to"
    },
    {
        "title": "Base 🛠️ An Overview of Building with AI on Base - Agentic Ethereum 2025",
        "video_id": "QUlMQNLdytI",
        "transcript": "everyone I am going to admit more folks to the call so just stand by can't believe it's already like well February 4th January felt like it was about nine months so like cool I think uh we are good to start the session and I'm sure a lot of people who are in the waiting room we just keep admitting them and um so yeah hello everyone and welcome to the agent dium 2025 Workshop title and overview of building with AI on base uh joining us today is Will who will be taking us through this session and with that I'll pass it over to will to get the session started break yeah thanks Calvin what's up you all thanks so much for coming here hanging out today being part of this Workshop also for folks that are going to watch this recording later and everybody just participating in this agentic ethereum uh hackathon I think this is probably like one of the uh best times I've ever seen to be building uh on chain just uh quickly like a little bit about myself I've been in this space since about 2013 I started in Bitcoin and that naturally led me over into ethereum um and I I think back like uh I feel like there's parallels in time and and where we're at right now kind of reminds me of like around in 2007 uh where just in the space span of about like six to 12 months we saw like the whole internet change right in front of our eyes uh with the launch of the iPhone we came from this era of dumb phones where we all kind of had these uh phones that maybe you could play snake on it or like use your thumbs to send some uh short messages on the keypad and then the iPhone came out and then we just had like all kinds of apps we could get on the internet and we had so many apps for like things we didn't even need like I had an app for like I could like measure like level of painting on my wall I was like this is the coolest thing ever never used it for that and we're like in this era right now building on chain where because uh thanks to advances like scaling ethereum it's super cheap to do things on L2 on Bas it's super fast transactions confirm in two seconds it's even going to get slower just where it's like even recognizable the delay and so essentially now whereas the iPhone opens us up to a new internet in the palm of our hands with the technology that we're part of right now we're part of a new open Internet that anybody can be part of anyone can transact with each other anyone can build anything that another person can use and it doesn't matter what country you're from it doesn't matter what your skin color your gender your political affiliation is we're all part of this like Community that's the biggest it's ever been and we have a system that's completely disrupting these old Antiquated systems that all you got to do is look at the news to see that they're just not working anymore and so um just wanted to open with that because it really is I feel like regardless of prices going up or down it's it's in my opinion one of the best times to build and so uh that said let's talk about building on chain on base making some kick-ass AI applications so um I'm going to share my screen and I'm going to go pretty quick through this we only have about like 25 minutes um and so the the key on this is just to give you all the the checkpoints and all of this where you can reference this material as part of the agentic ethereum hackathon and bookmark it for other apps that you're going to do in the future other ideas you want to hack out so um I'm also going to save some time at the end for this uh so I'm going to go ahead and share my screen here let me just double check uh can everybody see my screen okay just want to double check I get like a thumbs up I'm gonna do my whole screen as opposed to the uh tab um because I'm gonna be clicking fast thanks for the thumbs up there so uh as I said I'm will I'm one of the core team members on bass um if you haven't heard of bass just quick tldr bass is an L2 on top of ethereum we roll up our transactions onto ethereum we do that so that taking advantage of ethereum security all the scaling work that's been done in addition to that we can do things really inexpensively and fast and so uh just for example like if you want to send eth on ethereum uh you know it's it's like been times where it's like okay I'm not going to use this to buy a cup of coffee um on base it's like fractions of a cent that transaction fee using uh things like pay masters which I'll I'll chat a little bit about it's even possible to like sponsor transactions for apps that you're building especially agentic caps where people using that don't even have to pay any transaction fees so um but yeah that's essentially in a nutshell we're in L2 on top of ethereum making ethereum even faster uh and inexpensive to use to make it as easy as possible to put the world on chain and so um this is b.org highly recommend just bookmarking this p P this is going to be a great go-to it's going to lead to like all these other things that um I'm going to be clicking through um good place just here to spend about uh two three minutes just scrolling around just for a quick TLD drr on what we're doing the next thing I wanted to show uh is it's very very very important that if you haven't already done so and you're participating in this agentic ethereum hackathon that you've joined the eth global Discord we have a base channel here we're answering questions you can see I'm in here earlier today also we we're uh dropping all kinds of AO on folk so if you need that come in there hit me up say hey W BS like uh however I can help we're here to help you um also great East Global folks are here um a lot of the great other uh networks we're all building uh something really awesome together here like on Bas we're not like looking at one chain being better than the other in the future people aren't even going to ize what network they're on they're just going to realize that they're part of something that is open to everyone so get in here please if you haven't already done so specifically for Bas we also have our own Discord uh it's b.org Discord um there's probably I think about 425,000 people have joined this Discord at any given point in time there's usually around 25,000 people online this is one of the best places that you can say to come connect with other people that are doing things on base and as a builder this is one of the most important places that you can be to connect with people that are going to potentially use the app that you've built also to look at hey what are people doing and engaging with these other apps that people are building we have all kinds of great opportunities in here to connect with users and also great opportunities to connect with us on the base team for example you need Technical Support I'm in here other people from the devell team are in here if you need uh ecosystem support you've built something like how do you connect this with trying to get Amplified like from the Bas uh X accounts almost got like a million followers like how can we help support you all potentially with grants other things like that this is the place to be so definitely b.org Discord um the next place I wanted to highlight if you're somebody that has never used forecaster before I highly highly recommend that you create an account you can go to warp cast.com here I'm looking at the base Channel forecaster is kind of like a mashup between X and Reddit you have like the uh short feed where you can send short messages like on X and then you also have channels like you see the equivalent being maybe like subreddits on Reddit and so the reason why it's important that you're on here if you're building on chain is because almost all the users on this platform are purely doing things on chain so if you're wanting to connect with an audience that's going to have like a really high conversion rate for doing something with your app this is the best place to be talking to people building relationships building Community around what you're doing if you go to x you post something out there you go to another platform Facebook or something like that there's always going to be a proportion of people that haven't done anything on chain yet and just by comparison I was just reading an article maybe over the holidays right around the beginning of the year 90% of the world hasn't even held any crypto yet even though a lot of us here have been in this space for a super long time that's how much work we still have to do that's how much the world still hasn't connected to what we're doing so forecaster is a really great way to get that really early group of users that's going to create that Network effect of other people around them their peers friends family Etc that are going to come on chain oh yeah my friend told me about this I'm gonna check out this app so this is a really great distill of folks that can connect with your app give you feedback that are then going to spread out to other people that going to maybe be coming on chain for the first time using what you've built uh next super important page that I wanted to highlight here it's docs.bmc.com to building on chain that's okay all of us in some type of aspect are new we're a beginner at something and so it's all relative but if you're completely new you've never built anything on chain before it's going to be challenging in this agentic ethereum hackathon but that's okay like part of a hackathon is is getting in there and feeling like hey I I have no idea what the hell I'm doing that's life we all have that like I don't know what the hell I'm doing moment and all kinds of things and so that said come over here to Doc base. org check out underlearn learn to build on chain this is completely free and so it's going to be really hard in the context of this agentic ethereum haathon but bookmark this come back to this and just start you know like doing some of that like slow ramp up work after the fact you can still I'm going to show you some things here that are going to allow you to get started building some things like you there's plenty of things you can like copy pasta to do things that previously like six to 12 months ago would not have been possible because there's no code there's no reference to be able to ship something out that still has a chance of being competitive in different ways or in the future being modified that's something that's going to start getting traction making some Revenue paying you things that people are actually going to start to use so bookmark this page or if you have friends that are like oh I wish that I could have done that hackathon send them to this page and say well there's going to be others because like as Calvin was saying before we started recording like hey nice to see you again we do these hackathons base works with eth global we sponsor these prizes and so um it's just a really good opportunity to to also connect like your peers if they want to be part of the future ones um next if you want to if you're like already like hey yeah I just actually forked Unis swap um like I'm super pro this said my first rodeo uh but you haven't built anything on bass before um docs. b.org dos that I'm looking at right now is going to be your quick tldr on just different things going to be helpful to you specifically like our tools um bass has really really really great uh tooling around it there's just like all kinds of different third-party um platforms tools libraries that support base so this is a great place this probably spend about maybe 5 to 10 minutes today if you haven't already been here you're already starting to um come together with your idea to uh start to connect the dots like hey I don't want to build my own index here like that might take me about a week uh there's a ton of like indexers that already support base so this is just gonna like um help you really fill out that stack without um having to do a lot of that like from scratch work so uh and then the last thing if you're like kind of uh in between um you know super uh Shadow super coder and super new uh to this space our Tut tutorials is kind of like a middle area uh that I would also recommend spending some time in uh this is just going to be like a way if you want to spend like maybe if you have an idea right now but you're just like you don't really have the mental M model for like how these pieces um might fit together this tutorials page is just going to like you could spend maybe an afternoon today it's you're going to level up a lot um if you're kind of new to building on chain but you've done a lot of stuff in web 2 you're going to level up a lot just doing like maybe a few of these different ones about like deploying a smart contract or or like starting to see like how some of these different uh third party tools especially work with an onchain app um I'd highly recommend uh getting in here and so that's docs. b.org now so we've been talking about some different things here uh just in general about base but this is an agentic ethereum hackathon so let's talk about some AI um first off I wanted to take you all over to um the coinbase developer platform and over there you all have a really unfair Advantage uh for participating in this agent hackathon because coinbase has a really good toolkit for building with AI on ethereum on base and it's called Agent kit and so uh right here this is docs. cp. coinbase.com Agent kit I would highly recommend bookmarking this page because like I said it's an unfair Advantage everybody has access to this so it's like I'm I'm being some sarcastic because if we've been doing this like trying to figure out how to do this maybe six months ago this stuff just wouldn't exist and it'd be a huge pain in the ass figuring out like I have an idea but I have no idea how I'm going to connect this stack together check out agent kit and so alongside this just even this past weekend um coinbase had an onchain AI weekend in San Francisco doing a hackathon and so this second unfair Advantage you have here is on this page is a hackathon guide so it says building with agent kit this weekend yes building this week in the agentic ethereum hackathon so 100% please come to this page because it's Gonna Save you like days of work figuring out things so that you can just get to the execution phase of your idea and so um this is is like I I get kind of geeky about this page because it just like I love doing these hackathons and and one of the hardest parts like I know like you know being a builder wanted to be part of this is like getting out of that idea phase and there's never any time like at the end like oh I got to do this there's not any time this is gonna give you all that extra time um and so it makes me excited because I feel like uh as I was saying at the beginning this is like one of the best times to build where I feel like in this AIC ethereum hackathon at the end of this we're gonna be like holy look what these people built because uh you for yall that have been in hackathons before there's usually like a large uh spectrum of like quality projects I think we're getting to a point like in onchain app development where it's like some people are gonna be like I don't know I see some of the apps coming out of these like how am I going to compete and I think that's great because we really need these super awesome reference apps and that like levels everyone else up it's kind of like that Rising tide lifts all boats effect so uh again here's agent kit check out this hackathon guide and then I I just love this um page because it it just breaks this all out um so if you spent like the rest of today just going through here checking out the API docs for python typescript it's really going to give you everything um you need and then there's also like a showed you the um base Discord coinbase developer platform also has a Discord and they have a channel dedicated to agent kits so if you're like building with this you you have the unfair advantage of having this like as your toolkit to supplement the execution of your idea and then you're also going to have a channel dedicated to using this toolkit so um and then I just also would encourage you like as part of this um hack like right now you know a lot of y'all are like in hacker mode uh it's also a great opportunity to be thinking about how am I going to take this idea and then go to uh go into like founder mode like where like maybe I'm gonna win maybe I'm gonna get really close uh to getting my idea out but I don't win a prize like in the bass trck but like I'm gonna build a legit project I want to go full-time on my job right now the president's launching tokens his wife's launching tokens like what's happened in the last two months in the United States like is just to me I I'm almost like this is crazy um since I've been in the space since 2013 I've never seen such a fast change in the space uh where so many people are coming in so it's like also a great opportunity to think about like okay right now I'm in hacker mode but like how do I want to be taking advantage of this and like I want to become a sovereign individual I want to work for myself I want to be able to work from wherever I want I don't want somebody telling me hey you live here this is what your salary is going to be I'm going to build my own thing it might not be easy but I'm going to be in complete control over my own life and launch my own project and so like if you can do that I don't think it matters if you win a prize in this hackathon you won the prize like you won the prize of life so I'd be thinking about that um alongside this really quickly like uh we don't have a lot of time we're only doing a half hour uh Workshop here but I wanted to click through uh a couple more things and then save some time uh for questions the next thing I wanted to show you is a good supplement to agent kit is onchain kit and this is onchain kit. XYZ essentially like this is going to give you a template for launching like a full stack app that you can then bolt agent kit onto so if you want like a a cool you know web page that people are going to be going and interacting with like on chain kit is gonna give you that where literally just you know in minutes all of a sudden you're gonna have a fully deployed um app like reference app you can use this template here um that like I just again going back six to 12 months like this stuff just didn't exist so you see people with like oh I got the GitHub repo together here's what I want to do or here's my figma here's here's like a screencast like how this might work like this is going to give people um um that huge level up to where like you can have something live people can use you use this hackathon to get that idea out there and um you know here middle of February you have an app that like is live on mainnet that's potentially making you money so um here's that onchain app template uh that I clicked on when I went to template uh in the top like you can just clone this and then it's going to give you like an app uh that's you know you can connect your wallet it's handle transactions it's going to have a swap component that automatically like people can trade tokens on your app so it's just like again you'd be spending days figuring this out if it didn't already exist um last thing uh really quickly if you go to my X it's x.com WBS I put a link to this um there's like almost 50 different um AI like agentic apps on bass already like give this a scroll through because this is going to give you a really good frame of reference on what like other people are doing and it's going to give you like that intel if you kind of have an idea right now like check out some of these other categories and see like oh okay like this one app that's similar to my idea like here oh I see what wow that looks like that's working really good so it's gonna like save you um like people that launch first they have like you know the so-called first mover Advantage but there's also an advantage to moving after the first mover because you can see oh they went that way that worked good I think I can do this better and it might work really well so take that approach um and then just in general uh this last thing here is the uh b.org ecosystem page so if you check out like that list of like almost 50 different agentic apps you can also go in through our b.org ecosystem page and see how you can combine something agentic with like maybe one of these app ideas where um all of a sudden like there's hundreds of apps here so even if you don't have an idea right now you know you want to be part of this hackathon like go check out um the agentic apps on base and then come here to like b.org ecosystem spend an hour just clicking around and you I guarantee you're gonna start to get like that's kind of a cool idea and and stick with that like idea that's interesting to you like I wish I could use something like that like that'd be cool if I could add AI to something like a or the there's all kinds of different possibilities there so uh anyways yeah that's uh that's it in Nut Show I feel like we could have done like a like a two or threeh hour um workshop on this and I I really would uh like that so uh anyways but this isn't the end let's keep the conversation going come over to the the base Channel and the eth global Discord let's keep talking about it like if you have some ideas you want to talk about anything that I covered just in this really high level Workshop um I'm there for you the rest of the base team's there for you and um yeah thanks for thanks for joining today live and then people that are watching the recording thanks for for giving this a look and um we'll see you so wanted to save some time for questions if we have any looks like quite a few messages in the uh chat oh C Calvin you're awesome thank you so much for uh posting the uh the takeaways have the notaker in there from otter this cool yeah I think there's like a bunch of questions which I can see from Rob um I mean if you want I can just take it over uh which is when the judging for base boun is be separate from cdp's own judging process yeah yeah it will it will exactly so one of the cool things here is you can submit for prizes and potentially qualify in two different tracks so like CDP like it's also supports Bas so like it's it's kind of like a level up there like ah maybe I'm gonna maybe you'll win in Basse but not in CB CDP maybe you'll winning both like um absolutely I'm gonna also scroll through here uh okay I'm just going to start rolling through these I see Calvin answered the question about the Bas Discord if anybody missed that it's b.org Discord um I saw that question about judging you it's so base is separate from CDP um Lis angel said is coinbase Agent kit and onchain kit able to interact with AWS Amazon Bedrock service that's uh yeah you could definitely decompose either those agent kits uh either agent kit or onchain kit to be able to work there um that would also be a really cool project because I bet if you paved that road that would be helpful to other developers that might want to utilize AWS in their own Stacks um Flo said can we have the link with the existing AI projects you showed before yes um if you go to x.com wbn NS uh it's at the top of my feed I'm also going to add this link to the uh because I just put it together earlier today I'm going to add it to the base uh prizes page under resources so if you just go click on base for prizes uh just look under there and I'll add it there that way you don't even have to uh look through my X um so I'll put that there I see our um notes getting posted in here just going to scroll through what else we got uh X handle yeah it's WB nns sobody was asking and um in terms of costs Victor was asking which AI or API model is more recommended that's a great question um I feel like it's pretty inexpensive to like as a developer right now to be building um with these I think they're both competitive like the you know like the leading ones um open I um anthropic I feel like those probably be two good ones to start with um it in like a hackathon setting I I hesitate to say that it's like cheap um because there are like some parts it's actually hard to sign up for the API but I would I would start with those um what else we got here I'm having a little trouble scrolling through the the notes let's see in order to use the kit should I have a wallet made in coinbase for testing purposes uh so Lis Angel was saying this no you don't need to uh have a wallet made in coinbase onchain kit uh is gonna actually create that wallet for any user that comes to your app it uses uh what we call Smart wallet which means that anybody that uses your app they actually don't even have to go download an extension uh install an app on their phone it actually uses this the pass key similarly to like these days when you log in and maybe like Gmail um you just authorize it with your device that same thing creates a wallet now in browser so it's super cool it removes that barrier um dragos uh said repeating the question here um the onchain kit templates have some utility for swapping tokens yes dragos they absolutely do how does this work on testet it works on testnet so um you come in the base channel uh on eth global I can give you some spolia eth um the onchain onchain kit. XYZ site has great docs on there that'll help you set up and it's called swap it's called the swap component um so these are all like react components and so it's called Swap and so you can try that out um and then Flo was asking can you tell us about the different ways to sponsor uh gas fees on base and so uh yes in particular for that if you go to the um the CDP docs that I talked about uh earlier I'm going to post this in the uh chat there's a section of the CDP doc called paymaster I'm posting this in the chat right now and so that's got some really great um code samples and references for like how you can sponsor gas you can also fill out a form there where we'll even give you credits if you qualify where we'll sponsor the gas for you so you can get into this like iterative Alpha phase where you just want to prototype stuff you don't have to like foot the bill on setting aside some eth sponsor transactions fill out the gas credit application form on that link uh and you can potentially qualify that we will do it for you um Lise angel had one more question and said in my application I would like to build my smart contracts with flow will I have problems to use it alongside agent kit and on chain kit um I definitely think agent kit should be uh composable there uh like to incorporate with flow um on chain kit I'm not sure um about the network support there for flow so um that might be a consideration to take um and then I see one more question from Flo uh pay masters are only for smart wallets no they're actually you can also use them for um coinbase wallet wallet extension rainbow wallet metam mask so it's not just um not just for uh smart wallets yeah looks like um kind of got to the end of the questions we went over a little bit so thank you and I was just going to end by saying if you have other questions you're watching this uh later come on by the eth global Discord I'm in the bass partner Channel come to the bass Discord message me on uh X and uh no stress we're here to uh help support you all sweet thank you so much for joining us today will and for your great presentation thanks for taking your time I know you have a schedule uh but yeah uh this is really cool and I believe a lot of folks who have joined on YouTube which is this is being live streamed on YouTube so I believe they might have some questions so make sure as will mentioned feel free to connect with Will on the base partner Channel and yeah they will definitely get back to you as soon as possible so thanks so much Calvin I really appreciate y'all uh letting me be here e Global is awesome and um y'all are all awesome out there it's so so cool like let's really build some cool y'all because it's just a great time to be in this space um hope you all have a good one see you all on Jane yep have"
    },
    {
        "title": "Agentic Ethereum Kick-off",
        "video_id": "96n0WKW40A4",
        "transcript": "e e e e e e [Music] [Music] [Music] [Music] [Music] he [Music] [Music] [Music] good morning good afternoon and good evening everybody my name is cark one of the co-founders of eth global and I'm super excited to welcome all of you to agentic ethereum all of you are watching this on E global. TV this is the platform we'll be using for the rest of this hackathon where we'll cover all things that are happening for the next two weeks that includes all the content workshops this opening ceremony kickoff and also the closing ceremonies where you get to see all the amazing projects that came out of this so be sure to log in say hi chat on the box here and feel free to ask us any questions this is live interactive platform so anything you put in the chat box we'll be able to see and respond to now you are here at a need Global event and for those of you who are joining us for the very first time e Global is an organization with a very simple Mission our goal is to onboard thousands of developers into the weet 3 ecosystem and we do this by running hackathons and Summits both in person and async we're going to have a summit next week that's going to be on E global. TV and that's going to cover all things that are happening with crypto and a I so tune in Next Friday at 12:00 p.m. Eastern to see all the interesting things that are happening in our space and the next thing I want to cover here in this kickoff is telling you all about the hackathon and what to expect and some things that we'd love for you to know this is our first hackathon of 2025 Happy New Year to those of who are joining us and not only that this is our also first AI aath we're seeing so many incredible things being built in this space and we just had to do it and bring together the best of everything that's happening in crypto and the world of Agents there's over 1500 people from 90 different countries hacking at this event and they span across 25 different time zones we put everybody on a map to see all the cities and countries being represented and it's awesome to see participants from six different continents so we can't wait to see what all of you are going to be exciting to build here and meet all of you so uh don't be afraid to say hi and chat with the rest of the global team and myself and uh I'm looking forward to seeing a lot of new faces building the next big thing not only do we have 1500 hackers we also have 66 ecosystem mentors these are founders developer relations Engineers designers product Managers from all of our incredible ecosystem companies and seven dedicated mentors who are there to help you and directly address any technical questions to make sure that you are never blocked from working on your project and the best part of all this is that we have over $175,000 in prizes we're going to give away we're going to learn about what those prizes are very soon but let's go into some of the info about who some of our partners are and what you can build using some of their platforms and save yourselves a lot of times so with 18 incredible Partners I want to thank autonome coin bu developer platform igen layer nether mine our arbm base flow guy and collab land coent the graph lit Nan obsc privy Warden cresto AWS cive all these companies are here helping you be successful in building the best AI hacks and we'll learn about the prizes they're giving away in just a few minutes so the next thing I want to cover is how to take advantage of the next two weeks and some things that you need to know about how this async event is set up we're going to cover what it means to form a team how you can get help officially we're going to cover all the prizes of course we're going to talk about what the summit the talks in the workshops that are happening and then the most important part which is how do you prepare yourself for judging so let's talk about communication here everything that's happening for this hackathon is going to be on Discord this is where you can interact with all the, 1500 plus hackers and our 67 partners and these are all private channels which are automatically controlled for just the people participating in agentic ethereum so if you're a hacker click on this connect to Discord button on your hacker dashboard and you'll get all the right permissions and you'll be able to see what the left tab shows here which is an agentic ethereum category and all the right channels about this event the cool thing to note about this is there are dedicated channels for talking to different partners which are different protocols and companies in the space and also for mentorship and you get to also learn about all the updates for what's happening with the rest of the hackathon and any deadlines so you literally get to ask any company how to use something and if you're getting any error messages or if you're stuck you get help from the people who built those Frameworks directly on top of that for every workshop and deadline that you need to know you have a direct calendar invite in your inbox you can just see what's going on is normalized to your own time zones you never have to worry about understanding and doing any conversion on the time zones the schedule for everything that's going to happen is on the website that'll be our source of Truth and really want this thing to be asynchronous this is an event with people from all across the world and we want to make sure that you are not in any situation where you have to keep up or stay up or wake up early and uh try to catch up on what's Happening everything that we're going to talk about whether it's a workshop or a talk or a summit or even this kickoff is live streamed and recorded and will be made instantly available as soon as it ends so for those of you who are in a different time zone you can catch up by just heading over to the website and clicking the play button from the schedule section to simplify a lot of this you can just head over to e global. it'll take you right to the event page and that'll show you all the things about the schedule the prizes and everything else you need to know about this hackathon so now let's talk about how this hackathon works and how things are set up hacking officially begins now you can start working working on your projects as of now and you have the next one and a half weeks to work on and submit your projects you can work on your project with a team of up to five members that means you can have anywhere from one two three four and five people working on a project and submissions are due at 12: PM noon eastern time on Sunday February 9th now let's talk about some important things around the rules for being qualified to win any prizes and being in eligible submission for this hackathon anything that you build for this event must be done from scratch this means you cannot build from a pre-existing project you cannot add a feature to something you've been working on in the past it has to be a fresh start so that it's fair to everybody participating there's over 1500 of you and only people who have rsvpd and are listed on the team section on our hacker dashboard are eligible to win any prizes which means we'll be doing the checks to make sure that nobody committed on the repo that was not a listed team member and if somebody is found to violate this requirement they will be automatically disqualified it is absolutely okay to use open source Frameworks and boilerplate codes so things like popular AI repositories for getting started or of course starter repost for anything building on web 3 those are absolutely okay for you to Fork and build off top uh but you cannot add something that you've been working on yourself before unless it's been cleared with the global team and it's part of an existing open source license there's a lot of edge cases there we run into and if you are in one of those categories please ping us and share more details about what you're working on and if you are not sure if that violates the rules or not and we'll be happy to clarify this for you now as you submit a project you'll be given a choice to be a finalist now what does that mean this means that this hackathon will have 10 finalist teams and these are the 10 best projects from this event being a finalist does not change anything related to winning a prize from our partners which is listed on the website and in addition to any of the partner prizes being one of the top 10 teams for agentic ethereum means you get additional prizes and works and you get to live stream your demo to everybody who participated in this event and really show off the amazing things that you've built over the the one next one and a half weeks now the conditions to be a final list are as follows everything you do must also be done from scratch and it must have an auditable GitHub repository history which means you cannot have one commit of a 100,000 lines with somebody who is not a verified member on the hacker dashboard from the GitHub you must be following the right ways to commit code which is anywhere from using pull request to branches to having all the commit members uh team members commit the right things share context on what this commit does and have proper proof of working on this project without copying things or doing things in bulk or using non-best standard practices for using Source control your project must also be open source and deployed and live which means there needs to be a functional website and it needs to be deployed on chain you cannot submit a local host project and be qualified for being a finalist and to actually be qualified you have to be part of the live judging which means that if you are trying to be one of the top 10 teams from the hackathon you have to come on in a zoom call and demo your hack to our judges in a live chat where they get to ask you questions and see the demo of what you built now we want to make sure that the finalists actually are the best projects from this team and in addition to all the partner prizes they'll be eligible for you're going to be receiving the eth global agentic ethereum finalist pack this is going to be an onchain contract that lets you claim a lot of amazing things and these things are as follows this is just a few of them and that is e Global plus you get free one-year access for e Global plus and that gives you a lot more onchain features like the ability to get gas reimbursements access to thousands of events or hundreds of events being able to get free domain names and onchain subscriptions we also are going to be giving every member for the finalist a $1,000 usdc cash reward and a $500 Flight Credit to the next Global hackathon this year and you're also going to be able to show off that you are one of the top 10 teams for from the global AI hackathon with an onchain proof that can be used anywhere as a 721 contract and all the finalist team members will also have access to private events which are brunches lunches and dinners with the top crypto Founders in person across the globe and over $15,000 in developer credit so you can continue building your projects so you don't have to worry about things like where do I deploy things or what is the best and most performant RPC URL I can use or how do I allow people to do trading super fast without offering too many ways to kind of limit that experience in the number of tokens supported and giving the best apis for trading so that's what being a top 10 team means but let's talk about what it means to judge a project and a submitting a right project submissions are due on Sunday the 9th at 12:00 pm Eastern when you are getting ready to submit you'll be asked to make a 4minute recording of your demo this means you have 4 minutes to make the best version of a video that shows what you built why why you're excited about it how it works and everything in between and really bring out the context everybody needs on the other side to understand what you were trying to do and how it works this is a requirement everyone must submit a 4 minute video and this is the only thing that'll qualify you to win any prize we've been doing this thing for years and our top advice here is that you should not do this thing last minute even if it sounds like a quick form in a video it'll take you at least 30 minutes if not 60 Minutes to make a really concise 4 minute submission that really makes it easy for you to communicate what you've been doing and how and dedicate a lot of time to it working demo that everybody can understand easily all this happens on your dashboard on your hacker page on the global website so you have to worry about anything else you just have to make sure you get to record a good video and then you drag and drop that file and that gets attached to your submission after you upload the video you'll be asked to pick a track and the two choices you have are being a finalist which is the top 10 team and being only selected for the partner prize and that is an asynchronous track whereas the top 10 track is two rounds and one of them is synchronous so what does that actually mean that means if you are trying to be a top 10 team which is a finalist once you select that you will be automatically entered into the first round of the finalist judging and that means we'll be reviewing all of your for and videos async we'll be looking at your live demos we'll be looking at understanding the GitHub code and if it's following best practice practices and how well you're communicating and how easy it is to understand what you built after that first round on Monday you'll be notified to join the live judging for the next step of the teams to now be entered into being the top 10 from that selected batch so round two of finalist judging is a live Zoom call which happens from 12: p.m. to 2:30 p.m. Eastern where all the selected teams from round one will come on and demo to our judges now the thing to keep in mind here is that this is a live Zoom call and that is going to be only one of them which means if you are in a different time zone where it's not as convenient for you to J hop on either you are disqualifying yourself from being a considered top 10 team or you will have to make it to this call at this exact time and only then you'll be able to qualify for being a top 10 team this call is where you demo your fortive video to the judges and then they'll have three more minutes to ask you questions and ask any follow-ups and also they'll get to play around with your demo or your website and look at and evaluate the projects to be a top 10 team you have to be part of this call and that is the qualification for being a finalist if you choose to only go for the partner price judging that means there's no call requirement for you to be on all the partners will be given a list of all the teams that want to qualify for their prize and they'll be looking at all the submissions on their own and they will reach out to you if they have any questions or if they need any clarifications this means you have to specify which prize you're going for and if you forget to include this thing there's no way for us or the partner on the other end to know that you wanted to win and qualif one of their prizes so make sure that you get to do all these things really specifically and another key thing to point out here is that you have a limit of only four prizes you can apply for for these hackathons so you want to really choose which Integrations you want to go for and focus on making something really powerful instead of trying to integrate as many things as possible and diluting the experience and adding on more time to build the things that you've been trying to do having done this thing for thousands of projects if there's one takeaway that we can give you for being successful for the haathon is make the video good these four minutes is the best representation of who you are as a team what you represent what you built and why it matters to everybody watching this whether it's other hackers or our judges or anybody else on the internet that you want to share your hard work to making this video really good concise and expressive is the best odds chance you have to get the recognition that you deserve and also qualify for a lot of prizes so do take the time ahead of schedule to see what a good video looks like and we have so many resources on our judges page in the infocor to get familiar with what a good video looks like and what the past top 10 teams have done for hackathons last year and the past years before and of course we understand this if is open to everybody from all different kinds of experiences so it's okay if you're new to all of this we have a lot of things planned here for everybody who is an intermediate or beginner to who is Advanced and we want to make sure that you have the right help to get familiar with being successful for this haathon and that means there's a lot of content for beginners and experts you can literally learn about how to use every protocol here and use not only just direct code that you can just start off and and copy and build on top of but anybody who's given a workshop here is directly accessible to you on Discord and you can ask them followup questions about their workshops and there's over a thousand videos on how to use every protocol on our YouTube channel you can just literally watch how to use something how something works behind the hood pause things kind of go deeper see the code and literally soak in everything you can learn about what's happening in Ai and also specifically in crypto not just about the coding piece we also have a summit next Friday which is going to include Founders who are building the next big things that overlap and intersect with crypto and AI so you'll also get to hear from the top project in this space sharing where they think the world is going and there's a lot of content for beginners in terms of resources from Best code-based Practices to resources to how to write something really well in solidity all that stuff is in the info center that is on your hacker dashboard and anything that we got we're going to talk about publicly which is a workshop talk interview Summit ceremonies all those things are going to be made instantly available on our YouTube so youtube.com Global is the place to be and you can catch up on anything that you want in crypto there we are of course also going to help all of you get to explore different ideas and find different team members there are already a a lot of people who are still looking for team to join or others to join their teams so you can head over to find a team Channel and ping others and see what everybody's been talking about and really talk about what you can contribute to a team and what you're good at and see others who are looking for team out with specific skills and go message them and join the team some of these are also going to be live workshops one happened earlier today we may do more next week but all of these things are being done for you to make sure that we get to collaborate as much as possible with all people across the world and talk to everybody who's interested in different ideas and getting feedback of course it's not a requirement for you to be on a team it is absolutely possible to hack solo but from experience it's a lot easier if you have a lot of help from someone else that's not that's not just you and you get to worry less about doing everything on your own uh but you are more than welcome to submit something and challenge yourself for the next one and a half weeks now let's talk about project check-ins and of course any questions you have right now from what I'm saying feel free to ask them on e.tv and we'll be able to help you simplify and answer anything that you uh want to know right now so to make this easier we have a notion of a check-in there's going to be two check-ins next week and these behave like a mini standup update for your team and lets us understand how things are going so we can help you be successful and get you unblocked if you are stuck with anything that's going on for this event these are required as well which means only one person from your team has to submit a check-in for your project and this also counts as being successfully participating in a hackathon so your Stakes a return as long as you do these check-ins as well and all this thing happens on your dashboard it's just a simple two-minute survey it just says is everything on track yes no do you know what you're working on are you waiting to hear back from any partner who can help simplify anything that you're doing for your project or if you have any other issues you're running into that you're stuck on and as you fill that out we get to see who needs help and we help make sure that you are getting the right help whether it's pinging a partner getting somebody directly assigned to help debug any issues you're facing or just clarify anything that's not going well and on top of these check because we're also going to be doing live feedback sessions which means you get to come on a zoom call show what you've been working on so far and get feedback whether it's from our judges our partners our mentors or other hackers and really show off what you've been doing and really see how you can take your projects to the next level it's going to be two of these the first one is on Tuesday from 3 P.M to 5:00 P PM Eastern and the second session is on Thursday from 9:00 am. to 11:00 am. Eastern this accounts where the most overlap with both all time zones across the world from this hackathon so you'll be able to join these two our calls come in anytime time show off your project get some feedback and then go back to making your projects even better and getting ready for the submission deadline those are all the key things you want to know about what it means to work on a good project how to submit and what it means to be a top 10 team finalist here and I want to talk about some other small things which is our code of conduct all the rules and behaving as part of our code of conduct is listed on eo.com rules it covers what it means to be a successful project how we think about cheating and the different requirements for submitting a project this is obviously a Ai hackathon and the couple things I want to talk about here is regardless of this event being in personal sync please be respectful for everybody participating at this event there's over 1600 of you combining everybody else in addition to the hackers and we want to make sure that any cases of harassment or abuse are not tolerated so we will be take straight we will be taking strip action and the key thing here is that anything that you build that's part of this hackathon is going to belong to you equally as a team so any project that you submit you and your entire team have equal rights to all of that work and no partners and not e Global as any legal rights to the intellectual property which is going to be your project and because this is an AI hackathon you are absolutely welcome to use AI tools whether it's for code completion or things like Visa Z to help with design we just make want to make sure it reminds you that you just cannot build on something you've been working on in the past and if anything feels suspicious or we think maybe on the gray area We'll be asking you to give us the right evidence to prove that this was done as part of this haathon window and uh we'll be moving from there there's a lot of things that we don't get to cover as part of this ceremony so please make sure that if you have any other questions you can hang us on email or on Discord and message any Global team member we'll be happy to help you to simplify everything I've said which is all about the prizes the schedule judging deadlines your hacker dashboard understanding what a good submission looks like getting examples of past submissions and the videos all that is on the website and you can just head over to e global.com or eth global. and it will take you to the right page on the website for the agent sacaton now there's a lot of amazing part that we have that are working with us for this event to help simplify making you be successful at building the best projects and I'm want to bring some of these Partners on to share what they've been doing and uh give you a little glimpse of who they are why they're excited about this event and how you can use their sdks to build something super quickly so I'm going to start off with autonome and bring on our first partner yq to tell you about who they are and why they're excited to be part of this event hello everyone happy New Year and Happy Chinese New Year welcome to the online hacker song hosted by uh is global and also Aller and autonome so I'm yq front of and also autonome autonome is the platform for developers to build deploy and also distribute this AI agents uh in a verifiable environment so as you can see right we already have this platform running so you can quickly deploy any L agents we already put there in either verifiable environment or non-verifiable environment you just need to fill in a bunch of parameters and then you can quickly deploy the agents um you want uh in a few minutes so it's as you can see right it's basically clear and deploy platform and beyond that the cool thing is like you can also upload your um basically AI agent framework uh as I just mentioned right we already have this Eliza coinbase agent key and also hyperbolic agent so you can also upload your own version you can for them and modify a bunch of the code to support some new features example Eliza has the support for Twitter and agent kit has the support for base blockchains and then you can also create your own aging framework and upload to this platform and I just mention right autonome is the verifiable agent platform so all the code and also data basically are non uh interference and non- tempering so basically we leverage de and also AVS to help to verify and also monitor the status of all the backends of the agents and as you can see right we regularly generate proof from te and at the same time we have a bunch of these abs operators to do this extra verification and monitoring of this uh agent agent platform and also the backend and just scan the QR code and visit website you can quickly deploy your own agent yourself or you can upload your agent framework and like the other developers to basically deploy your agents and distribute these agents thank you and happy develop that was yq you get to learn about autonome an ALT layer next up we're going to talk about coinbase developer platform and to tell you more we'll be lincol everyone my name is Lincoln I'm the product lead for coinbase developer platforms agent kit and I'm incredibly excited to welcome you to the agentic ethereum hackathon it's amazing to see how much effort has been put into AI agents specifically on ethereum over the past couple of months and we want to position agent kit as one of the tools to help you building so that's why we're sponsoring $20,000 in prizes very briefly a agent kit is a way to give every AI agent access to a crypto wallet and a full set of comprehensive onchain interactions you can integrate agent kit into whatever model whatever framework that you want it's extremely customizable and flexible and fully open source I'm going to run you through a few resources that you might find helpful throughout the week the first is obviously our repo here we have all sorts of different guides like how you can contribute to the repo itself with new actions we have examples in both uh typescript and python of how you can get started our document which is a docs. cp. coinbase.com provides you with an overview of agent kit various different quick start guid with videos and all sorts of different Core Concepts to help you start building things out and lastly I want to call out that a lot of these different partners we can integrate directly with such that you can start to be eligible for both of them together for example you can deploy agent kit agents on autonome you can build out different igen layer functionalities or different specific ABS functionalities within agent kit and we would love to see that as an open source contribution obviously you can build on bass you can build on arbitrum you can use guas models you can connect to wallets from lit protocol or privy you can do so many different things with agent kit and I can't wait to see what you all build if you have any questions at all please don't hesitate to reach out to me directly or join us on our G on our Discord where we have lots of our developers and Engineers who are ready to assist you thanks amazing you get to learn about coinbase developer platform next up is igir and to tell you more about how you can use use I and AI want to bring on nater hi I'm Nat dbit with igen labs and igen layer with IG layer you can build any type of application protocol or service and make it verifiable without being bound by any specific blockchain VM so we're seeing people build things all over the place really uh you could kind of imagine everything from oracles to co-processors to Bridges to verifiable inference verifiable AI there's a lot that's happening in the IG ecosystem but I'm specifically excited about this hackathon because of the fact that it's focused on AI agents and we're seeing an explosion of activity on agents on IG layer as well so we're hoping to kind of really pour gasoline on the fire get a lot more people interested in building and um there are a lot of things that you can do you can essentially think of a few different categories that you can build with IG layer you can either build a new product as an ABS you can leverage existing ABS that are already out there you can also leverage something like Ian da or you can build on a roller that's already built on IG and you can be qualified across the board for any of those things we have $20,000 up for grabs and the uh floor is just wide open to see what anyone can build we don't have a lot of guard rails there because we like to see a lot of creativity so thank you so much for checking this video out thank you so much for participating in this hackathon and I wish you luck amazing and then finally want to bring on yorck from nether M and they're going to tell you about how you can do a lot of cool things with nethermind and AI we are so excited to be sponsoring this particular eth Global agentic ethereum is not just a chance to play with agents it is a chance to reimagine ethereum on the user experience side what do wallets look like what do block Explorers look like when you have agents in the middle on the agentic economy which is coming what does it look like when we have billions of agents and they are all customers of ethereum what can ethereum offer them what do they need what does it look like when an agent is a trusted party inside of a protocol and in the far future something that the mind's interested in what if we have robots on chain and how do we allocate resources and coordinate them with trustworthy Ai and in a way that the AIS can verify the reality of the settings around them and the robots we are using agents all the time in NE mind uh we have a that you can use today where you can in record time go from your first line of code to launching your product on chain with an audit by using the nethermind audit agent we also run a lot of open experiments and we welcome you to join us on these one of them is chaos chain which is an experiment of replacing consensus with agents voting on what consensus ought to be and the other is TE setion which is an onchain arena where we uh test system prompts against user queries to try TR and jailbreak these models uh we have many many more of these we have a internship program which is entirely dedicated towards agentic systems and crypto so come join us learn about agents learn about crypto uh in a very very supportive space and then finally uh we have a workshop on the fifth which is at 12:00 pm EST by KIRO bov who is an agentic product manager he is a product manager who is a person not an agent uh on building reliable agents in uh in a theum uh nobody knows what the future looks like with agents there is no consensus and this makes it honestly the most exciting time to build so go out there go play with some ideas and come build with us good luck amazing those are just a four of our partners who were very excited tell you about who they are and how you can leverage a lot of their platforms to simplify your hacks but I want to get into some of our prizes as well so you kind of heard a glimpse of some of these prizes but we'll kind of just go give you a little bit more specifics here for some of these I'm going to start off with autonome autonome is giving $20,000 in prizes and they are structured into these few categories the first one is the best th AI agent the first place gets $4,000 second place gets $2,000 and third place will get $1,000 then you can be one of the best social agent winners where the first place also gets 4,000 second place gets 2,000 and the third place gets 1,000 and the most Innovative agent category where the first place will get 3,000 second place will get 2,000 and third place will get 1,000 next up are coinbase Developer platform prizes the most Innovative use of Asian kit will have three winners the first team will get 5,000 the second project will get, 1500 and the third place will get 1,000 the best asent kit contribution which is making the Asian kit itself better will receive $1,500 for the first place $11,000 for second and $500 for third and the most viral consumer app will receive $1,500 for from CDP there's also a prize for being on the agentic payments category and that team one team will win $1,500 and the best combination of Asian kit and onchain kit which merges two different cks will receive $1,500 as well and if you will get to improve the documentation for the Asian kit from coinbase you also qualify for a $500 prize and there's also a generic pull prize which runs up to the remaining 3,000 from their 20,000 which means anybody that's using agent kit will split $33,000 equally so if there are 10 teams that end up submitting here each team will get $300 let's talk about igon layer igon layer is making things a lot more interesting which is there's a $20,000 pull prize which means anybody that's using igen agents will automatically qualify for this prize and all valid submissions which means submissions that are actually working follow the proper GitHub rules have explicit information around what they're doing how it works and why we'll qualify for this and the number of teams that qualify will be divided $20,000 will be divided by the number of teams that qualify and every team will receive an equal amount so looking forward to seeing all the cool ion agents hacks next up I want to talk about nethermind nethermind is doing a super interesting category for helping you create a real or a virtual robotic agent and the best project for this category will receive $6,000 for first place 4,000 for second place and 2,000 for third and then you also get to make your own destiny here with creating your best agentic future category prize you can learn the specifics about what qualifies as futuristic and the best project in this category is going to receive $2,000 for first place 1,000 for second place and 500 for third and two teams will win $1,500 for making the best AI power defi assistant that is deployed and uses start net so you get to also integrate with different chains and make things super useful for the end user and lastly there's a lot of AI experiments the ne mind is doing you get to see all the specifics on the price page and if you get to improve any of these AI experiments there's going to be a pool price for $1,500 which means all teams that are helping with that category will split $1,500 equally in addition to those teams arbitrum base flow guy and collab land are also giving $110,000 in prizes each and calent the graph lit million obsc privy and Warden are giving $5,000 in prizes each for being using for using their sdks and protocols to make your AI projects and AWS crestal cive are also giving $1,000 in prizes each all the things here are listed on the prizes section and a thing to keep in mind is that there are a handful of conditions to win certain prizes to be sure to read each of those descriptions you get to really understand what qualifies as a prize and what doesn't what you need to absolutely do versus what you can be creative around and not only that you also get to go and see links about how to use different protocols you have direct links to documentation to the workshops that just happen for each of those partners and even list uh links to the code bases where you can just clone those repositories and just build start building on top of those repos because they've been designed specifically for this event to make your life a lot easier and give you all the basic setup immediately so head over to the website in global. and check out the prizes section and finally want to make sure that you get to pace yourself we really want to make sure that the next 10 days are super fun and not exhausting for you the the reason why this event is meant to be a long one is because you want to make sure that you get the time to really understand what's going on take the time to understand think through ideas get some feedback and Implement things so prioritize learning over everything and we really want you to have fun there's a lot of interactive sessions there's a lot of things that we are putting out for you to learn and understand what's happening in this space and ultimately this is about experimentation and learning so at the end of this if you end up learning something new that you did not know today that will be a massive win and of course winning some prizes are cherry on top we care about helping you be more successful and building cool things that may end up defining our agentic future so with that happy hacking everybody we'll see all of you on Discord you can head over to e.com Discord if you're not already connected and you'll be able to see all the 1500 plus hackers who are going to be spending the next 10 days building some incredible things so this is the official end of our kickoff we'll see you all on Discord and until then enjoy your weekends take care everybody goodbye [Music] [Music]"
    },
    {
        "title": "Arbitrum 🛠 Intro to AI on Arbitrum Stylus - Agentic Ethereum 2024",
        "video_id": "vdVVviYdspc",
        "transcript": "yeah hello everybody Welcome to another Workshop we're just going to give you guys some time to get into the space and get comfortable just give it a few moments here and if you could help us by turning off your video that would help a lot thank you all right I think we are good to go thank you everyone for joining us uh for an intro to AI on arbitrum stylus with Matt Hamilton uh thank you so M uh much Matt for joining us um have a great Workshop cool uh thank you very much right hello folks uh so my name is Matt Hamilton I'm senior developer Advocate at the arbitrum foundation and this is going to be a talk about a little bit about an introduction to stylus just to kind of cover some of the little Basics about stylus which is um a system we have that allows you to write smart contracts in languages other than solidity so for example rust uh on the arbitrum Chain uh but specifically as we're talking about agents we're talking about AI um I've put together a demo to show about how to write an AI agent actually in Rust running on the blockchain right so a lot of the stuff you might have seen about AI agents A lot of it is around large language models and doing a lot of processing off chain because those models are so large that you're not going to really run them within a like a consensus environment of a blockchain they're going to be run outside and in a lot of cases they're they're they're often used as a kind of a like a uh you know an Alexa Siri like type sort of system in which um you can give an llm some sort of commands and and Converse with it and will then carry out some tasks right I'm looking at things from a slightly different point of view and that is looking at AI agents actually running on the blockchain themselves so these are smaller agents um but nonetheless they allow you to actually do stuff directly within the blockchain based upon some sort of machine learning AI type model so I'll cover that in a bit and and give a bit more of an example about that what we're going to do is just go a very quick rundown through stylus for those of you that are not familiar just bring everybody up to speed then I'm going to talk a little bit about the AI agents that uh we're implementing and then I'm going to go over to uh vs code and we'll look through some code uh for a demo I've written and then um we can uh actually sort of have a play along actually I have here let me just put in the in the chat um this will come up later in the slides but I'll put it in the chat as well um that is that is the link to the code we'll be going through so if anybody wants to to to kind of look at it in advance um that's what we're going to be right so uh intro to Ai and stylus so Stylus is an execution environment that we have on the arbitrum blockchain arbitrum is a layer to blockchain off of ethereum and it allows you to have Smart contract compiled down to wasm and run on a wasm runtime so this is a separate runtime that runs in parallel to our evm runtime but you will see later on I'll demonstrate it's actually ABI compatible with evm and with solidity so you can write smart contracts in Rust that can interact with solidity smart contracts and vice versa right according to the blockchain they're exactly the same so originally you had kind of this sort of divided thing where you had blockchains that used the sort of evm style languages you know mainly ethereum and ethereum layer 2s that had solidity and even things like Viper that python like language to compile standard evm and then you had a separate sort of world of the wasm and uh BPF blockchains so things like salana near Stellar uh that allowed you to write in rust or C C++ compiled down to to wasm right um but why can't we have them all so this is what stylus allows you to do stylus allows you to combine both the evm and the wasm runtime on one blockchain and you have the best of both worlds so why is stylus kind of a game changer with this so so it opens up ethereum uh you have the network effects of of rust so there's something like uh I think it's about 30,000 solidity developers worldwide there's about uh I believe there about 5 million rust developers worldwide and if you open that up to cc++ that can also compile down to to wasm you're up to about 15 million right so there's a network effects of that um outside of blockchain but also within blockchain there's a lot of other blockchains like I said already salana near stellar um that use rust and so this gives an environment where they can use their rust skills within an evm uh environment as well but it also gives you much more computational capability and much more memory efficiency so that is why we're able to do things like write an AI agent uh that could run actually within uh a blockchain right if you try to do this within solidity you know it would potentially be possible but um it would be a lot harder to actually do and a lot less efficient um the wasm runtime is a lot more memory efficient a lot more computer efficient so for a given um you know cost of gas you get about 10 times better computation uh capability and about 100 times more memory efficiency so that certainly matters when you're doing things like um say you're trying to implement something like you know a neural network and you have a large number of um you know matrices and variables so uh you know that um you know that starts to add up when you when you have things like that right so um like I said uh it's ABI compatible so on the left here we have a counter contract kind of like the the basic uh sort of hello world con uh contract in solidity um in which you see there's a contract with a counter it's got a un 256 as a account and it has three methods here get increment and decrement and on the right hand side we have the same thing implemented in stylus's right so we've got a macro here Soul storage um that allows you to uh Define your storage in exactly the same way so u in 256 count and then we have the implementation of the actual contract and we have again our get increment and decrement um methods there right a little bit more of a Bose just to make it more readable there um as you can see one of the big things about rust is its type safety so you know you do end up having to cast things between different types uh quite a bit um but the the good news is that you actually you know gain a lot of safety in that regard so like I said stylus enhances smart contracts better performance uh better security things like type safety um in there is a lot stronger and modularity right you can access the whole rust ecosystem uh rust has a a thing of what called crates and crates are um you know libraries that you can uh utilize in um your your smart contracts as well so that's a quick rundown of stylus I went through that fairly quickly um someone's saying is the screen paused only for you uh I don't know if anybody else can confirm hopefully it's uh it's working for everybody else I'm currently on the slide why onchain AI um so hopefully other people can can see that um so everything's working good okay thanks auy so right so onchain AI like I said most kind of current AI stuff you're looking at the moment is offchain computation large language models your chat gpts your your claes that kind of thing um and Then followed by some sort of onchain action as a result of that in this case what we're going to do is we're going to demonstrate a different approach which is implementing an AI agent to run entirely onchain now you're not going to have a big billion parameter large language model but you could still have a number of very useful applications for an onchain agent that uses machine learning and and AI so something like you know a DEX hook that analyzes market conditions real time so uh Unis swap V4 has hooks you could have something that actually analyzes the the price implements some sort of prediction based upon that maybe in neur OWN Network um there's a I think called a calman filter that's often used um for predicting you know a True Value within the number of sort of noisy measurements uh you could have something like a dynamic risk scoring for Lending protocols so you could have a sort of an RV type protocol that allows you to you know um lend and and borrow assets but maybe it does some Dynamic risk scoring or or pricing based upon some predictions um you could actually predict price for for some sort of trading uh mechanism or um you know liquidity provision a pool or maybe some sort of automated decision making based on on on chain metrics as as part of a a workflow within a smart contract and you can get this all running on chain so the aspects we're going to look at today uh we're going to look at a particular type of machine learning in AI called reinforcement learning so the easiest way to describe reinforcement learning is is a bit like training your dog right when you ask your dog to sit your dog doesn't know what the word sit means initially they don't understand English they don't know what that means you you say sit and maybe they run away they scratch they lie down they do whatever eventually they'll randomly come across they'll sit and you'll say good boy and you give them a treat right they then associate that treat with that action that they did and you repeat it again and you say sit and eventually they learn they associate sit with that reward and they start to learn um the process that's what Bri enforcement learning is so you have this what's called Agent environment interaction so you have an agent the environments uh that interacts with an environment and gets a reward and I'll show you a diagram of this um on the next slide uh but one of the big things being is it's learning via trial and error so most uh other types of sort of AI or machine learning are based upon um taking a set of inputs and a known set of outputs and and training a model based upon those and then feeling it some unknown data and hoping it makes the same inferences you know as as a result whereas with reinforcement learning you don't tell it the answer but you kind of give it a reward for what it's doing again this will this will make uh sense hopefully as as we go along and there's a number of different algorithms um on here as well the one we're going to be looking at is one called Q learning um as uh as part of this now if you've heard of reinforcement learning or you've heard about um some of this stuff uh there was actually a project called gy that's now forked off to its own project um originally by a small company you might have heard of called open AI so open I had a thing called open AI gym and it was a open-source repository of um environment and agents that you could use within reinforcement learning all written in Python that allowed you to kind of test and and model different uh algorithms and that's what open AI used to be doing when they were originally doing open source stuff before trying to take over the world um but yeah so a lot of this kind of comes from that sort of background there from from Jim and gymnasium now the protocol we're using here um the technique we're using is called Q learning so you have a game imagine in this example an environment so we've got like a grid of squares here we've got a little robot you can see in the top left here and that robot has to get to the end has to make some moves through the squares and try not to touch the bombs the the mins as they go along so what happens is the robot basically randomly moves around and and each Square you have a state stored and the there's an action that it could take so it can move up down left or right so from each Square you have an action and the end result is to work out which action is the most favorable action for any particular state so if you're in any particular uh Square uh that there's a particular move that makes the most sense right and you could expand this St because you could include in things like you know visibility around you so you start to learn if there's a mine in one particular direction you don't step in that direction for example right so you have this um iterative workflow sort of shown up here in the in the top right that you have an agent and the agent observes a state from the environment and it takes an action and as a result of that action the environment gives it a reward and it starts to learn from that reward whether the action that it took in retrospect to that state was a good thing or not so the environment can give it a positive reward and say hey that was a good thing to have done or it can give it a negative reward right and say no that that was bad so you stepped on a mine that's bad we'll give you a negative result you get to the end that's good that's a positive result right now I'm not going to go into the maths too much on this but I do want to just kind of briefly break down how the the Q learning uh sort of Main function which is which is shown here so like I said it's an iterative process and each time you go around you you work out a new value of Q for a particular State um and a particular action and that involves taking the current Q values and adding to it some reward for that state multiplied by a learning rate so there's a couple of variables in here um that you can tweak uh that result in how quickly it will learn and you also add on some discount rate and that is basically how um how far in advance what what uh priority you put on future values versus current values right so it might be that um a very high reward at the end of this is is actually very valuable versus a reward a smaller reward closer to time right so that's what that models um there that yellow and green part there the um Epsilon and then we subtract the current Q values from the end to basically normalize it there right like I said we don't need to get too bog down in that but that's just to kind of show you what happens each time we go round this Loop uh we uh we we recalculate that so I'm saying the the screen we're seeing is the GitHub screen uh you should be seeing slides I was just going to pop in and just say I kind of noticed based on what you're talking we were seeing just the front end of the arbitrum onchain GitHub screen ah okay uh one second let me reshare here because that has that just changed then because that should uh uh that was what we were kind of seeing the whole time um I wasn't sure oh here we go now we're on Q learning we can see that now okay right have you seen any of these slides here or have I been talking blankly to a GitHub repo oh my gosh I'm so sorry we thought that that's where you were starting but yes we seeing these for the first time right now okay uh okay apologies for that folks anyway uh just to quickly flick through these just so you see what you you miss there was talking about stylus uh sort of House Divided um uh why Stylus is a game changer a little bit about solidity versus rust uh how stylus enhances smart contracts why onchain I AI talking about reinforcement learning and analogy of of kind of training a dog uh there and and giving it a reward when it does the right thing and it Associates the reward with the action uh gymnasium uh which was a a fork of uh open the open AI project and I was talking about Q learning here and how you would have like a a grid of a game and this little robot has to to move around and it gets a A score here you have this iterative Loop between the environment and the agent in which the agent observes a state um get takes an action gets given a reward and uh then I was talking about the um the algorithm sort of towards the the bottom there okay so hopefully um that's uh catch people up uh quite quickly here so now what we're going to do is we will be switching over to actually some code uh the link I put in the chat there's also the QR code here uh for the GitHub repository that you've just been staring at the past 15 minutes um and I'm going to show you this onchain agent here so we've taken that idea that I showed you before of a little sort of Maze and uh simplified it slightly uh we don't have any bombs in here but the idea for the agent is to be able to get from the start position to the end position and it's modeled actually as an ERC 721 nft so it's an nft that can dynamically learn um uh the the solution to the puzzle right so again you could do all sorts of things with this you could have nfts that maybe like battle against each other in some card game um you could have uh contracts that actors hooks um on uh like I said um uh dexes and things like that right so let's switch over here right hopefully uh you can see um vs code here and some code um yes I'm GNA good okay right what I'm going to do is I'm going to step through the kind of this the of this code uh I'm not going to go line by line but I'm going to go through and kind of identify the sort of key areas of the code and then if people have any specific questions we can talk about them uh kind of at the end and then I'm going to demonstrate kind of what this does here so like I said this is all written in Rust um here there's a stylus SDK and a stylus uh CLI and there's uh I'll give you Links at the at the end here to uh download those and all the documentation and and everything there um but there's an SDK that gives you various um data types and these are data types that can be um emitted uh can be converted into evm uh encoding uh and returned you know to and from the uh the evm and there's also some storage types here that are used for storing data in the in the evm as well so we start off with a few constants here uh we defin the maze size so it's going to be a 5x5 grid there's four different actions you can take um move up down left or right and so the total size of our our table our Q table this is the table that we map all of the possible moves is the size of the maze times the action count right um and here we've got an enum that um defines the status of the cell so it could be a cell could be empty could have a wall um a start or a goal um end point and we're going to lay out our maze so this maze is is kind of fixed at compile time uh like I said you could make it randomly generate the maze you could have multiple you could have one contract generate the Maze and another contract try and uh have an agent that solves it for example but here as you can see it's sort of 5 by5 in a combination of we starting in the top left we got some empty cells some walls and the goal is sort of down towards the bottom right here okay okay we got four actions like I said up down left and right and we defined them again as an enum just for um EAS here and um we've got a action kind of iterator here that can iterate uh through all of our actions we can emit events and you'll see why why we why we do that so this is a a solidity event here we've got a macro here soul that allows us to uh Define things in certain solidity sort of Fashions here uh so we've got this uh training completed event and you'll you'll see the use of that in a bit entry point this is a a declaration here that that tells us where the code should start executing right uh so this is where we we start because you don't have a main function in in a smart contract uh so this just tells the the where the the you know um interpreter should be should be sort of looking to start things storage here's where we Define our storage so in solidity uh you'll Define your storage um kind of at the start of your contract and most things will probably be something like u in 256s you'll store there um we've got we're storing an the owner and that's an address um and we have our Q table and that is an array of 32-bit integers so again this is where um stylus and Russ can be more efficient because you can store 32-bit integers in solidity defaults to U 256 yes you can use smaller values but it then kind of pads them out and packs them in a certain way and you can end up with very inefficient uh storages uh this does it in a lot more of an efficient fashion here and the size of that array is Q table size now you could actually have you can see here originally I actually had it as a three-dimensional array here a storage array with within a storage array within a storage array um but actually that made things a lot more complicated in the in the process here so I decided to flatten the array out and just make it Q table size here and we've got a a un uh 32 for a random number generator seed so I've got a a very simplistic random number generator here um if this is in production you'd want to uh replace it with something that actually produces much better uh Randomness um but that's what we're using uh here just for the this demo so we start our uh contract here now we've got two sections here we've got two these implementation blocks here uh one is marked public and then later on if I scroll down just to quickly show you before I'll come back up again there's another one later on which has our private functions in so the public ones will be the ones that get exposed um uh via the ABI so those are the ones you'll be able to call from within solidity right so we've got uh this supports interface method uh or function this is actually part of uh erc1 65 this means that uh other systems can work out what kind of um uh smart contract this is right if you use something like the open Zeppelin libraries and open Zeppelin actually do have rust implementations of their standard erc721 erc20 Etc uh libraries you can use those they've got rust versions of those as well um but in this case I'm not utilizing any other third party libraries um I'm doing this from scratch so I had to put a barebones implementation of this in just so that wallets know that this is actually an ERC 721 and we have ERC 721 metadata and again you'll see why that is later on because I'm going to load this um ERC 721 this nft into metamask and you're actually going to see it in metam mask as well we have a mint function against similarly if you've done anything with erc721 this will be familiar and we mint it to an address here we set the the owner's address and we set our random number seed we're just seeding it from one we could probably seed it with something else each time but there we go uh we've got a symbol and a name here so it's this the symbol of this token is called C it's got a name and it's got a description right um again in Rust you'll you'll probably spend a bit more time than Within it doing things like converting types so here we've got to actually say this is a string type and so we're calling two string here right we've got a balance off function and with this nft there's only one token right most smart contract nft smart contracts allow you to have a collection of tokens um and there's a mapping that maps from a token ID to a to a holder in this case for Simplicity sake we just have one right so if you ask the balance of um the owner owner then you get one back otherwise you get zero back right so the owner can own one of these and no nobody else can right again this is just to simplify things uh for this demo and as you can see we're returning this as a un 256 that's just because that's what most um uh most third parties are expecting it to be they're expecting it to be un 256 and the method signature of this gets generated within um evm as a hash of the method signature so you need this uh you need the the values to be the same as what um you would normally have in solidity otherwise you're going to get a different um method signature uh and certain things might not be able to find it then uh we have this owner of method again uh we pass in here a token ID um if the token ID is not one then we return this as an invalid token right um if uh it is the uh owner's address we return okay if the owner is zero I it's not been minted then we return an error as well then right so that's kind of the the sort of standard ERC 721 kind of boiler plate we need in order to get this to work within a wallet right now we're going to get on to the actual um uh AI stuff that we've implemented in here so we've got this function get Q table and that will return our table that we we um have here and it gets um uh you it will get the the table and it basically will um uh return this back uh to you as as a as as an array here uh so this this allows a um what am I trying to say here this allows us from outside from the ABI to get the table to use for debugging and again I'll show you this because we're going to load this up actually although we're going to compile it in Rust and deploy it with solidity we're going to access it through uh remix and I'll I'll show you that in a bit now we get on to the AI side of stuff we have our train method and we pass in a number of parameters here so the number of episodes the number of iterations we're going to do with training right so this is you know how many times you you try and sit down with your dog and try and get them to sit and give them a you know a reward the number of steps so how many times you you know you you you try um you know doing that until they get it right um and then we have these three values Epsilon Alpha and Gamma and they are like I said earlier on how quickly the learning function converges uh how much it prioritizes new information over old information that it's learned and how much it prioritizes a future reward over a reward sooner so we start off with we get our start position um we got a method that will just iterate through that um hardcoded Maze and return our start position uh we have a random number uh seed here and then we start looping through so we have a number of episodes we want to Loop through uh our current position is the start and for up to a maximum number of steps we decode our current Q table so this is on our table we find what position we're in and what are the values um that are available to us there so in this case remember we can move up down left right so there's four values that we could return back and this basically gives us the current um uh preference for each of those right and the idea is we want to find the move that gives us the most reward right so of those four values we're going to try and work out which is the highest because that's the one that gives us the most reward and we call this method choose action right and that will then choose an action based upon that we we'll cover that down in a bit uh we take our we get a new seed out of that we put that into our random number generator just so that we've got a new seed for for next time and we actually store it this is something you'll see here with these storage types you have to explicitly set the value so with solidity you don't need to actually call a set or a get on a storage type but with here within um rust you you do here so we're storing that explicitly uh we calculate our next position we got a a method here again we'll cover these in a bit that gets the next state gets a reward decodes a q value works out what the maximum reward is and then um matches the the action uh up down left or right and then we're going to calculate the uh change in um our reward here and again this is the I'm not going to go into the the mass of it but this is basically uh the encapsulation of that equation that was uh earlier on the start on the slide um towards the start here that works out the current Q values and we then encode and store those back again right so this is one loop around in which we are basically working out okay um what is our next move and what is the reward we get for that that move um if we get to the the the cell called go then we've hit the end and we we break out of this and once we' finished going going through all of this we we're going to emit an event called training complete right so that's the the loop we we we go through now we have a method here called token Ur and token URI is you give it a token ID and it will return back some Json uh for the metadata for your nft and also uh then a link to the image data in this case we're actually going to generate a SVG a dynamic SVG and return that within the image data so we're not returning a URL to a ipfs CID or some HTTP location uh to load say a PNG off of um somewhere we're actually generating this image within our code here now again I'm not going to go through too much through this but this is some code that basically builds up our um SVG to to to visualize it and we'll see this in the output of this in a little bit right so this visualizes uh what our Maze and state looks like we get all of this and we output some Json there as metadata and we include in there our um data and the whole thing gets returned as a data U right this is a a URI that instead of being like https and then a Loc a data URI contains the actual data base 64 encoded in there okay hopefully um I don't have the uh the uh chat here anymore hopefully people are uh I'll I'll catch up with this in a bit here uh and see there seem to be a few few comments in here um so let's see here right uh we've got a uh a number of like I said methods here that check things like if this is a valid position uh reward um etc etc choosing a value here you can go through all of this then we've got some helper functions here so base 64 encoding um the data right so as we're kind of getting on for time here what I'm going to do is give a uh quick sort of demo of this and show what we can do with this right so um we can run a command cargo stylus check here and it will go through compile it and check that everything's okay and at the end here we see we've got contract size um everything was all good here tells us WM size um there's a few warnings I've got to tidy up on on on the code um but otherwise it's all good I can also go ahead and deploy it so there's a cargo stylist deploy command and I pass it my my private key tell it which network to deploy to and it's going toe and deployed it so we have here an address where our code is deployed so you can go and look this address up on arbis scan um and you will uh you know you will see it there if I go and actually look on um uh ARB scan you'll see it there but what we're going to do is we're going to take that and we're actually going to load it into remix right you might have used remix for solidity code but one of the things you can do with remix is you can actually load the ABI in from something else so this um ABI here I've got um this is exported so I can do here um here there's an export ABI uh command here don't way that private key is just for a test account I don't have it here here um so but there's an export ABI command that will export the ABI as Json and then you can put it into um style into remix here and I can tell it to load the contract at the address we just deployed here so I can say load that it'll say okay and we have our contract here and I can now interact with it directly here so I can mint it um uh directly here so I'm going to take my uh address here uh I'm going copy this you may not I can never remember whether you can see um that or not I think you can see that um mint and I can hit mint and I just need to prove that that was off screen so um that was metamask popping up and asking me to prove it and it's gone through and it's okay here so we've now minted it and I can actually look and say okay who's the owner of token number one and it'll come back with my address um I can take my address and I can put it into here and say uh what's the balance of and I've got one um I can look at sort of things like the symbol or whatever now remember I put this get Q table in I can call that and you can see the table is zero there's there's nothing there and I can get the token U if I call that there that is an encoding of all of the data so if I take this contract address and I've created a simple little web app here that I can put that in and hit View nft and that's going to run and here we have the output now we have a trained this yet so the Q table is all zeros and so as far as it's concerned to get from the green square to the Red Square you go up which is obviously wrong it's not going to get anywhere so let's try and train it um here I can bring up the train method here and I can say okay let's train it for 20 episodes with a maximum of 20 steps and we're going to learn actually let's do 10 episodes to start with uh uh Epsilon uh of 20 Alpha of 30 gamma of 90 so those are again those are the parameters I'm not going to go into again too much detail then but those are the parameters for how much it learns and then if I hit transact metamask is going to pop up again on my other screen ask me to confirm it um uh so you can just just see maybe see there it's confirming it this is all happening on arbitrum sepolia can hit confirm and watch what happens with this nft viewer uh you'll see training is completed it updates and you see some of the values have changed so it started to try and learn now it's still not learning very well it's still starting from this green square and going up which is obviously not going to get anywhere uh let's try another 10 rounds of learning so if I hit transact again I can do that hit confirm and it'll go through and it'll learn a bit more it'll come back and it's not learned to get any better there um let's train it for more let's train it for 30 episodes and if if I I hit get Q T you can see this is starting to change in values here so let's try 30 episodes get to learn a bit more uh confirm now we're getting somewhere so we go down right down right right down right so it's solved it right um it is it has learned now how to get to the end of the puzzle so again this is all happening on chain and I hit you know get Q table you can see here um this is the score and for each one of these squares there'll be effectively uh a score as to whether you should be going up down left or right and the highest value is the uh the route you should take and over time if I kept training it that number would get higher and higher when it becomes more obvious that this is the right way to go so the more confident it gets in the uh in in the route to go but as you can see it's it's solved it um down right left right right right down down down left and it gets it gets there so there we go um now just to show you I can actually load this up into uh metamask here I can go in I'm going to delete this uh um old one I had here and but I can Import in I can take copy this address and I can go into metamask nfts can you see my metamask hopefully you can uh and import successfully added and there we go we have the the maze there and as you can see that's that's loaded that same value now metamask unfortunately doesn't update that value it kind of caches it um so as we train it you won't actually see that that move you'd have to delete it and read it again in order to see that that's why I created this little web app just so you can actually see the progress going on but as you can see we have an nft here ERC 721 nft dynamically returning an image and uh it's a result of a training process uh completely on chain remember this training has happened completely on chain within the transaction um on uh on on arbitrum so nothing is nothing is offchain here and uh like I said you could use this for for um getting a smart contract to learn various behaviors depending upon what's happening on on on a blockchain um a price does something it learns to do something in response to that for example so uh thank that's kind of that with the demo so I'm just going to quickly flick through here um if you need help um in the hackathon there's a couple of things uh there's a stylus showcase and that stylus showcase um there's some uh builders that are kind of talking about what they're doing um so that's a bit more kind of like inspirational stuff rather than sort of deep technical stuff but a bit more about some builders that are building on stylus um we have the rust stylus DK uh you can find uh in offchain labs's uh repository we have a site called stylus by example uh that gives you uh some help there as well and like I said open Zeppelin have done their standard contracts in Rust uh and that's great I learned a lot from going through these when I was trying to work out how to do something um I could go and look and see how they' done it in their uh their Library there as well we also have the Stylus Pro Series and uh two of my colleagues uh that are over offchain Labs uh Jose and Chrisco um go into a lot more detail on things like debugging and unit tests and stuff like that for stylus um if you want them they're all on YouTube and we have a telegram and a Discord Channel as well so obviously for this there's the Discord channel for eth Global I recommend you ask in there U but there's also the arbitrum Discord Channel and there's a stylist devs channel on there and there's a stylist devs uh Telegram as well as the Discord Channel there so uh thanks very much um my details are there that QR code will probably take you to the wrong presentation because I haven't updated that but uh I'll I'll put the the link to this slide uh these slides in the uh in the Discord the eth global Discord so right any questions here I know I've probably gone on a little bit over time um this looking through the chat here to see I do see someone waving for a potential question um or they were just saying bye I'm also lucky for you Matt I do edit our videos so I'll be able to sync your slides with that first 10 minutes there oh brilliant okay thank you um great okay then uh well thanks a lot everybody and like I said um in the uh arbitrum Channel arbitrum partner channel on the eth global Discord you can get help there over the next couple of weeks I look forward to seeing what you build um so good luck with it and um yeah get get get building thanks a lot thank you so much Matt that was a workshop called intro to AI on arbitrum stylus with Matt Hamilton thank you so much and eth Global we are good to end our stream"
    },
    {
        "title": "Gaia and Collab.Land 🛠 Build &amp; Deploy AI Agents Using Gaia &amp; Collab.Land - Agentic Ethereum 2025",
        "video_id": "7ShIaAaXhU0",
        "transcript": "and today I'm going to show you how all of you together with me can launch AI agents in about let's say 20 minutes and we'll take questions at the end and at any point if you have questions like Aubrey mentioned drop them in the chat we will have some time to take those during the session as well uh but I'm going to walk you through what Gaia is very quickly we'll also see uh demo as well and then also let's go through the collab land AI agent start which lets you launch AI agents on telegram Twitter it's a very uh lightweight framework that all of you can use and is also mandatory to use for the Gaia and collab land Bounty for the agentic ethereum hackathon with that let's get started what is Gaia Gaia is a decentralized Computing infrastructure platform that is open source that lets anybody like you and me build scale deploy and also monetize AI agents right with when you launch an AI agent with Gaia called node in the Gaia terminology what you get is a chat interface and along with that you also get a open a compatible API that you can pretty much replace uh in your existing applications or build applications using that API itself right for some of the examples that you can try or on our uh website itself you can go to um let's go to a agent domains and then you can browse a agents these are some examples that you can uh try out and see how it works let's say we go to the chemistry one chemistry is uh an agent that is trained specifically on chemistry data set and uh yeah what you see here is the model that this agent runs and also the system prompt and I'll show you how to customize all of this but this is the interface that you get when you also launch a node after the learning through this Workshop I'm not going to do a presentation PBT let's do everything hands on yeah with the time we have and like I said this is the UI that you get you can click Start and ENT start interacting with your own node and also you get a API endpoint which is open a compatible which means you can essentially replace your node URL and start calling your node URL right after deploying right typically depending on the model size it might take about 10 minutes for any of you to launch an agent so let's get into it so the first step is let's install the Gaia CLI for to for us to be able to do that let's go to docs. g. if you're doing this along with me it'll be amazing you'll also uh learn while we do this if not you can always access the recording later right so if you go to dogs.get you can go to setting up your own node this is where there are some prerequisites minimum 16 GB Ram if you want to run a 8 billion parameter model uh ideally and if you want to run a smaller or if you have a machine that is 8 GB Ram or if you want to run uh an a agent on a Raspberry Pi I would recommend you pick a smaller model like 05 billion parameters or 1 billion parameters uh if you run something like an 8 billion parameter model on a lower U capacity machine it will not run it'll it will slow down the entire machine so keep that in mind there are only three steps that you will need to launch your own node which is an AI agent uh on Gaia the first step is installing the CLI right let's quickly install the CLI this is my terminal I'm going to install the CLI this is the first step from setting up your own node section on the guia docs and once the C is installed you have to run this Quick Command The Source command for the gyet CLI to be able to uh access the CLI command in this terminal that you that I have open what gyet has under the hood is if you go to our uh GitHub page I'm going to drop the link to our GitHub uh where you can see the architecture details I'm not going to go detail into the architecture but with every node what you essentially get is tool usage function calling uh an API server and llm and embedding model a vector database by default you have quadrant Vector database in the node and also a prompt manager which is customizing the system prompt and the rack prompt for you to be able to fine-tune your a agents to suit the personality you are training it on right so once you install what you also should notice is there is a node ID which is a wallet address right so every node comes with a metamask wallet address and the private key and the details of this wallet address is in the node id. Json file I'm going to show that very quickly after running this quick command so that you know how to access the wallet details in case you are building an AI agent to perform autonomous transactions on chain right so once we run the source command don't forget to run this command this is very crucial for the gyet CLA to be available which means if I want to run gyet init or gyet start you have to run the source command so the next step is gyet init which is initializing the default node by default when you install the node uh at any point if you if you feel this is Rush drop the drop your questions in the chat I'm happy to slow down and explain but we have a lot to cover I'll try to be as high level as possible but happy to answer any questions you have at any point right when you install the C right uh gy in it is the second command by default you get a llama 3.23 billion parameter model along with a knowledge base about Paris right you can access multiple knowledge bases that we have on our huggingface account right you can go to hugging face. SL I'm going to drop the link to this as well in the chat for all of you to access uh you can go here to access the default data site but if you go to our page on hugging phas you can also see all the models that we support you can see uh DC Caron is also there uh that you can run locally on your machine this one perfectly runs on a uh Raspberry Pi or even a Macbook uh Pro and these are some of the data sets that we have built there are Developer dogs there are uh static text based knowledge bases there are code based knowledge bases that you can also see that we have trained models on uh including the chemistry one that I was talking to you earlier right so this is where you can find all the models and the data sets if you want to play around with uh customizing right so the second command like I was uh getting to is gyet in it right by default you get this but what if you don't want the 3.2 billion parameter model or the knowledge base you can customize the Second Step itself now how do you do that you have to go to our guyet GitHub page where there is a section called repositories also feel free to drop any PRS for any of our repos you should see a node configs repo what we've done is created a repo where we have listed a lot of a models llms essentially which you can uh just copy and initialize by default these have the configs ready to go for the sake of this demo what I'm going to do is I'm going to pick the 2.5 coder 3 billion parameter model right go into the folder you will see the same commands the first is the CLI second is the init Command right so instead of doing gyet in it I'm going to do pass the config file itself so that by default it now downloads the quen 2.5 model like you can see when you do in it it downloads the model itself depending on the internet speed this should take uh the time it needs to download the model then it'll also download the nom embed embeddings model right what are embeddings if you don't know what embeddings are essentially in simple uh terminology L llms uh utilize embeddings as a way to extract information we a story right embeddings are just words or phrases converted to numbers for example happy or Joy are similar words so they have similar numbers together right uh I've I've uh taken the Liberty to uh make it too simple but they are a little more complicated than that but we will leave that definition for later but embeddings are then stored in a vector database imagine a Shelf with different boxes like I said happy and Joy are similar words so they sit in a uh sit in the same box right that's how uh Vector databases make it easy to extract words quickly right and llms are just beautiful storytellers if you if you don't realize already but yes while this is happening I can take any questions if you have if not we can still do it at the end but that's how you initially I right the last step that we have is gyet start right you can post the question in the chat or we can do it later no problem how are you feeling so far all good you can you can react uh so that I know how you are feeling if this is too rushed apologies we have a lot to cover uh but I I promise I'll take questions or I'm always answering questions on the uh Discord Channel as well it's me my user ID is HK space guia so you can reach out to me on the Discord channel for Gaia collab land Bounty as well in case you have questions or if you run into issues okay Alex uh right the question is at a higher level what is gyet replacing like I'm not as familiar with gyet I think it's a great question Gaia is uh your way to run AI agents locally today what happens is you don't know what how your data is being used with all the centralized uh uh llm providers like chat GPT but what Gaia brings to the table is everything runs on your machine you can bring your own specialized knowledge base and create a agents that are specifically F tuned to your data set and also behave in a certain way that you want the agent to behave and you have full control over it right if you if you want to find tune your model you have full control of fine-tuning it everything sits in the like I said in your machine itself wherever you're running it in your local machine or in a server if you're running it in a server but yeah you have full control over everything that you run through the node I think that's the biggest differentiator of ga uh yes what uh the main difference between ganet and if I were to put it is a Gaia is decentralized which means you've seen domains right if I go back to uh the node example that I was showing if you are running a node you can attach your node to a specific domain and this is where decentralized inference com comes into picture like I said every node has a wallet address as well and decentralized inference is if you are only running a node right you can attach it to a specific domain and then you can also earn rewards for contributing to the network and if for somebody like me if I'm an agent developer app developer or an agent developer for me to be able to con assume your node or your uh domain for the inference I'll be able to pay you right that's you that's how you also make money and also contribute back to the inference itself so that's those are some differentiators AMA lets you run local models but GA is a step uh beyond that where you get control over everything that you need to run an AA agent with customizable knowledge base and also generate embeddings through uh your agent itself yeah that's how I would put it yes I will get to I will get to how you can use gyet with other platforms uh no actually ganet doesn't replace Eliza or uh coin cdps agent kit in fact you can use Gaia as the llm inference provider for both Eliza or even F data or cdps agent kit and use it as the one that translates natural language into actions which is where tool calling will come into picture but let me quickly do gyet start right the last command that you will need to be able to run your own node right so once you do ganet start what will happen is you will get you you we've all seen the node address in the step one what you will get is the node address attached to a domain that you can quickly use in your browser or the open a compatible API uh and start building applications and one quick thing that I want to mention is if you see that your node stops after this step that means either your machine is not capable of running that model or there is a problem in your config.js I'll show you where the config.js is but if it stops here that's one thing that we've noticed in common uh some of the errors that most of our developers face but if you see all of this then your node is perfectly working like you can see this is the domain that we have you can now simply open this in the browser and start interacting with it that's how simple it is what we have here is like I said a default model then there is the API itself you can simply run this curl command and it'll respond and this entirely is responding from my own machine there is no internet access to this right this is from my machine and now you can also do chat with this node and talk to the node directly from the browser you should be able to see the node address here and the model right when you say start you can also customize the system prompt here this is the default system prompt like you can see it is going to it it is an intelligent programmer powered by quen coder model and it'll help answer questions related to coding you can customize this based on the knowledge base let's say you are providing a knowledge base in rust or solidity uh you can customize this saying you are expert in Rust please respond to users queries in uh the best possible Manner and yeah you can play around with the system prompt and the rack prompt to get better responses you can also tell how the llm should respond uh either in bullet points or ESS how the format you want right but if you want structured outputs you should need a larger model because in the smaller models structured outputs and Tool calling is uh not possible right you will need a bigger model like a 32 billion parameter model to get tool calling out of the box right uh that's that's how you uh spin up a node and use it right this is the API tutorial like I said we called the API here that's how you spin up on gu node uh all from our local machine so now if I go back to my command line I'm going to quickly show you where this sits you can simply go to ganet as the folder let me clear this for you to be able to see this better if you go to ganet folder here is where all the files are right let me expand this these are all the files config.js is where everything sits right the llm URL the knowledge based URL I'll show you that but you should also remember that node ID JSM is where your unique node ID is sitting and the device ID and node ID are both used to connect to the Gaia protocol now how do you do that simply go to our docs and you should be able to see a joining the guia protocol this is where you can come go through the tutorial and contribute back to the decentralized inference that I was talking about earlier right this you should keep this important if you are installing the node or reinstalling it if you don't want the address to change right can Gyan noes call external apis like web search that should be possible but you will need tool calling enabled like I said you will need a larger model for Tool calling but if you want to use tool calling specifically let's say with the agent gate uh I would recommend you use one of our public noes what we have also done is in the public noes section on the left we have uh we are running some nodes that you can use for Tool calling like we have a voice to text model whisper V to large running on this domain this is also open a compatible you can use this and and uh for specifically for Tool calling if you are using uh let's say agent kit right I would recommend you use lat tool. us. guy. Network as the uh base URL right I'm going to drop this in the chat for you all of you to be able to remember this but this one by default comes with uh tool calling right you should be able to use this and call any external API right be it uh let's say you you've created a subgraph and you want to fetch some specific stat s from a from your own smart contract you should be able to do that by using this one by default if you're running a model it will not work right uh especially the one that I showed you it will not work right so this is the llm like you can see everything is here there is no internet call by default right so if you delete this your node will stop working that's how simple it is and let's also quickly see how uh you can use collab land a and start kit that lets you connect first of all your node that we just launched uh and run llm inference uh and I'm not going to deploy a telegram bot in this example because we don't have that much time today but I'm going to show you how set how to set up the environment variables and all of that in the A and start kit right so remember using Gaia and also the AA in kit is mandatory for our Bounty right we've also posted some examples of what you should build but remember these are not set in place if you want to build something else uh please do so right these are only some examples that I wanted to share through the Bounty but please go through all the bounties and also the additional prices that we have right the a agent startet from colland link is available in the Bounty page I'm going to drop the link to this uh GitHub repo in the chat as well for all of you to use it right a agent start kit is based on alyza originally and this lets you uh launch a agents in Twitter Discord um Telegram and also use lit protocol call for late actions where you can abstract away your um wallet keys private keys and all that right so please go through the repo this is very extensive uh in terms of what all features there are you will know notice that once I start installing the CLI right so let me uh clone the A and start kit I'm going to do get clone and run this this should be very quick very simple very straightforward let me go into it the first step that you need to do is obviously install the dependencies and while the dependencies are being installed uh you should be able to scroll down and see the project structure unlike Eliza there is a back end and a front end here so there is a client and a server architecture and these are all the environment variables that you have to set up when you are using the uh collab land a and state I would recommend you get the collab land API key and guia models are also available through these en variables I'm going to show you how to set them up in the environment variables file you can also bring your Eliza character if you have something already set up using Eliza and yes like you can see there is uh Twitter integration available there is Discord integration there is Joker is integration there is GitHub integration all out the box all you have to do is set these parameters and it will start working in fact there is orbit studio also uh available in the integration but yes that's uh the agent kit so build is done now let's see the next step is to I think run this yes pnpm run Dev when you do pnpm run Dev on the a agent startet it will start asking for all the environment variables right so you can set them right from here like you can see there is the public URL Sean uh Sean is asking does ask support voice for agents uh I haven't specifically tried ask for voice I don't think it supports but please correct me if I'm wrong uh if you're trying it out but yeah I haven't write for voice yet like you can see it'll start asking for all the environment variables right it will not work because I'm not setting anything I'm just showing you how to run this right so here is where you can set up the guyet uh en environment variables but for the sake of this demo what I'm going to do is I'm going to go back to the a agent start aate and open this in my code editor and show you the environment variables path right so the EMV example here is where you can add the guia details right this is how you do it now how do you know which model you are using very simple once you get the domain URL right uh if you go to The Domain URL that you got from the Gaia CLI once you install here is the model name this is where you bring it from just copy this and paste it in the model URL sorry Gyan netore model and then this is your server URL followed by V1 and then the embedding model is also mentioned here by default it is a nomic embed embedding model and if you want to generate embeddings and use gyet embeddings you can always set this to true I would set it to true but yes this is where you add all the environment variables depending on where you launching the agent if you're launching the agent only on let's say telegram I would only add the tegram bot token and then test it out right but you can always add the other parameters here by default this is the character Json file you can always update this to a specific character let's say you training the agent on uh vitalex personality and his uh content that he puts out on the internet you can customize this to behave like vitalic right uh that's the character file but yes that's and of course server is the back end for the age and this is much more simpler and less um less uh in terms of the number of packages uh as compared to Eliza is what I would say for this one but yes this is an overview of how you can run uh a agent State plus gyo so once you run gyane just add them into the EnV file here and then pnpm run Dev and you should be good to go right I would highly recommend you try both these out and if you run into any issues I am available on Discord and with the rest of the time available I'm happy to take any questions if you've already tried both of these platforms please let me know and uh if you have any issue I can I can help you answer but my recommendation as an AI agent Builder if you are building an AI agent for the first time is to pick a model that fits your use case right Lama 3.2 can fit into specific use cases similarly if you are uh if you building an agent that writes code right I would highly recommend you use either M scotr or quen 2.5 right and if you want if you want better accurate responses you will need larger models but if you want your model to do very specific tasks uh then I would recommend using smaller language models slms like the one I showed you where it is just a three billion parameter model you can also use smaller ones if you're running it on a smaller machine so you to consider all of this before you run the a agent itself right but do give uh it a shot and let me know if you run into any troubles but if you have any questions let's take them now I hope the workshop was resourceful you can drop an emoji as a response or in the chat also let me know uh if the workshop was helpful enough to get you all started while while while we are getting some questions or if you have any questions uh there there are a couple of resources I want to share in addition to our GitHub repo uh what is your actual target audience with your tool the actual target audience is for everybody to be able to build specialized agents we don't want another uh chat gbt alternative or or something like chat gbt where it is a jack of all trades I think the future is highly specialized customized agents and agent to agent interactions right even for the Bounty when we say mother of all agents it means imagine like a super super human of Agents right that can do multiple things by interacting with other agents not by doing everything by itself can we use a agent kit for just next day is back yes you can use it like you want to what is the colland key used for uh collab is the one uh that created the aent stade we are partnering with them to run this uh they they are the ones who created all the Integrations with the Discord they are the ones who are actively building the a in state and supporting more developers to build uh AI agents in a quick manner right if let's say if you want to use a public node with the AI agent start you should be able to do that right one of the resources that I wanted to quickly share is obviously onor docs. g. you can go to the guides and tutorial section we have some examples including the CDP and how you can use uh Gia node on on Eliza and also on CDP and uh deep seek is also coming up very soon here I'm just waiting for the pr to be accepted uh but yes docs. gy. is where you can find this you have a list of agent types and uh then what type of models work well for those uh I think a great example for that would be uh to seeing the existing agents that we have and Which models they're running on if it is a generic agent that that you want to respond in text I would recommend using Lama 3.03 billion parameter or 8 billion parameter for coding like I said quen is a great example uh and uh if you want reasoning I think no question you can use deeps but run it locally not using deeps API uh because we don't know where that data is going so run your uh a deeps model locally you can run that using the distal Lama 8 billion version and uh yeah you can find more of these demos and also some more examples right on on my Twitter I keep dropping some of these uh on my Twitter you can you can go there and uh check some of those out you can go to this is my Twitter handle you should be able to find a lot of these demos once you go to my uh right this is the one this is an npm package let's say you want to programmatically launch a agents using JavaScript you can do that using uh the npm package called gu deploy right that that way you can spin up multiple nodes automatically that's that's one way to do it if you have any like PRS you you could also contribute there I think it would be helpful to have a session where people pitch their project and then yes so there are two sessions coming up this week uh where there is Project pitch feedback sessions I believe that's what they are called please join them I will be there I will give you feedback and also one-on-one um insights on on how you can tweak the idea that you're building I think that's a great way to get feedback thanks Alex for bringing that up uh but yeah this this is where you can find many more examples that are still not on our dogs so do do go check it out uh what else did I want to share yeah this is the one that shows how you can run deep seek R1 locally but yeah I can I can go on I can I can share many more resources but if you want more resources I would recommend you ask me on uh our Discord Channel including including any questions that you have uh if you running into any issues but what I would say uh to end this off um is building a agents is simple right I think what is important is for you to Define your use case better and use the right llm and fune it to an extent where you're satisfied with how it responds right the key is always in chunking the data uh segmenting it in the right format uh and then giving that to the llm as the knowledge base you can go to our knowledge Bas section to see how you can convert a text file PDF file a CSV file into embeddings but remember if you don't chunk your data and segment your data your llm will go all out and respond very randomly which uh which you wouldn't want right you would want it to respond properly right for Tool calling like I said use the link that I shared specifically for Tool calling but yes that's all I have for this demo and I think we are right at the end of time thank you so much uh to the global team for having me and yes questions in discard after this amazing thank you so much uh Harish uh if you want to run AI agents locally on Gaia must find him in Discord uh and in Twitter and then this will remain a resource on YouTube for you guys throughout this entire next couple of weeks so thank you so much again for your time and we really appreciate you and E Glo"
    }
]